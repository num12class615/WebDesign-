%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1310.i012.003.P.m002.c20.Diamond icons.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Neyro
%%CreationDate: 10/16/2013
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1310.i012.003.P.m002.c20</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2013-10-16T16:36:27+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-10-16T16:36:27+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-10-16T16:36:27+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9NZFm7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkf&#xA;mrzhpXluCA3Sy3N9euYtO0u0T1bq5kAqVijFNgN2ZiFXucCsDvfzm80WNvqkt55WtbWfS7iO0k06&#xA;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&#xA;sVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:903C5FB05936E311B004FFC2FF07FEBF</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:903C5FB05936E311B004FFC2FF07FEBF</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e6bf1b69-116b-48fb-9d92-5317a5472e09</stRef:instanceID>
            <stRef:documentID>xmp.did:7BCC331B9135E31196B1FEAB09BDE53C</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7BCC331B9135E31196B1FEAB09BDE53C</stEvt:instanceID>
                  <stEvt:when>2013-10-15T23:11:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:903C5FB05936E311B004FFC2FF07FEBF</stEvt:instanceID>
                  <stEvt:when>2013-10-16T16:36:27+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=30 G=23 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>30</xmpG:red>
                           <xmpG:green>23</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.968627 .952941 .941176 rgb
f
53.2596 399.455 mo
64.8863 400.695 li
60.4943 407.708 li
57.8058 405.575 55.3633 402.784 53.2596 399.455 cv
cp
60.4943 329.466 mo
64.8863 336.481 li
53.2596 337.718 li
55.3633 334.388 57.8068 331.597 60.4943 329.466 cv
cp
92.6629 337.718 mo
81.0362 336.481 li
85.4281 329.468 li
88.1177 331.599 90.5592 334.391 92.6629 337.718 cv
cp
85.4292 407.705 mo
81.0362 400.695 li
92.6629 399.455 li
90.5601 402.782 88.1177 405.575 85.4292 407.705 cv
cp
54.0476 383.293 mo
61.3304 388.248 li
65.1051 398.735 li
52.5038 397.391 li
54.0476 383.293 li
cp
51.8627 381.246 mo
46.9308 383.971 li
46.0112 380.125 45.4306 376.021 45.2357 371.753 cv
51.8627 381.246 li
cp
51.8627 355.926 mo
45.2357 365.419 li
45.4306 361.148 46.0112 357.046 46.9308 353.204 cv
51.8627 355.926 li
cp
61.3304 348.924 mo
54.0476 353.879 li
52.5038 339.781 li
65.1051 338.441 li
61.3304 348.924 li
cp
91.8779 353.881 mo
84.592 348.924 li
80.8183 338.441 li
93.4207 339.781 li
91.8779 353.881 li
cp
94.0629 355.926 mo
98.9948 353.202 li
99.9153 357.046 100.496 361.148 100.691 365.419 cv
94.0629 355.926 li
cp
94.0629 381.246 mo
100.691 371.753 li
100.496 376.023 99.9153 380.125 98.9948 383.971 cv
94.0629 381.246 li
cp
84.592 388.248 mo
91.8779 383.293 li
93.4207 397.391 li
80.8183 398.735 li
84.592 388.248 li
cp
67.8073 400.316 mo
72.9612 397.614 li
78.1142 400.316 li
72.9601 411.125 li
67.8073 400.316 li
cp
71.2026 396.325 mo
67.0567 398.498 li
64.2045 390.578 li
71.2026 396.325 li
cp
55.7719 368.585 mo
52.8874 379.342 li
45.3775 368.585 li
52.8874 357.83 li
55.7719 368.585 li
cp
71.2026 340.849 mo
64.2045 346.596 li
67.0567 338.673 li
71.2026 340.849 li
cp
78.1142 336.856 mo
72.9612 339.559 li
67.8073 336.856 li
72.9601 326.051 li
78.1142 336.856 li
cp
74.721 340.849 mo
78.8668 338.673 li
81.7179 346.594 li
74.721 340.849 li
cp
90.1506 368.585 mo
93.0381 357.83 li
100.549 368.585 li
93.0381 379.344 li
90.1506 368.585 li
cp
74.721 396.325 mo
81.7179 390.578 li
78.8668 398.498 li
74.721 396.325 li
cp
62.9473 387.022 mo
57.7547 368.585 li
62.9473 350.148 li
72.9612 341.924 li
82.9763 350.148 li
88.1667 368.585 li
82.9763 387.022 li
72.9612 395.246 li
62.9473 387.022 li
cp
91.5453 381.157 mo
85.4479 385.304 li
89.1393 372.193 li
91.5453 381.157 li
cp
89.1393 364.979 mo
85.4479 351.866 li
91.5453 356.018 li
89.1393 364.979 li
cp
54.3812 356.018 mo
60.4755 351.869 li
56.7852 364.979 li
54.3812 356.018 li
cp
56.7852 372.195 mo
60.4755 385.304 li
54.3812 381.157 li
56.7852 372.195 li
cp
74.5281 412.298 mo
79.5006 401.871 li
83.8738 408.853 li
80.9768 410.806 77.8285 412.01 74.5281 412.298 cv
cp
95.0866 395.073 mo
93.8013 383.34 li
98.4923 385.931 li
97.5906 389.203 96.4429 392.272 95.0866 395.073 cv
cp
98.4923 351.244 mo
93.8013 353.833 li
95.0866 342.1 li
96.4429 344.902 97.5906 347.969 98.4923 351.244 cv
cp
83.8738 328.317 mo
79.5006 335.301 li
74.5281 324.875 li
77.8285 325.166 80.9768 326.364 83.8738 328.317 cv
cp
71.3943 324.875 mo
66.4218 335.301 li
62.0487 328.315 li
64.9456 326.361 68.0939 325.164 71.3943 324.875 cv
cp
50.8379 342.1 mo
52.1243 353.833 li
47.4342 351.244 li
48.335 347.971 49.4806 344.902 50.8379 342.1 cv
cp
47.4342 385.929 mo
52.1243 383.34 li
50.8379 395.075 li
49.4806 392.272 48.335 389.203 47.4342 385.929 cv
cp
62.0487 408.855 mo
66.4218 401.871 li
71.3943 412.301 li
68.0939 412.01 64.9456 410.81 62.0487 408.855 cv
cp
72.907 414.344 mo
72.9247 414.344 72.9404 414.346 72.9581 414.346 cv
72.9769 414.346 72.9956 414.344 73.0133 414.344 cv
73.0176 414.344 73.0207 414.344 73.0238 414.344 cv
77.5147 414.328 81.7721 412.768 85.5897 409.994 cv
85.6251 409.978 85.6647 409.974 85.6971 409.952 cv
85.7378 409.926 85.7617 409.884 85.7971 409.853 cv
89.3843 407.194 92.5701 403.455 95.1846 398.917 cv
95.196 398.906 95.2096 398.902 95.2201 398.89 cv
95.292 398.796 95.341 398.691 95.3764 398.577 cv
97.5478 394.737 99.3086 390.333 100.559 385.531 cv
100.559 385.525 100.562 385.522 100.562 385.517 cv
101.924 380.276 102.68 374.566 102.68 368.585 cv
102.68 362.607 101.924 356.895 100.562 351.656 cv
100.562 351.65 100.558 351.643 100.558 351.638 cv
99.3086 346.837 97.5478 342.436 95.3774 338.594 cv
95.342 338.484 95.292 338.377 95.2201 338.283 cv
95.2096 338.27 95.196 338.265 95.1835 338.251 cv
92.5711 333.716 89.3854 329.979 85.7982 327.323 cv
85.7627 327.29 85.7387 327.249 85.6971 327.22 cv
85.6637 327.199 85.6241 327.195 85.5886 327.177 cv
81.7711 324.405 77.5137 322.845 73.0238 322.829 cv
73.0207 322.829 73.0176 322.829 73.0133 322.829 cv
72.9956 322.829 72.9769 322.827 72.9581 322.827 cv
72.9404 322.827 72.9247 322.829 72.907 322.829 cv
72.9039 322.829 72.9008 322.829 72.8986 322.829 cv
68.4046 322.843 64.145 324.405 60.3265 327.181 cv
60.2931 327.197 60.2587 327.201 60.2264 327.22 cv
60.19 327.246 60.168 327.285 60.1357 327.314 cv
56.5444 329.972 53.3555 333.712 50.7388 338.253 cv
50.7285 338.265 50.7139 338.272 50.7034 338.283 cv
50.6305 338.379 50.5783 338.488 50.5439 338.6 cv
48.4152 342.368 46.6795 346.675 45.4368 351.369 cv
45.4046 351.453 45.3827 351.536 45.3723 351.622 cv
44.0066 356.871 43.2467 362.593 43.2467 368.585 cv
43.2467 368.585 li
43.2467 368.585 li
43.2467 368.585 li
43.2467 368.587 43.2467 368.587 43.2467 368.587 cv
43.2467 368.587 li
43.2467 368.587 li
43.2467 374.58 44.0066 380.302 45.3723 385.551 cv
45.3827 385.638 45.4046 385.72 45.4368 385.802 cv
46.6795 390.498 48.4152 394.801 50.5439 398.571 cv
50.5783 398.687 50.6305 398.794 50.7034 398.89 cv
50.7139 398.902 50.7285 398.906 50.7388 398.917 cv
53.3565 403.458 56.5455 407.202 60.1367 409.86 cv
60.169 409.89 60.1909 409.928 60.2264 409.952 cv
60.2576 409.972 60.2921 409.976 60.3244 409.989 cv
64.145 412.768 68.4046 414.33 72.8986 414.344 cv
72.9008 414.344 72.9039 414.344 72.907 414.344 cv
cp
.117647 .0901961 .0745098 rgb
f
146.668 342.097 mo
145.311 344.902 144.164 347.971 143.263 351.244 cv
147.954 353.833 li
146.668 342.097 li
cp
173.945 336.856 mo
168.791 326.049 li
163.638 336.856 li
168.79 339.559 li
173.945 336.856 li
cp
187.708 353.881 mo
189.252 339.781 li
176.648 338.441 li
180.423 348.924 li
187.708 353.881 li
cp
179.705 328.319 mo
176.808 326.366 173.66 325.166 170.359 324.875 cv
175.331 335.301 li
179.705 328.319 li
cp
188.494 337.718 mo
186.389 334.391 183.948 331.599 181.259 329.468 cv
176.866 336.479 li
188.494 337.718 li
cp
156.325 329.466 mo
153.637 331.597 151.193 334.388 149.091 337.718 cv
160.717 336.479 li
156.325 329.466 li
cp
167.226 324.875 mo
163.924 325.164 160.775 326.364 157.879 328.317 cv
162.252 335.301 li
167.226 324.875 li
cp
142.76 353.204 mo
141.84 357.049 141.26 361.15 141.065 365.421 cv
147.692 355.926 li
142.76 353.204 li
cp
157.16 348.924 mo
160.935 338.441 li
148.334 339.781 li
149.877 353.881 li
157.16 348.924 li
cp
157.88 408.855 mo
160.776 410.81 163.924 412.01 167.226 412.298 cv
162.252 401.873 li
157.88 408.855 li
cp
149.091 399.455 mo
151.193 402.784 153.637 405.575 156.325 407.71 cv
160.717 400.695 li
149.091 399.455 li
cp
141.065 371.755 mo
141.26 376.023 141.84 380.125 142.76 383.971 cv
147.692 381.246 li
141.065 371.755 li
cp
151.601 368.587 mo
148.716 357.83 li
141.207 368.587 li
148.716 379.342 li
151.601 368.587 li
cp
143.263 385.929 mo
144.164 389.205 145.311 392.272 146.668 395.075 cv
147.954 383.34 li
143.263 385.929 li
cp
149.877 383.294 mo
148.334 397.391 li
160.935 398.735 li
157.16 388.25 li
149.877 383.294 li
cp
168.791 411.125 mo
173.945 400.316 li
168.79 397.616 li
163.638 400.316 li
168.791 411.125 li
cp
181.258 407.708 mo
183.948 405.575 186.389 402.782 188.494 399.455 cv
176.866 400.695 li
181.258 407.708 li
cp
152.614 364.979 mo
156.306 351.869 li
150.21 356.018 li
152.614 364.979 li
cp
156.306 385.306 mo
152.614 372.197 li
150.21 381.157 li
156.306 385.306 li
cp
160.035 346.596 mo
167.033 340.851 li
162.887 338.675 li
160.035 346.596 li
cp
180.423 388.25 mo
176.648 398.735 li
189.252 397.391 li
187.708 383.294 li
180.423 388.25 li
cp
168.79 395.248 mo
178.806 387.024 li
183.997 368.587 li
178.806 350.15 li
168.79 341.924 li
158.777 350.15 li
153.585 368.587 li
158.777 387.024 li
168.79 395.248 li
cp
170.359 412.298 mo
173.66 412.008 176.808 410.808 179.705 408.853 cv
175.331 401.873 li
170.359 412.298 li
cp
174.697 338.675 mo
170.55 340.851 li
177.548 346.596 li
174.697 338.675 li
cp
185.981 368.587 mo
188.869 379.344 li
196.38 368.587 li
188.869 357.83 li
185.981 368.587 li
cp
194.826 383.971 mo
195.746 380.125 196.327 376.023 196.521 371.755 cv
189.893 381.246 li
194.826 383.971 li
cp
194.322 351.244 mo
193.422 347.971 192.274 344.902 190.917 342.1 cv
189.631 353.833 li
194.322 351.244 li
cp
181.278 351.869 mo
184.968 364.981 li
187.375 356.018 li
181.278 351.869 li
cp
196.521 365.421 mo
196.327 361.15 195.746 357.046 194.826 353.202 cv
189.893 355.924 li
196.521 365.421 li
cp
190.917 395.073 mo
192.274 392.272 193.422 389.205 194.322 385.931 cv
189.631 383.34 li
190.917 395.073 li
cp
184.968 372.195 mo
181.278 385.306 li
187.375 381.157 li
184.968 372.195 li
cp
167.033 396.325 mo
160.035 390.58 li
162.887 398.498 li
167.033 396.325 li
cp
174.697 398.498 mo
170.55 396.325 li
177.548 390.58 li
174.697 398.498 li
cp
f
289.274 395.063 mo
290.641 385.093 li
298.408 379.534 li
296.329 384.436 293.281 389.618 289.274 395.063 cv
cp
233.981 379.534 mo
241.745 385.093 li
243.115 395.063 li
239.108 389.618 236.058 384.434 233.981 379.534 cv
cp
231.112 359.707 mo
231.41 358.195 231.847 356.826 232.355 355.568 cv
235.737 364.031 li
230.716 366.822 li
230.543 364.356 230.662 361.977 231.112 359.707 cv
cp
240.326 345.554 mo
240.763 345.348 241.203 345.162 241.641 344.991 cv
244.76 347.051 li
234.867 350.943 li
237.476 347.268 240.328 345.556 240.326 345.554 cv
cp
250.625 343.875 mo
246.966 346.084 li
244.104 344.192 li
245.473 343.849 246.833 343.67 248.171 343.67 cv
249.018 343.67 249.835 343.746 250.625 343.875 cv
cp
264.546 353.537 mo
259.305 354.71 li
248.795 347.343 li
253.384 344.573 li
259.065 346.561 262.968 351.314 264.546 353.537 cv
cp
279.003 344.571 mo
283.594 347.343 li
273.084 354.71 li
267.845 353.537 li
269.415 351.314 273.309 346.557 279.003 344.571 cv
cp
288.29 344.19 mo
285.423 346.084 li
281.762 343.875 li
282.554 343.746 283.371 343.67 284.22 343.67 cv
285.56 343.67 286.926 343.849 288.29 344.19 cv
cp
297.53 350.947 mo
287.629 347.051 li
290.754 344.985 li
291.169 345.149 291.582 345.324 291.99 345.517 cv
292.036 345.543 294.913 347.254 297.53 350.947 cv
cp
290.133 382.97 mo
286.64 374.891 li
295.049 366.279 li
299.309 376.399 li
290.133 382.97 li
cp
272.736 405.188 mo
274.854 407.04 li
272.821 408.402 270.903 409.643 269.346 410.633 cv
272.736 405.188 li
cp
259.655 405.188 mo
263.043 410.635 li
261.488 409.643 259.568 408.404 257.537 407.04 cv
259.655 405.188 li
cp
237.34 366.279 mo
245.749 374.891 li
242.254 382.97 li
233.08 376.399 li
237.34 366.279 li
cp
245.938 358.279 mo
237.507 363.039 li
233.726 353.572 li
245.938 348.764 li
245.938 358.279 li
cp
247.948 357.572 mo
247.948 349.22 li
256.703 355.357 li
247.948 357.572 li
cp
284.441 349.22 mo
284.441 357.572 li
275.686 355.357 li
284.441 349.22 li
cp
286.453 360.602 mo
293.746 364.722 li
286.453 372.193 li
286.453 360.602 li
cp
279.691 385.5 mo
285.275 376.801 li
288.286 383.772 li
279.691 385.5 li
cp
278.342 387.839 mo
288.515 385.794 li
286.889 397.662 li
274.041 402.054 li
278.342 387.839 li
cp
266.193 397.811 mo
271.26 403.743 li
266.193 411.887 li
261.129 403.743 li
266.193 397.811 li
cp
254.047 387.839 mo
258.348 402.054 li
245.5 397.662 li
243.874 385.794 li
254.047 387.839 li
cp
247.116 376.803 mo
252.696 385.5 li
244.104 383.772 li
247.116 376.803 li
cp
245.938 372.193 mo
238.641 364.722 li
245.938 360.602 li
245.938 372.193 li
cp
260.312 401.592 mo
256.753 389.842 li
264.757 396.388 li
260.312 401.592 li
cp
272.077 401.592 mo
267.632 396.388 li
275.636 389.842 li
272.077 401.592 li
cp
294.882 363.039 mo
286.453 358.279 li
286.453 348.764 li
298.662 353.572 li
294.882 363.039 li
cp
265.608 361.789 mo
265.624 361.8 265.645 361.804 265.664 361.817 cv
265.689 361.835 265.71 361.857 265.737 361.87 cv
265.754 361.878 265.774 361.874 265.793 361.883 cv
265.922 361.942 266.056 361.979 266.193 361.979 cv
266.333 361.979 266.471 361.942 266.6 361.883 cv
266.617 361.874 266.635 361.878 266.652 361.87 cv
266.679 361.857 266.702 361.835 266.727 361.817 cv
266.744 361.806 266.767 361.8 266.784 361.789 cv
273.505 356.895 li
284.441 359.663 li
284.441 374.365 li
276.8 386.277 li
266.193 394.954 li
255.59 386.277 li
247.948 374.365 li
247.948 359.663 li
258.882 356.895 li
265.608 361.789 li
cp
265.188 358.985 mo
261.498 356.296 li
265.188 355.468 li
265.188 358.985 li
cp
267.201 355.468 mo
270.891 356.296 li
267.201 358.985 li
267.201 355.468 li
cp
230.945 369.007 mo
234.94 366.789 li
231.969 373.854 li
231.504 372.202 231.167 370.586 230.945 369.007 cv
cp
249.191 401.063 mo
257.9 404.04 li
255.808 405.869 li
253.53 404.307 251.211 402.647 249.191 401.063 cv
cp
276.583 405.869 mo
274.489 404.04 li
283.196 401.065 li
281.176 402.647 278.859 404.307 276.583 405.869 cv
cp
300.422 373.854 mo
297.447 366.789 li
301.444 369.008 li
301.223 370.586 300.887 372.202 300.422 373.854 cv
cp
301.673 366.822 mo
296.652 364.031 li
300.036 355.562 li
300.537 356.808 300.97 358.163 301.27 359.661 cv
301.725 361.948 301.848 364.34 301.673 366.822 cv
cp
303.241 359.262 mo
301.108 348.577 293.325 343.951 292.92 343.72 cv
290.001 342.34 287.076 341.642 284.22 341.642 cv
282.3 341.642 280.519 341.957 278.872 342.472 cv
278.868 342.474 278.864 342.476 278.857 342.478 cv
272.321 344.523 267.955 349.841 266.193 352.356 cv
264.436 349.841 260.068 344.523 253.53 342.476 cv
253.525 342.476 253.521 342.474 253.517 342.472 cv
251.868 341.957 250.089 341.642 248.171 341.642 cv
245.315 341.642 242.388 342.34 239.396 343.759 cv
239.066 343.951 231.282 348.577 229.15 359.262 cv
228.591 362.058 228.479 364.987 228.796 368.041 cv
228.602 368.344 228.564 368.734 228.748 369.07 cv
228.804 369.171 228.88 369.251 228.96 369.325 cv
230.161 377.804 234.632 387.215 242.358 397.443 cv
246.637 403.103 264.903 414.191 265.678 414.661 cv
265.685 414.664 265.689 414.666 265.697 414.668 cv
265.747 414.698 265.802 414.718 265.858 414.738 cv
265.881 414.748 265.902 414.762 265.927 414.768 cv
265.931 414.77 265.935 414.77 265.939 414.772 cv
266.016 414.792 266.098 414.802 266.175 414.804 cv
266.183 414.804 266.187 414.806 266.193 414.806 cv
266.193 414.806 li
266.193 414.806 li
266.193 414.806 266.193 414.806 266.196 414.806 cv
266.196 414.806 li
266.202 414.806 266.206 414.804 266.212 414.804 cv
266.294 414.802 266.373 414.792 266.452 414.772 cv
266.456 414.77 266.46 414.77 266.467 414.768 cv
266.487 414.762 266.506 414.748 266.531 414.74 cv
266.585 414.72 266.64 414.7 266.694 414.668 cv
266.7 414.666 266.706 414.664 266.713 414.661 cv
267.488 414.191 285.752 403.103 290.031 397.443 cv
297.757 387.215 302.23 377.802 303.428 369.323 cv
303.51 369.251 303.585 369.171 303.641 369.07 cv
303.825 368.734 303.787 368.346 303.593 368.044 cv
303.91 364.989 303.797 362.058 303.241 359.262 cv
cp
f
367.553 387.744 mo
357.383 385.7 li
359.034 397.752 li
371.915 402.155 li
367.553 387.744 li
cp
362.368 400.857 mo
364.465 402.523 366.917 404.285 369.329 405.94 cv
371.554 403.996 li
362.368 400.857 li
cp
359.307 374.857 mo
350.873 366.22 li
346.57 376.449 li
355.771 383.035 li
359.307 374.857 li
cp
359.463 358.356 mo
359.463 348.679 li
347.212 353.5 li
351.048 363.109 li
359.463 358.356 li
cp
345.88 355.522 mo
345.425 356.646 345.029 357.865 344.739 359.196 cv
344.201 361.649 344.045 364.223 344.237 366.901 cv
349.301 364.089 li
345.88 355.522 li
cp
344.454 368.935 mo
344.675 370.557 345.015 372.21 345.488 373.903 cv
348.534 366.672 li
344.454 368.935 li
cp
370.968 407.053 mo
373.088 408.48 375.096 409.775 376.699 410.796 cv
373.174 405.126 li
370.968 407.053 li
cp
390.112 405.94 mo
392.526 404.285 394.978 402.523 397.076 400.857 cv
387.889 403.996 li
390.112 405.94 li
cp
400.134 374.857 mo
403.672 383.035 li
412.873 376.449 li
408.568 366.22 li
400.134 374.857 li
cp
413.953 373.903 mo
414.429 372.21 414.768 370.557 414.989 368.937 cv
410.907 366.672 li
413.953 373.903 li
cp
379.721 397.752 mo
374.617 403.729 li
379.721 411.936 li
384.827 403.729 li
379.721 397.752 li
cp
413.563 355.518 mo
410.142 364.089 li
415.206 366.903 li
415.402 364.204 415.237 361.614 414.691 359.144 cv
414.401 357.833 414.009 356.631 413.563 355.518 cv
cp
382.742 410.796 mo
384.345 409.775 386.355 408.48 388.473 407.053 cv
386.269 405.126 li
382.742 410.796 li
cp
355.158 344.906 mo
354.733 345.077 354.309 345.256 353.884 345.457 cv
353.888 345.457 350.923 347.246 348.271 351.078 cv
358.442 347.076 li
355.158 344.906 li
cp
402.788 395.134 mo
406.846 389.618 409.921 384.369 412.004 379.408 cv
404.179 385.012 li
402.788 395.134 li
cp
387.527 402.155 mo
400.407 397.752 li
402.061 385.7 li
391.888 387.744 li
387.527 402.155 li
cp
347.437 379.408 mo
349.52 384.369 352.598 389.618 356.653 395.134 cv
355.266 385.012 li
347.437 379.408 li
cp
401.998 344.148 mo
400.57 343.776 399.148 343.577 397.745 343.577 cv
396.817 343.577 395.925 343.664 395.064 343.818 cv
398.948 346.161 li
401.998 344.148 li
cp
411.18 351.083 mo
408.516 347.232 405.528 345.443 405.484 345.417 cv
405.086 345.228 404.688 345.063 404.29 344.902 cv
401.004 347.076 li
411.18 351.083 li
cp
397.24 347.336 mo
392.518 344.486 li
386.718 346.526 382.779 351.455 381.28 353.606 cv
386.597 354.798 li
397.24 347.336 li
cp
380.726 355.381 mo
380.726 359.059 li
384.591 356.245 li
380.726 355.381 li
cp
401.865 383.852 mo
398.798 376.755 li
393.114 385.61 li
401.865 383.852 li
cp
412.233 353.5 mo
399.978 348.679 li
399.978 358.356 li
408.395 363.109 li
412.233 353.5 li
cp
397.97 357.662 mo
397.97 349.145 li
389.04 355.401 li
397.97 357.662 li
cp
399.978 372.258 mo
407.365 364.692 li
399.978 360.521 li
399.978 372.258 li
cp
378.716 359.059 mo
378.716 355.381 li
374.852 356.245 li
378.716 359.059 li
cp
361.473 357.662 mo
370.401 355.401 li
361.473 349.145 li
361.473 357.662 li
cp
364.38 343.818 mo
363.516 343.664 362.624 343.577 361.696 343.577 cv
360.299 343.577 358.882 343.774 357.449 344.149 cv
360.493 346.161 li
364.38 343.818 li
cp
372.849 354.798 mo
378.159 353.608 li
376.656 351.455 372.711 346.528 366.919 344.488 cv
362.203 347.336 li
372.849 354.798 li
cp
361.473 359.573 mo
361.473 374.415 li
369.144 386.371 li
379.721 395.024 li
390.297 386.371 li
397.97 374.415 li
397.97 359.573 li
387.047 356.81 li
380.344 361.688 li
380.325 361.703 380.298 361.707 380.275 361.723 cv
380.238 361.747 380.2 361.777 380.158 361.795 cv
380.144 361.8 380.127 361.799 380.11 361.804 cv
379.987 361.854 379.858 361.888 379.721 361.888 cv
379.583 361.888 379.454 361.854 379.331 361.804 cv
379.316 361.799 379.297 361.8 379.285 361.795 cv
379.241 361.777 379.206 361.747 379.166 361.723 cv
379.145 361.707 379.12 361.703 379.097 361.688 cv
372.394 356.81 li
361.473 359.573 li
cp
389.201 389.738 mo
381.092 396.371 li
385.598 401.645 li
389.201 389.738 li
cp
359.463 372.258 mo
359.463 360.521 li
352.078 364.692 li
359.463 372.258 li
cp
378.349 396.371 mo
370.24 389.738 li
373.845 401.645 li
378.349 396.371 li
cp
357.579 383.852 mo
360.645 376.755 li
366.327 385.61 li
357.579 383.852 li
cp
f
95.4598 193.638 mo
95.4598 190.424 li
97.9909 187.71 li
105.277 179.899 li
105.747 179.987 li
109.152 180.626 li
95.4598 193.638 li
cp
52.3746 191.013 mo
93.5532 191.013 li
93.5532 194.538 li
52.3746 194.538 li
52.3746 191.013 li
cp
36.7479 180.631 mo
39.3155 180.15 li
40.6499 179.899 li
50.4668 190.424 li
50.4668 193.981 li
36.7479 180.631 li
cp
50.4668 141.741 mo
50.4668 145.296 li
40.6499 155.823 li
40.1505 155.729 li
36.7479 155.089 li
50.4668 141.741 li
cp
93.5532 144.709 mo
52.3746 144.709 li
52.3746 141.183 li
93.5532 141.183 li
93.5532 144.709 li
cp
109.152 155.095 mo
106.722 155.551 li
105.277 155.823 li
95.4598 145.296 li
95.4598 142.082 li
109.152 155.095 li
cp
105.899 178.01 mo
105.899 157.712 li
110.255 156.892 li
110.255 178.828 li
108.112 178.426 li
105.899 178.01 li
cp
69.2125 185.513 mo
76.7131 185.513 li
88.0301 189.039 li
57.8965 189.039 li
69.2125 185.513 li
cp
76.7131 150.207 mo
69.2125 150.207 li
57.8975 146.682 li
88.0301 146.682 li
76.7131 150.207 li
cp
103.991 174.474 mo
101.914 169.969 li
101.914 165.753 li
103.991 161.248 li
103.991 174.474 li
cp
97.7407 181.075 mo
102.254 180.298 li
96.3449 186.634 li
97.7407 181.075 li
cp
93.8325 146.936 mo
94.7728 150.679 li
95.6641 154.226 li
80.7287 151.018 li
88.3345 148.647 li
93.8325 146.936 li
cp
102.254 155.423 mo
97.7407 154.646 li
96.3449 149.087 li
102.254 155.423 li
cp
98.508 178.943 mo
100.771 173.257 li
101.025 172.623 li
103.538 178.075 li
102.795 178.202 li
98.508 178.943 li
cp
103.538 157.646 mo
101.025 163.099 li
98.508 156.779 li
102.795 157.518 li
103.538 157.646 li
cp
94.7405 185.167 mo
93.8325 188.786 li
80.7287 184.703 li
95.6641 181.496 li
94.7405 185.167 li
cp
69.1698 183.54 mo
58.0956 181.163 li
49.6422 179.348 li
45.9206 169.997 li
45.9206 165.725 li
49.6433 156.374 li
56.8749 154.821 li
69.1698 152.18 li
76.7569 152.18 li
89.2008 154.852 li
96.2834 156.374 li
100.006 165.725 li
100.006 169.997 li
96.2834 179.348 li
87.9415 181.139 li
76.7569 183.54 li
69.1698 183.54 li
cp
41.9353 161.248 mo
44.0139 165.753 li
44.0139 169.969 li
41.9353 174.475 li
41.9353 161.248 li
cp
48.1858 154.646 mo
43.673 155.423 li
49.5828 149.087 li
48.1858 154.646 li
cp
42.3877 178.075 mo
44.9021 172.623 li
47.4176 178.943 li
43.131 178.202 li
42.3877 178.075 li
cp
47.4176 156.779 mo
44.9021 163.099 li
42.3877 157.646 li
43.131 157.518 li
47.4176 156.779 li
cp
65.1989 184.703 mo
52.0951 188.786 li
50.2624 181.496 li
65.1989 184.703 li
cp
65.1989 151.018 mo
58.1707 152.527 li
50.2624 154.226 li
52.0951 146.936 li
57.3117 148.56 li
65.1989 151.018 li
cp
45.3274 182.072 mo
43.673 180.298 li
44.4612 180.433 li
48.1858 181.075 li
49.5828 186.634 li
45.3274 182.072 li
cp
35.671 178.828 mo
35.671 156.892 li
40.0265 157.712 li
40.0265 178.01 li
37.7778 178.432 li
35.671 178.828 li
cp
112.162 180.015 mo
112.162 180.013 112.163 180.012 112.163 180.011 cv
112.163 155.71 li
112.163 155.708 112.162 155.708 112.162 155.707 cv
112.162 155.579 112.129 155.455 112.082 155.337 cv
112.073 155.312 112.063 155.287 112.051 155.263 cv
112.001 155.161 111.939 155.064 111.855 154.984 cv
95.5307 139.471 li
95.3546 139.304 95.1252 139.209 94.8854 139.209 cv
94.507 139.209 li
51.4206 139.209 li
50.6607 139.209 li
50.4178 139.209 50.1843 139.306 50.0081 139.478 cv
34.0635 154.992 li
33.9832 155.07 33.9228 155.166 33.8727 155.265 cv
33.8613 155.289 33.854 155.313 33.8436 155.337 cv
33.7977 155.452 33.7685 155.573 33.7675 155.697 cv
33.7675 155.702 33.7644 155.706 33.7644 155.71 cv
33.7644 180.011 li
33.7644 180.015 33.7675 180.018 33.7675 180.024 cv
33.7685 180.148 33.7977 180.268 33.8425 180.383 cv
33.854 180.408 33.8613 180.431 33.8738 180.455 cv
33.9228 180.555 33.9832 180.65 34.0635 180.73 cv
50.0081 196.243 li
50.1843 196.416 50.4178 196.511 50.6607 196.511 cv
51.4206 196.511 li
94.507 196.511 li
94.8854 196.511 li
95.1252 196.511 95.3546 196.419 95.5307 196.252 cv
111.855 180.738 li
111.939 180.657 112.001 180.561 112.051 180.458 cv
112.063 180.433 112.073 180.408 112.082 180.382 cv
112.129 180.266 112.162 180.142 112.162 180.015 cv
cp
f
196.126 180.636 mo
193.571 181.075 li
192.174 186.634 li
192.924 185.83 li
198.084 180.298 li
196.126 180.636 li
cp
197.744 169.969 mo
199.822 174.475 li
199.822 161.248 li
197.744 165.753 li
197.744 169.969 li
cp
201.332 179.94 mo
201.108 179.899 li
191.29 190.424 li
191.29 193.638 li
204.981 180.626 li
201.332 179.94 li
cp
201.729 178.01 mo
204.529 178.536 li
206.085 178.828 li
206.085 156.892 li
201.729 157.713 li
201.729 178.01 li
cp
199.369 178.075 mo
196.855 172.623 li
194.339 178.943 li
199.369 178.075 li
cp
141.461 155.087 mo
144.016 154.646 li
145.413 149.087 li
144.489 150.078 li
139.502 155.423 li
141.461 155.087 li
cp
189.663 188.786 mo
190.548 185.26 li
191.494 181.497 li
176.559 184.703 li
189.663 188.786 li
cp
192.174 149.087 mo
193.571 154.646 li
196.703 155.186 li
198.085 155.424 li
192.174 149.087 li
cp
139.844 165.753 mo
137.764 161.248 li
137.764 174.475 li
139.844 169.969 li
139.844 165.753 li
cp
147.925 188.786 mo
161.029 184.703 li
146.093 181.497 li
147.925 188.786 li
cp
148.205 141.183 mo
148.205 144.709 li
189.382 144.709 li
189.382 141.183 li
148.205 141.183 li
cp
148.205 194.538 mo
189.382 194.538 li
189.382 191.013 li
148.205 191.013 li
148.205 194.538 li
cp
146.297 145.296 mo
146.297 141.741 li
132.578 155.09 li
135.937 155.723 li
136.48 155.824 li
146.297 145.296 li
cp
132.578 180.632 mo
146.297 193.981 li
146.297 190.424 li
136.48 179.899 li
132.578 180.632 li
cp
131.502 156.892 mo
131.502 178.828 li
133.055 178.536 li
135.857 178.01 li
135.857 157.713 li
131.502 156.892 li
cp
143.248 178.943 mo
140.733 172.623 li
138.217 178.075 li
143.248 178.943 li
cp
138.217 157.647 mo
140.733 163.099 li
143.248 156.78 li
138.217 157.647 li
cp
139.502 180.299 mo
145.413 186.634 li
144.016 181.075 li
139.502 180.299 li
cp
172.544 150.208 mo
183.86 146.682 li
153.727 146.682 li
165.043 150.208 li
172.544 150.208 li
cp
165.043 185.513 mo
153.727 189.039 li
183.86 189.039 li
172.544 185.513 li
165.043 185.513 li
cp
184.355 154.708 mo
172.587 152.181 li
165 152.181 li
153.359 154.68 li
145.472 156.374 li
141.751 165.725 li
141.751 169.997 li
145.472 179.348 li
165 183.54 li
172.587 183.54 li
192.114 179.348 li
195.835 169.997 li
195.835 165.725 li
192.114 156.374 li
184.355 154.708 li
cp
181.294 152.034 mo
191.494 154.226 li
190.603 150.679 li
189.663 146.936 li
184.919 148.413 li
176.558 151.018 li
181.294 152.034 li
cp
199.369 157.647 mo
194.339 156.78 li
196.855 163.099 li
199.369 157.647 li
cp
204.919 155.107 mo
204.982 155.095 li
191.29 142.082 li
191.29 145.296 li
201.108 155.824 li
204.919 155.107 li
cp
146.093 154.226 mo
147.925 146.936 li
152.515 148.366 li
161.029 151.018 li
148.377 153.735 li
146.093 154.226 li
cp
f
99.7298 295.638 mo
99.7298 292.319 li
107.134 294.233 li
105.385 294.646 102.942 295.148 99.7298 295.638 cv
cp
48.1035 292.36 mo
53.6223 293.984 li
65.2698 297.411 li
58.9974 297.116 53.2491 296.617 48.1035 295.912 cv
48.1035 292.36 li
cp
46.1969 292.319 mo
46.1969 295.638 li
42.984 295.148 40.5414 294.646 38.7921 294.233 cv
46.1969 292.319 li
cp
38.8453 285.451 mo
41.4234 285.937 li
37.0388 290.609 li
37.5662 288.949 38.1698 287.228 38.8453 285.451 cv
cp
47.9732 266.238 mo
42.6889 284.168 li
41.0242 283.855 li
39.5772 283.581 li
41.7507 278.166 44.5622 272.359 47.9732 266.238 cv
cp
66.0037 238.522 mo
66.0986 238.634 66.1946 238.746 66.2894 238.857 cv
66.5062 239.118 66.7199 239.369 66.9389 239.626 cv
67.065 239.775 67.1922 239.93 67.3214 240.077 cv
57.5994 250.521 li
60.7288 245.805 63.6686 241.686 66.0037 238.522 cv
cp
78.6062 240.077 mo
78.7333 239.93 78.8595 239.775 78.9877 239.626 cv
79.2066 239.369 79.4204 239.118 79.6372 238.857 cv
79.7321 238.746 79.8279 238.634 79.9228 238.522 cv
82.259 241.688 85.1977 245.807 88.3262 250.521 cv
78.6062 240.077 li
cp
104.901 283.855 mo
103.237 284.168 li
97.9524 266.238 li
101.363 272.359 104.176 278.168 106.349 283.581 cv
104.901 283.855 li
cp
51.7886 291.391 mo
72.9633 288.391 li
94.1379 291.391 li
89.4646 292.768 li
72.9633 297.622 li
56.4621 292.768 li
51.7886 291.391 li
cp
68.2806 238.217 mo
68.2273 238.155 68.1752 238.096 68.1231 238.032 cv
67.9855 237.872 67.85 237.71 67.7145 237.548 cv
67.5393 237.338 67.3663 237.13 67.1932 236.922 cv
68.2721 235.481 69.2552 234.194 70.1122 233.086 cv
68.2806 238.217 li
cp
78.1798 237.584 mo
78.06 237.73 77.9401 237.872 77.8181 238.016 cv
77.7618 238.084 77.7034 238.148 77.6481 238.215 cv
75.8154 233.088 li
76.6724 234.194 77.6555 235.481 78.7324 236.922 cv
78.5499 237.143 78.3675 237.364 78.1798 237.584 cv
cp
51.9846 259.398 mo
66.0892 244.247 li
59.2006 263.114 li
58.2405 265.122 li
45.6568 280.866 li
49.3712 268.264 li
51.9846 259.398 li
cp
76.2096 239.886 mo
76.1543 239.95 76.0991 240.014 76.0438 240.075 cv
75.829 240.322 75.6174 240.563 75.41 240.8 cv
75.3151 240.907 75.2193 241.016 75.1254 241.123 cv
74.9294 241.343 74.7418 241.557 74.5572 241.761 cv
74.4697 241.861 74.378 241.966 74.2935 242.062 cv
74.084 242.295 73.89 242.509 73.7045 242.715 cv
73.6222 242.807 73.545 242.893 73.4669 242.98 cv
73.2875 243.178 73.1124 243.371 72.9695 243.53 cv
72.9675 243.532 72.9654 243.534 72.9633 243.538 cv
72.9601 243.534 72.9592 243.532 72.957 243.53 cv
72.8131 243.371 72.6381 243.178 72.4577 242.98 cv
72.3817 242.893 72.3034 242.807 72.2211 242.715 cv
72.0376 242.509 71.8427 242.295 71.6331 242.062 cv
71.5487 241.966 71.4569 241.861 71.3683 241.761 cv
71.1849 241.557 70.9972 241.343 70.8002 241.123 cv
70.7085 241.016 70.6114 240.907 70.5156 240.8 cv
70.3091 240.563 70.0975 240.322 69.8818 240.075 cv
69.8276 240.014 69.7712 239.95 69.7171 239.886 cv
72.9633 230.8 li
76.2096 239.886 li
cp
93.943 259.398 mo
100.269 280.866 li
87.6829 265.119 li
86.7615 263.203 li
79.8395 244.247 li
92.1812 257.506 li
93.943 259.398 li
cp
98.1213 287.099 mo
99.784 286.801 li
102.239 286.359 li
107.909 292.4 li
99.4587 290.213 li
98.1213 287.099 li
cp
46.2156 286.812 mo
47.8054 287.099 li
46.4669 290.213 li
38.0176 292.4 li
43.6866 286.359 li
46.2156 286.812 li
cp
97.2914 285.242 mo
91.3566 272.815 li
100.79 284.614 li
99.6161 284.824 li
97.2914 285.242 li
cp
89.1997 287.662 mo
96.1436 287.355 li
97.208 289.835 li
83.6299 287.909 li
89.1997 287.662 li
cp
49.7819 287.355 mo
56.3776 287.648 li
62.2978 287.909 li
48.7176 289.835 li
49.7756 287.373 li
49.7819 287.355 li
cp
72.9633 246.702 mo
77.7389 253.802 li
86.0526 266.162 li
95.2481 285.422 li
72.9633 286.407 li
50.6774 285.422 li
59.8741 266.162 li
67.7906 254.394 li
72.9633 246.702 li
cp
45.1356 284.614 mo
54.5689 272.815 li
48.6342 285.242 li
46.4971 284.858 li
45.1356 284.614 li
cp
74.7449 244.458 mo
74.896 244.289 75.0566 244.112 75.2317 243.915 cv
75.3057 243.831 75.3777 243.753 75.4538 243.667 cv
75.5997 243.504 75.7498 243.335 75.9072 243.16 cv
76.0167 243.037 76.123 242.917 76.2367 242.788 cv
76.369 242.639 76.5056 242.485 76.6432 242.328 cv
76.7516 242.205 76.8538 242.091 76.9653 241.964 cv
82.7521 257.8 li
74.1892 245.069 li
74.3279 244.917 74.4884 244.738 74.6729 244.537 cv
74.6969 244.511 74.7199 244.484 74.7449 244.458 cv
cp
68.9612 241.964 mo
69.029 242.043 69.0926 242.111 69.1593 242.189 cv
69.3532 242.408 69.5398 242.621 69.7213 242.826 cv
69.8099 242.923 69.8911 243.015 69.9755 243.111 cv
70.1538 243.311 70.3227 243.503 70.4864 243.683 cv
70.5541 243.757 70.6157 243.827 70.6803 243.898 cv
70.8617 244.101 71.0274 244.287 71.1828 244.458 cv
71.2068 244.486 71.2307 244.511 71.2536 244.537 cv
71.4371 244.738 71.5988 244.917 71.7373 245.069 cv
66.182 253.329 li
63.1808 257.791 li
63.1838 257.783 li
68.9612 241.964 li
cp
108.887 290.609 mo
106.974 288.569 li
104.502 285.937 li
107.08 285.451 li
107.757 287.228 108.359 288.949 108.887 290.609 cv
cp
97.8221 295.912 mo
92.6774 296.617 86.9293 297.116 80.6567 297.411 cv
92.3042 293.984 li
97.8221 292.36 li
97.8221 295.912 li
cp
111.846 294.423 mo
111.855 294.39 111.858 294.359 111.863 294.324 cv
111.867 294.285 111.869 294.247 111.869 294.209 cv
111.869 294.189 111.878 294.169 111.877 294.147 cv
111.876 294.135 111.87 294.125 111.869 294.114 cv
111.866 294.075 111.858 294.042 111.851 294.006 cv
111.846 293.982 111.851 293.962 111.844 293.941 cv
111.033 290.822 109.96 287.561 108.564 283.966 cv
105.53 276.17 101.168 267.557 95.5985 258.369 cv
95.5953 258.363 95.5902 258.359 95.586 258.354 cv
95.5839 258.352 95.5839 258.348 95.5817 258.345 cv
90.1108 249.321 84.4795 241.405 80.7193 236.353 cv
76.5932 230.807 73.7139 227.343 73.6847 227.31 cv
73.667 227.29 73.643 227.278 73.6231 227.258 cv
73.5763 227.21 73.5273 227.164 73.472 227.127 cv
73.4616 227.121 73.4575 227.111 73.4481 227.105 cv
73.4439 227.103 73.4398 227.103 73.4356 227.101 cv
73.4094 227.085 73.3792 227.078 73.3521 227.065 cv
73.2979 227.039 73.2438 227.017 73.1864 227.004 cv
73.1655 226.999 73.1458 226.988 73.1239 226.984 cv
73.0988 226.978 73.0727 226.984 73.0467 226.982 cv
73.0185 226.978 72.9925 226.967 72.9633 226.967 cv
72.9352 226.967 72.908 226.978 72.8789 226.982 cv
72.8528 226.984 72.8278 226.978 72.8017 226.984 cv
72.7809 226.988 72.761 226.999 72.7402 227.004 cv
72.6818 227.017 72.6297 227.039 72.5755 227.065 cv
72.5473 227.078 72.5182 227.085 72.4911 227.101 cv
72.4869 227.103 72.4827 227.103 72.4786 227.105 cv
72.4692 227.111 72.464 227.121 72.4556 227.127 cv
72.3983 227.164 72.3504 227.21 72.3034 227.258 cv
72.2837 227.278 72.2596 227.29 72.2398 227.31 cv
72.2127 227.343 69.3324 230.807 65.2073 236.353 cv
65.2063 236.353 65.2063 236.353 65.2063 236.355 cv
61.4492 241.401 55.822 249.311 50.3438 258.345 cv
50.3417 258.348 50.3417 258.352 50.3396 258.356 cv
50.3354 258.361 50.3302 258.363 50.3282 258.369 cv
44.7572 267.557 40.3955 276.17 37.3639 283.966 cv
35.967 287.561 34.8933 290.822 34.0802 293.941 cv
34.075 293.962 34.0781 293.984 34.075 294.008 cv
34.0687 294.044 34.0593 294.077 34.0562 294.114 cv
34.0552 294.125 34.051 294.135 34.0499 294.147 cv
34.049 294.167 34.0552 294.187 34.0562 294.206 cv
34.0562 294.247 34.0593 294.287 34.0645 294.326 cv
34.0687 294.359 34.0719 294.392 34.0792 294.423 cv
34.0864 294.458 34.0969 294.488 34.1083 294.519 cv
34.1209 294.559 34.1365 294.595 34.1542 294.631 cv
34.1625 294.648 34.1647 294.67 34.1761 294.688 cv
34.1824 294.701 34.1897 294.707 34.196 294.716 cv
34.2126 294.744 34.2324 294.768 34.2511 294.792 cv
34.271 294.817 34.2866 294.843 34.3064 294.867 cv
34.3304 294.891 34.3544 294.915 34.3794 294.937 cv
34.4044 294.959 34.4316 294.979 34.4596 294.999 cv
34.4836 295.019 34.5055 295.04 34.5305 295.055 cv
34.5316 295.055 li
34.541 295.06 34.5535 295.062 34.5639 295.069 cv
34.5837 295.079 34.6046 295.084 34.6234 295.095 cv
34.6431 295.102 34.6588 295.117 34.6775 295.124 cv
34.8287 295.182 38.4857 296.529 47.0194 297.753 cv
47.0194 297.753 47.0194 297.753 47.0203 297.753 cv
54.4636 298.815 63.1849 299.45 72.9456 299.636 cv
72.9508 299.636 72.9581 299.636 72.9623 299.636 cv
72.9633 299.636 li
72.9695 299.636 72.9758 299.636 72.981 299.636 cv
82.7407 299.45 91.462 298.815 98.9062 297.753 cv
98.9073 297.753 98.9073 297.753 98.9073 297.753 cv
107.441 296.529 111.098 295.182 111.249 295.124 cv
111.269 295.117 111.283 295.102 111.302 295.095 cv
111.321 295.084 111.343 295.079 111.362 295.069 cv
111.373 295.062 111.385 295.06 111.395 295.055 cv
111.396 295.055 li
111.422 295.04 111.443 295.019 111.467 294.999 cv
111.494 294.979 111.521 294.959 111.547 294.937 cv
111.572 294.915 111.596 294.891 111.62 294.867 cv
111.64 294.843 111.656 294.817 111.674 294.792 cv
111.692 294.768 111.713 294.744 111.73 294.716 cv
111.736 294.707 111.745 294.701 111.752 294.688 cv
111.761 294.668 111.763 294.648 111.772 294.631 cv
111.79 294.595 111.805 294.559 111.818 294.519 cv
111.829 294.488 111.839 294.458 111.846 294.423 cv
cp
f
143.934 291.452 mo
143.934 295.003 li
149.079 295.708 154.825 296.209 161.099 296.501 cv
150.226 293.304 li
143.934 291.452 li
cp
154.073 264.212 mo
155.031 262.203 li
161.919 243.333 li
147.814 258.489 li
145.482 266.401 li
141.486 279.955 li
154.073 264.212 li
cp
139.517 285.447 mo
135.464 289.768 li
133.848 291.491 li
142.297 289.304 li
143.634 286.188 li
141.627 285.827 li
139.517 285.447 li
cp
134.623 293.326 mo
136.373 293.739 138.815 294.237 142.026 294.727 cv
142.026 291.408 li
140.174 291.889 li
134.623 293.326 li
cp
162.728 238.671 mo
162.532 238.437 162.342 238.215 162.148 237.982 cv
162.042 237.859 161.937 237.737 161.834 237.612 cv
159.499 240.776 156.559 244.896 153.43 249.61 cv
163.15 239.168 li
163.009 239.004 162.87 238.834 162.728 238.671 cv
cp
137.252 285.027 mo
134.674 284.542 li
133.992 286.339 133.39 288.052 132.866 289.704 cv
134.743 287.701 li
137.252 285.027 li
cp
176.488 296.501 mo
182.759 296.209 188.508 295.708 193.652 295.003 cv
193.652 291.452 li
187.36 293.304 li
176.488 296.501 li
cp
163.949 237.121 mo
164.003 237.182 164.056 237.242 164.111 237.305 cv
165.597 233.145 li
165.942 232.18 li
165.085 233.283 164.102 234.57 163.023 236.011 cv
163.207 236.233 163.389 236.451 163.575 236.675 cv
163.7 236.822 163.823 236.972 163.949 237.121 cv
cp
198.069 285.447 mo
195.614 285.889 li
193.95 286.188 li
195.289 289.304 li
203.738 291.491 li
202.123 289.768 li
198.069 285.447 li
cp
200.333 285.027 mo
204.721 289.704 li
204.196 288.052 203.595 286.341 202.911 284.542 cv
200.333 285.027 li
cp
195.56 291.408 mo
195.56 294.727 li
198.77 294.237 201.213 293.739 202.962 293.326 cv
197.41 291.889 li
195.56 291.408 li
cp
189.969 290.486 mo
168.792 287.478 li
147.618 290.486 li
158.576 293.707 li
168.792 296.713 li
179.01 293.707 li
189.969 290.486 li
cp
138.518 283.256 mo
143.802 265.328 li
140.392 271.449 137.579 277.258 135.406 282.673 cv
136.854 282.946 li
138.518 283.256 li
cp
167.561 244.153 mo
167.45 244.031 167.329 243.898 167.188 243.741 cv
167.096 243.641 167.002 243.538 166.901 243.425 cv
166.811 243.323 166.719 243.221 166.621 243.112 cv
166.5 242.98 166.38 242.846 166.249 242.698 cv
166.133 242.569 166.014 242.435 165.891 242.299 cv
165.768 242.159 165.648 242.026 165.518 241.879 cv
165.365 241.706 165.207 241.526 165.047 241.343 cv
164.96 241.248 164.88 241.156 164.791 241.055 cv
159.01 256.879 li
167.567 244.16 li
167.566 244.157 167.563 244.155 167.561 244.153 cv
cp
189.441 284.583 mo
191.078 284.509 li
181.883 265.253 li
174.11 253.697 li
168.792 245.793 li
163.132 254.208 li
155.703 265.253 li
146.507 284.509 li
148.484 284.597 li
168.792 285.495 li
189.441 284.583 li
cp
172.795 241.055 mo
172.712 241.15 172.636 241.233 172.556 241.325 cv
172.384 241.52 172.215 241.712 172.05 241.896 cv
171.945 242.016 171.848 242.126 171.746 242.238 cv
171.589 242.416 171.439 242.585 171.294 242.746 cv
171.203 242.849 171.118 242.941 171.032 243.039 cv
170.891 243.196 170.758 243.341 170.633 243.481 cv
170.56 243.564 170.494 243.637 170.426 243.713 cv
170.304 243.847 170.197 243.964 170.098 244.075 cv
170.075 244.101 170.041 244.138 170.018 244.16 cv
172.5 247.849 li
178.582 256.891 li
172.795 241.055 li
cp
200.742 282.944 mo
202.18 282.673 li
200.007 277.258 197.193 271.451 193.782 265.33 cv
199.068 283.256 li
200.742 282.944 li
cp
140.966 283.704 mo
142.326 283.951 li
144.463 284.334 li
150.398 271.903 li
140.966 283.704 li
cp
145.612 286.446 mo
144.547 288.927 li
158.131 286.999 li
145.612 286.446 li
cp
191.974 286.446 mo
179.455 286.999 li
193.038 288.927 li
191.974 286.446 li
cp
165.782 239.245 mo
165.945 239.433 166.106 239.618 166.265 239.797 cv
166.405 239.956 166.544 240.114 166.678 240.267 cv
166.836 240.444 166.986 240.615 167.135 240.782 cv
167.247 240.907 167.364 241.038 167.471 241.16 cv
167.987 241.737 168.441 242.238 168.782 242.615 cv
168.786 242.621 168.789 242.623 168.792 242.629 cv
168.797 242.623 168.801 242.619 168.805 242.615 cv
168.969 242.435 169.161 242.221 169.37 241.99 cv
169.391 241.966 169.408 241.949 169.429 241.924 cv
169.641 241.688 169.877 241.427 170.123 241.15 cv
170.214 241.047 170.315 240.933 170.411 240.826 cv
170.58 240.637 170.75 240.444 170.929 240.243 cv
171.047 240.107 171.172 239.968 171.295 239.827 cv
171.463 239.636 171.634 239.439 171.809 239.24 cv
171.885 239.155 171.961 239.065 172.039 238.977 cv
169.763 232.607 li
168.792 229.891 li
165.547 238.977 li
165.624 239.067 165.703 239.158 165.782 239.245 cv
cp
173.635 237.125 mo
173.765 236.97 173.892 236.814 174.021 236.663 cv
174.205 236.444 174.383 236.229 174.562 236.011 cv
173.486 234.571 172.503 233.283 171.645 232.182 cv
173.477 237.305 li
173.53 237.244 173.581 237.184 173.635 237.125 cv
cp
184.155 249.61 mo
181.028 244.9 178.089 240.778 175.753 237.612 cv
175.655 237.73 175.554 237.845 175.455 237.964 cv
175.239 238.221 175.027 238.47 174.81 238.726 cv
174.684 238.872 174.559 239.023 174.435 239.168 cv
184.155 249.61 li
cp
195.445 283.917 mo
196.62 283.704 li
187.186 271.903 li
193.122 284.334 li
195.445 283.917 li
cp
175.669 243.335 mo
188.369 256.981 li
189.772 258.489 li
196.1 279.957 li
183.514 264.212 li
182.591 262.291 li
175.669 243.335 li
cp
f
97.8669 82.9342 mo
97.8898 82.9416 97.9127 82.9489 97.9367 82.9561 cv
97.9982 82.976 98.0639 82.9989 98.1316 83.0218 cv
98.1869 83.0406 98.239 83.0593 98.2985 83.0802 cv
98.3849 83.1114 98.4777 83.1479 98.5737 83.1845 cv
98.6227 83.2032 98.6664 83.2199 98.7175 83.2396 cv
98.8635 83.298 99.0209 83.3638 99.1908 83.4356 cv
99.2492 83.4618 99.3159 83.4909 99.3785 83.5181 cv
99.4994 83.5723 99.6245 83.6265 99.7558 83.6869 cv
99.8309 83.7213 99.9101 83.7578 99.9883 83.7943 cv
100.123 83.8579 100.264 83.9236 100.409 83.9934 cv
100.491 84.033 100.575 84.0747 100.662 84.1164 cv
100.827 84.1977 101.001 84.2843 101.18 84.3749 cv
101.256 84.4136 101.331 84.451 101.41 84.4917 cv
101.669 84.6241 101.939 84.7638 102.227 84.917 cv
102.231 84.9202 102.236 84.9222 102.241 84.9254 cv
102.551 85.0891 102.877 85.2673 103.22 85.456 cv
103.228 85.4601 103.237 85.4654 103.246 85.4706 cv
101.772 88.5949 100.075 91.4105 98.1786 93.8781 cv
97.8669 82.9342 li
cp
76.0396 103.386 mo
76.2877 103.141 76.5359 102.899 76.784 102.66 cv
76.8955 102.552 77.008 102.447 77.1196 102.341 cv
77.3156 102.155 77.5116 101.971 77.7055 101.79 cv
77.8275 101.68 77.9473 101.568 78.0672 101.459 cv
78.2549 101.287 78.4415 101.119 78.626 100.952 cv
78.7396 100.851 78.8543 100.747 78.9658 100.648 cv
79.2139 100.429 79.4558 100.216 79.6945 100.009 cv
79.8092 99.9099 79.9208 99.8139 80.0333 99.717 cv
80.222 99.5554 80.4097 99.3948 80.59 99.2427 cv
80.712 99.1395 80.8267 99.0435 80.9444 98.9466 cv
81.0811 98.8319 81.2154 98.7193 81.3458 98.6119 cv
81.4573 98.5192 81.5668 98.4285 81.6741 98.342 cv
81.8003 98.2387 81.9202 98.1407 82.0379 98.0449 cv
82.1287 97.9719 82.2215 97.8957 82.307 97.8281 cv
82.4633 97.7008 82.6114 97.584 82.7469 97.4757 cv
82.7719 97.4558 82.8022 97.4319 82.8271 97.4121 cv
82.8271 97.4121 82.8271 97.4131 82.8282 97.4142 cv
82.897 97.5789 82.971 97.7603 83.0513 97.9541 cv
83.0565 97.9709 83.0649 97.9906 83.0721 98.0084 cv
83.1378 98.1711 83.2077 98.3451 83.2795 98.5265 cv
83.3119 98.6036 83.3432 98.6871 83.3755 98.7683 cv
83.4256 98.8976 83.4777 99.03 83.5319 99.1666 cv
83.5694 99.2646 83.6069 99.3646 83.6455 99.4657 cv
83.6966 99.6002 83.7498 99.7368 83.8008 99.8775 cv
83.8393 99.9808 83.8791 100.085 83.9187 100.191 cv
83.9749 100.346 84.0322 100.502 84.0885 100.66 cv
84.124 100.76 84.1604 100.857 84.1969 100.96 cv
84.2803 101.197 84.3648 101.44 84.4492 101.687 cv
84.4566 101.709 84.4649 101.73 84.4711 101.752 cv
84.5639 102.022 84.6535 102.297 84.7422 102.573 cv
84.7683 102.653 84.7922 102.731 84.8173 102.81 cv
84.8808 103.012 84.9433 103.213 85.0048 103.417 cv
85.0163 103.455 85.0268 103.494 85.0382 103.531 cv
75.8937 103.531 li
75.9416 103.482 75.9917 103.435 76.0396 103.386 cv
cp
60.9228 103.417 mo
60.9822 103.217 61.0437 103.017 61.1063 102.819 cv
61.1323 102.737 61.1584 102.653 61.1844 102.569 cv
61.2667 102.313 61.3512 102.058 61.4367 101.806 cv
61.4607 101.734 61.4857 101.662 61.5108 101.59 cv
61.5826 101.381 61.6546 101.172 61.7276 100.968 cv
61.7672 100.855 61.8068 100.745 61.8464 100.634 cv
61.8996 100.489 61.9516 100.343 62.0038 100.203 cv
62.0465 100.088 62.0883 99.9766 62.1299 99.865 cv
62.18 99.7326 62.229 99.6013 62.278 99.4731 cv
62.3186 99.3688 62.3582 99.2646 62.3968 99.1634 cv
62.4479 99.03 62.498 98.9017 62.5479 98.7757 cv
62.5824 98.6912 62.6157 98.6047 62.6481 98.5233 cv
62.7179 98.3472 62.7857 98.1772 62.8513 98.0178 cv
62.8596 97.9969 62.868 97.974 62.8764 97.9532 cv
62.9556 97.7592 63.0307 97.5789 63.0994 97.4142 cv
63.0994 97.4131 63.1005 97.4121 63.1005 97.4121 cv
63.1245 97.4319 63.1547 97.4558 63.1808 97.4768 cv
63.3163 97.584 63.4622 97.7008 63.6196 97.827 cv
63.7051 97.8968 63.802 97.974 63.8938 98.0501 cv
64.0074 98.1418 64.1253 98.2378 64.2472 98.3367 cv
64.3567 98.4264 64.4703 98.5213 64.5871 98.6172 cv
64.7111 98.7204 64.8425 98.8298 64.9738 98.9393 cv
65.0948 99.0393 65.2136 99.1395 65.3387 99.2447 cv
65.5054 99.3854 65.6786 99.5335 65.8516 99.6815 cv
65.9944 99.8045 66.1393 99.9286 66.2863 100.058 cv
66.5052 100.248 66.7283 100.441 66.9535 100.643 cv
67.0723 100.747 67.1932 100.857 67.3142 100.966 cv
67.4924 101.125 67.6707 101.286 67.85 101.451 cv
67.9761 101.565 68.1023 101.681 68.2284 101.799 cv
68.4171 101.974 68.6068 102.152 68.7976 102.331 cv
68.9133 102.442 69.0279 102.551 69.1447 102.663 cv
69.3918 102.9 69.6388 103.141 69.8838 103.384 cv
69.9328 103.434 69.984 103.482 70.0319 103.531 cv
60.8883 103.531 li
60.8998 103.493 60.9103 103.455 60.9228 103.417 cv
cp
42.9266 57.5918 mo
43.1362 57.7023 43.3311 57.8023 43.5271 57.9035 cv
43.623 57.9525 43.7262 58.0077 43.8189 58.0547 cv
44.0754 58.1849 44.3162 58.3038 44.5476 58.4164 cv
44.5685 58.4268 44.5935 58.4393 44.6154 58.4498 cv
45.1262 58.6968 45.5776 58.9032 45.98 59.0752 cv
46.0175 59.092 46.0488 59.1055 46.0863 59.12 cv
46.2438 59.1868 46.398 59.2515 46.5408 59.3077 cv
46.5846 59.3254 46.6232 59.3401 46.6659 59.3567 cv
46.7921 59.4057 46.9182 59.4536 47.0319 59.4954 cv
47.0735 59.51 47.1111 59.5225 47.1507 59.537 cv
47.2362 59.5663 47.3259 59.5986 47.4051 59.6257 cv
44.14 64.2907 li
42.0291 67.3056 li
42.0291 57.1091 li
42.2251 57.2154 42.4043 57.3103 42.5898 57.4105 cv
42.7014 57.4698 42.8182 57.5334 42.9266 57.5918 cv
cp
47.8961 52.0344 mo
48.0598 57.7669 li
48.0316 57.7586 48.0034 57.7492 47.9732 57.7399 cv
47.9096 57.719 47.8428 57.696 47.773 57.6721 cv
47.7209 57.6533 47.6688 57.6345 47.6125 57.6148 cv
47.5114 57.5783 47.4029 57.5365 47.2904 57.4917 cv
47.2539 57.4781 47.2237 57.4667 47.1861 57.4521 cv
47.0256 57.3886 46.8536 57.3156 46.6659 57.2353 cv
46.6504 57.229 46.6336 57.2207 46.6169 57.2145 cv
46.4481 57.1404 46.2667 57.0592 46.0759 56.9715 cv
46.0248 56.9476 45.9696 56.9216 45.9154 56.8965 cv
45.7496 56.8193 45.5744 56.7359 45.391 56.6473 cv
45.3274 56.616 45.2618 56.5837 45.195 56.5515 cv
45.0043 56.4576 44.802 56.3555 44.5924 56.2481 cv
44.5289 56.2157 44.4673 56.1845 44.4017 56.1511 cv
44.1359 56.0145 43.8575 55.8686 43.5615 55.7102 cv
43.5479 55.7029 43.5344 55.6966 43.5208 55.6883 cv
43.2071 55.5214 42.8755 55.339 42.5274 55.1472 cv
42.5106 55.1379 42.4929 55.1274 42.4773 55.1191 cv
43.2977 53.4803 45.1231 50.0943 47.7428 46.6615 cv
47.8961 52.0344 li
cp
69.9933 37.2074 mo
69.7035 37.4972 69.4116 37.7818 69.1197 38.0622 cv
69.0301 38.1467 68.9415 38.23 68.8529 38.3155 cv
68.6298 38.5271 68.4066 38.7356 68.1846 38.942 cv
68.0887 39.0306 67.9928 39.1192 67.898 39.2057 cv
67.6686 39.4163 67.4402 39.6228 67.214 39.824 cv
67.1421 39.8886 67.0681 39.9564 66.9962 40.0199 cv
66.3989 40.5516 65.8234 41.0468 65.2907 41.4971 cv
65.2208 41.5555 65.1552 41.6097 65.0864 41.667 cv
64.8925 41.8307 64.7017 41.9892 64.5214 42.1382 cv
64.4505 42.1966 64.3796 42.2539 64.3108 42.3113 cv
64.1336 42.4572 63.9626 42.5949 63.8031 42.7251 cv
63.7541 42.7647 63.7009 42.8065 63.655 42.844 cv
63.4695 42.9941 63.2975 43.1317 63.1422 43.2558 cv
63.1287 43.2652 63.112 43.2787 63.1005 43.2891 cv
63.0984 43.2849 63.0974 43.2829 63.0963 43.2798 cv
63.0296 43.1213 62.9576 42.9472 62.8837 42.7616 cv
62.8649 42.7168 62.8451 42.6667 62.8253 42.6209 cv
62.77 42.4823 62.7127 42.3394 62.6522 42.1903 cv
62.621 42.1091 62.5866 42.0225 62.5532 41.937 cv
62.5021 41.8099 62.451 41.6795 62.4 41.544 cv
62.3635 41.4491 62.3249 41.3512 62.2874 41.2532 cv
62.2342 41.1135 62.181 40.9717 62.1268 40.8268 cv
62.0903 40.7299 62.0538 40.6319 62.0163 40.5317 cv
61.9538 40.3629 61.8912 40.1888 61.8287 40.0137 cv
61.7985 39.9313 61.7692 39.851 61.739 39.7666 cv
61.6462 39.5071 61.5555 39.2422 61.4638 38.9723 cv
61.4482 38.9296 61.4336 38.8847 61.419 38.841 cv
61.3419 38.6137 61.2667 38.3832 61.1917 38.1508 cv
61.1636 38.0653 61.1375 37.9787 61.1105 37.8923 cv
61.0489 37.6973 60.9874 37.5014 60.929 37.3054 cv
60.9154 37.2595 60.9009 37.2136 60.8883 37.1678 cv
70.033 37.1678 li
70.0204 37.1823 70.0068 37.1938 69.9933 37.2074 cv
cp
84.9955 37.3116 mo
84.9381 37.5034 84.8788 37.6941 84.8182 37.8849 cv
84.7902 37.9746 84.762 38.0642 84.7328 38.1528 cv
84.6587 38.3884 84.5806 38.622 84.5034 38.8524 cv
84.4909 38.8909 84.4774 38.9305 84.4649 38.9681 cv
84.3721 39.2391 84.2783 39.5071 84.1865 39.7687 cv
84.1595 39.8468 84.1302 39.9219 84.1031 39.9991 cv
84.0375 40.1795 83.9728 40.3598 83.9082 40.535 cv
83.8727 40.6297 83.8373 40.7225 83.8029 40.8174 cv
83.7476 40.9665 83.6914 41.1125 83.6372 41.2563 cv
83.5996 41.3533 83.5632 41.4491 83.5267 41.544 cv
83.4755 41.6733 83.4265 41.8005 83.3786 41.9234 cv
83.3421 42.0163 83.3056 42.1101 83.2692 42.1977 cv
83.2233 42.3176 83.1774 42.4291 83.1326 42.5416 cv
83.0993 42.6219 83.0669 42.7054 83.0356 42.7804 cv
82.9678 42.9472 82.9033 43.1035 82.8428 43.2474 cv
82.8365 43.2621 82.8324 43.2746 82.8271 43.2891 cv
82.8105 43.2755 82.7897 43.2589 82.774 43.2464 cv
82.6281 43.1307 82.4654 43.0014 82.2934 42.8627 cv
82.2204 42.8054 82.1412 42.7397 82.0651 42.6783 cv
81.9348 42.5719 81.7993 42.4624 81.6575 42.3467 cv
81.5626 42.2675 81.4626 42.1861 81.3615 42.1028 cv
81.2154 41.9809 81.0623 41.8536 80.9069 41.7233 cv
80.8079 41.641 80.712 41.5607 80.6099 41.4752 cv
80.3868 41.2866 80.1553 41.0895 79.9187 40.8852 cv
79.8769 40.8487 79.8384 40.8163 79.7957 40.7799 cv
79.5194 40.5411 79.2358 40.292 78.947 40.0356 cv
78.8575 39.9564 78.7657 39.8719 78.675 39.7917 cv
78.4644 39.604 78.2538 39.4132 78.0401 39.2183 cv
77.9379 39.1234 77.8337 39.0275 77.7305 38.9316 cv
77.5168 38.7345 77.3031 38.5334 77.0883 38.3311 cv
76.9925 38.2384 76.8945 38.1476 76.7985 38.0549 cv
76.5275 37.7953 76.2575 37.5294 75.9886 37.2626 cv
75.9563 37.2303 75.925 37.2 75.8916 37.1678 cv
85.0382 37.1678 li
85.0236 37.2157 85.0101 37.2636 84.9955 37.3116 cv
cp
103.395 55.1482 mo
103.052 55.339 102.724 55.5183 102.414 55.6841 cv
102.38 55.7029 102.347 55.7196 102.313 55.7373 cv
102.042 55.8821 101.782 56.0177 101.536 56.1448 cv
101.459 56.1845 101.386 56.222 101.311 56.2606 cv
101.114 56.3607 100.922 56.4566 100.742 56.5462 cv
100.668 56.5827 100.595 56.6171 100.524 56.6525 cv
100.349 56.737 100.181 56.8162 100.023 56.8912 cv
99.9632 56.9184 99.9017 56.9476 99.8466 56.9736 cv
99.6558 57.0612 99.4775 57.1415 99.3086 57.2145 cv
99.294 57.2207 99.2763 57.228 99.2606 57.2353 cv
99.0731 57.3156 98.8989 57.3886 98.7353 57.4532 cv
98.7102 57.4646 98.6873 57.472 98.6612 57.4823 cv
98.5341 57.5324 98.4121 57.5793 98.2994 57.6199 cv
98.2598 57.6335 98.2224 57.647 98.1848 57.6606 cv
98.092 57.6929 98.0056 57.7222 97.9242 57.7492 cv
97.9054 57.7555 97.8857 57.7607 97.8669 57.7669 cv
98.1837 46.6615 li
100.804 50.0943 102.628 53.4803 103.449 55.1191 cv
103.432 55.1285 103.412 55.1388 103.395 55.1482 cv
cp
103.896 57.1091 mo
103.896 67.3056 li
101.787 64.2907 li
98.5205 59.6257 li
98.5976 59.5996 98.6831 59.5683 98.7644 59.5402 cv
98.8103 59.5245 98.8509 59.51 98.8989 59.4932 cv
98.999 59.4568 99.1085 59.414 99.219 59.3713 cv
99.2783 59.3494 99.3315 59.3296 99.392 59.3046 cv
99.513 59.2576 99.6453 59.2014 99.7766 59.1461 cv
99.835 59.1211 99.8914 59.1003 99.9529 59.0732 cv
100.142 58.9918 100.344 58.9022 100.555 58.8052 cv
100.566 58.8 100.574 58.7969 100.585 58.7917 cv
101.038 58.5843 101.548 58.3382 102.117 58.0484 cv
102.17 58.0234 102.23 57.9911 102.284 57.9629 cv
102.518 57.843 102.759 57.7179 103.015 57.5835 cv
103.093 57.5418 103.179 57.4949 103.26 57.4521 cv
103.469 57.3396 103.673 57.2311 103.896 57.1091 cv
cp
96.9943 79.8913 mo
96.2447 78.4631 li
91.9852 70.3496 li
96.9943 60.8089 li
101.444 67.1658 li
103.672 70.3506 li
96.9943 79.8913 li
cp
42.2542 70.3506 mo
48.6915 61.1518 li
48.9323 60.8079 li
53.9413 70.3496 li
48.9323 79.8913 li
43.7303 72.4595 li
42.2542 70.3506 li
cp
86.5509 83.27 mo
90.04 74.901 li
90.998 72.6054 li
94.7603 79.7724 li
95.4463 81.0786 li
86.5509 83.27 li
cp
82.4936 46.4333 mo
83.7216 54.4852 li
75.1202 51.0951 li
80.9028 47.4392 li
82.4936 46.4333 li
cp
82.6093 86.6527 mo
83.7216 86.2139 li
82.4936 94.266 li
75.1202 89.604 li
82.6093 86.6527 li
cp
61.7223 83.9111 mo
56.0659 70.3506 li
61.7223 56.7881 li
72.9518 52.3638 li
72.9633 52.3586 li
81.1874 55.5986 li
84.2053 56.7881 li
89.8618 70.3506 li
87.7455 75.4243 li
84.2053 83.9111 li
81.5762 84.9473 li
72.9633 88.3415 li
71.8656 87.909 li
61.7223 83.9111 li
cp
63.4341 46.4333 mo
70.8065 51.0962 li
63.6196 53.9285 li
62.205 54.4852 li
62.8764 50.084 li
63.4341 46.4333 li
cp
50.4803 59.6225 mo
59.3768 57.4302 li
57.4795 61.9786 li
54.9285 68.0946 li
51.9262 62.3767 li
50.4803 59.6225 li
cp
50.8035 80.4646 mo
54.9285 72.6054 li
59.3768 83.27 li
50.4803 81.0786 li
50.8035 80.4646 li
cp
63.1359 92.3154 mo
62.205 86.2139 li
70.8074 89.604 li
63.4341 94.266 li
63.1359 92.3154 li
cp
93.8774 62.6113 mo
90.998 68.0946 li
88.5232 62.1589 li
86.5509 57.4302 li
95.4463 59.6225 li
93.8774 62.6113 li
cp
85.0872 45.7796 mo
85.4604 45.7702 85.8409 45.7587 86.2319 45.7431 cv
86.4059 45.7368 86.58 45.7306 86.7572 45.7233 cv
87.1544 45.7066 87.5558 45.6889 87.9655 45.669 cv
88.1322 45.6596 88.297 45.6524 88.4669 45.6441 cv
88.984 45.6159 89.5062 45.5878 90.0338 45.5555 cv
90.0859 45.5524 90.138 45.5502 90.1911 45.5461 cv
90.7843 45.5096 91.3785 45.4721 91.9706 45.4314 cv
92.1134 45.421 92.2521 45.4116 92.3949 45.4012 cv
92.839 45.3709 93.28 45.3387 93.7158 45.3063 cv
93.9013 45.2928 94.0806 45.2792 94.263 45.2656 cv
94.6561 45.2354 95.0418 45.2052 95.4213 45.176 cv
95.5963 45.1624 95.7674 45.1479 95.9393 45.1343 cv
96.0644 45.1249 96.1968 45.1134 96.3188 45.104 cv
96.0248 55.4433 li
95.9601 57.719 li
85.7627 55.2077 li
84.3273 45.7994 li
84.4273 45.7974 84.5347 45.7931 84.6358 45.7911 cv
84.7839 45.788 84.9361 45.7838 85.0872 45.7796 cv
cp
50.5043 45.176 mo
50.8838 45.2052 51.2684 45.2354 51.6615 45.2656 cv
51.845 45.2792 52.0263 45.2928 52.2108 45.3063 cv
52.6466 45.3387 53.0866 45.3699 53.5316 45.4012 cv
53.6724 45.4105 53.8131 45.421 53.9549 45.4314 cv
54.547 45.4721 55.1413 45.5096 55.7354 45.5461 cv
55.7886 45.5502 55.8397 45.5524 55.8939 45.5555 cv
56.4203 45.5878 56.9427 45.6159 57.4596 45.6441 cv
57.6285 45.6524 57.7943 45.6596 57.9621 45.669 cv
58.3698 45.6889 58.7732 45.7077 59.1693 45.7233 cv
59.3465 45.7306 59.5206 45.7368 59.6948 45.7431 cv
60.0857 45.7587 60.4652 45.7702 60.8384 45.7796 cv
60.9906 45.7838 61.1427 45.788 61.2908 45.7911 cv
61.3919 45.7931 61.5003 45.7974 61.5994 45.7994 cv
60.4777 53.1488 li
60.1629 55.2077 li
57.7151 55.8113 li
49.9664 57.72 li
49.9018 55.4433 li
49.6068 45.104 li
49.7308 45.1134 49.8621 45.1249 49.9872 45.1343 cv
50.1582 45.1479 50.3302 45.1624 50.5043 45.176 cv
cp
60.7216 94.9237 mo
60.4151 94.9321 60.1055 94.9415 59.7865 94.9529 cv
59.5675 94.9612 59.3476 94.9695 59.1234 94.9779 cv
58.7805 94.9925 58.4313 95.0082 58.0789 95.0259 cv
57.8715 95.0353 57.6672 95.0457 57.4566 95.0561 cv
57.0385 95.078 56.6174 95.102 56.1931 95.127 cv
56.0441 95.1364 55.8971 95.1437 55.7469 95.153 cv
55.1767 95.1874 54.6054 95.225 54.0362 95.2635 cv
53.8642 95.2751 53.6943 95.2865 53.5233 95.299 cv
53.1262 95.3271 52.731 95.3553 52.3411 95.3834 cv
52.0847 95.4022 51.8356 95.4221 51.5833 95.4418 cv
51.2997 95.4626 51.0193 95.4835 50.743 95.5054 cv
50.4428 95.5293 50.153 95.5534 49.8642 95.5763 cv
49.7809 95.5836 49.6912 95.5899 49.6078 95.5961 cv
49.9633 83.0708 li
49.9664 82.9801 li
58.6877 85.1287 li
60.1629 85.4925 li
60.4578 87.4221 li
61.5994 94.9019 li
61.5253 94.9028 61.445 94.906 61.3689 94.907 cv
61.1573 94.9111 60.9394 94.9174 60.7216 94.9237 cv
cp
95.1825 95.5054 mo
94.9073 95.4835 94.6269 95.4626 94.3444 95.4418 cv
94.09 95.4221 93.8419 95.4022 93.5844 95.3834 cv
93.1945 95.3553 92.7994 95.3271 92.4022 95.299 cv
92.2313 95.2865 92.0635 95.2751 91.8903 95.2635 cv
91.3222 95.225 90.7499 95.1874 90.1797 95.153 cv
90.0296 95.1437 89.8826 95.1364 89.7346 95.127 cv
89.3093 95.102 88.888 95.078 88.469 95.0561 cv
88.2606 95.0457 88.0541 95.0353 87.8477 95.0259 cv
87.4954 95.0082 87.1472 94.9925 86.8031 94.9779 cv
86.579 94.9695 86.359 94.9612 86.139 94.9529 cv
85.8211 94.9415 85.5116 94.9321 85.205 94.9237 cv
84.9871 94.9174 84.7692 94.9111 84.5577 94.907 cv
84.4826 94.906 84.4013 94.9028 84.3273 94.9019 cv
85.7627 85.4925 li
95.9601 82.9812 li
95.9623 83.0708 li
96.3178 95.5961 li
96.2355 95.5899 96.1458 95.5836 96.0623 95.5763 cv
95.7715 95.5534 95.4828 95.5293 95.1825 95.5054 cv
cp
85.1133 42.7553 mo
85.1509 42.6605 85.1883 42.5667 85.227 42.4666 cv
85.2791 42.33 85.3343 42.1883 85.3885 42.0444 cv
85.4239 41.9547 85.4573 41.8682 85.4938 41.7744 cv
85.5814 41.5419 85.671 41.3022 85.7596 41.0551 cv
85.7868 40.9843 85.8128 40.9092 85.8389 40.8373 cv
85.9056 40.6527 85.9723 40.4682 86.0401 40.2775 cv
86.0766 40.1732 86.112 40.0679 86.1495 39.9616 cv
86.2057 39.7958 86.2621 39.6311 86.3194 39.4622 cv
86.358 39.3465 86.3966 39.2308 86.4352 39.1129 cv
86.4883 38.9504 86.5415 38.7877 86.5936 38.6231 cv
86.6332 38.5011 86.6707 38.379 86.7082 38.2571 cv
86.7593 38.0924 86.8083 37.9266 86.8573 37.7619 cv
86.8845 37.6712 86.9136 37.5826 86.9397 37.492 cv
89.7398 38.4687 92.5232 40.3869 95.2398 43.2109 cv
94.7769 43.2474 94.309 43.2839 93.8273 43.3204 cv
93.771 43.3245 93.7127 43.3288 93.6563 43.3329 cv
93.1632 43.3693 92.6618 43.4048 92.1593 43.4402 cv
92.0228 43.4507 91.8862 43.459 91.7486 43.4684 cv
91.2461 43.5028 90.7416 43.5351 90.2381 43.5664 cv
90.1714 43.5706 90.1046 43.5747 90.0369 43.5789 cv
89.4583 43.6143 88.8839 43.6467 88.3158 43.6758 cv
88.2261 43.6811 88.1375 43.6852 88.0469 43.6894 cv
87.5829 43.7123 87.1273 43.7333 86.6791 43.7519 cv
86.5456 43.7582 86.4133 43.7624 86.2809 43.7676 cv
85.7951 43.7864 85.3218 43.802 84.8641 43.8125 cv
84.8224 43.8135 84.7766 43.8145 84.7349 43.8156 cv
84.7171 43.8166 84.7025 43.8166 84.6859 43.8166 cv
84.7057 43.7666 84.7296 43.7082 84.7515 43.6571 cv
84.788 43.5653 84.8256 43.4736 84.8641 43.3767 cv
84.9017 43.286 84.9392 43.1932 84.9767 43.0974 cv
85.0216 42.9868 85.0664 42.8732 85.1133 42.7553 cv
cp
70.2664 39.655 mo
70.3394 39.5852 70.4124 39.5174 70.4854 39.4465 cv
70.8336 39.1109 71.1807 38.769 71.5247 38.4208 cv
71.5925 38.353 71.657 38.2852 71.7238 38.2165 cv
72.0094 37.9256 72.2898 37.6316 72.5672 37.3345 cv
72.6203 37.2783 72.6755 37.224 72.7277 37.1678 cv
73.1989 37.1678 li
73.2406 37.2136 73.2854 37.2574 73.3271 37.3022 cv
73.6222 37.618 73.9213 37.9319 74.2257 38.2414 cv
74.2809 38.2978 74.3352 38.3551 74.3915 38.4114 cv
74.7407 38.7648 75.0931 39.1109 75.4455 39.4507 cv
75.5142 39.5174 75.582 39.581 75.6508 39.6478 cv
75.9427 39.9251 76.2325 40.1982 76.5202 40.4641 cv
76.6068 40.5433 76.6901 40.6214 76.7757 40.6986 cv
77.1165 41.0114 77.4543 41.3168 77.7848 41.6097 cv
77.817 41.6388 77.8493 41.666 77.8817 41.6952 cv
78.1871 41.9652 78.4842 42.2226 78.774 42.4718 cv
78.8512 42.5375 78.9262 42.6032 79.0023 42.6667 cv
79.3025 42.9242 79.5955 43.1703 79.8707 43.3997 cv
79.8749 43.4038 79.8801 43.408 79.8832 43.4111 cv
80.1855 43.6613 80.4638 43.8895 80.7265 44.1032 cv
80.7641 44.1345 80.7974 44.1616 80.8329 44.1909 cv
81.0811 44.391 81.3114 44.5755 81.5157 44.7382 cv
72.9633 50.1455 li
64.4109 44.7382 li
64.6142 44.5755 64.8456 44.391 65.0926 44.1909 cv
65.1291 44.1616 65.1615 44.1345 65.2 44.1043 cv
65.4649 43.8895 65.7431 43.6602 66.0455 43.41 cv
66.0455 43.409 66.0455 43.409 66.0465 43.409 cv
66.327 43.1744 66.6251 42.9222 66.9327 42.6595 cv
67.0025 42.6 67.0723 42.5407 67.1432 42.4801 cv
67.4413 42.2226 67.7478 41.9579 68.0627 41.6795 cv
68.0877 41.6566 68.1117 41.6357 68.1367 41.6139 cv
68.4703 41.3188 68.8101 41.0114 69.1552 40.6955 cv
69.2375 40.6203 69.3188 40.5443 69.4022 40.4672 cv
69.6889 40.2023 69.9766 39.9324 70.2664 39.655 cv
cp
58.9869 37.492 mo
59.013 37.5826 59.0422 37.6712 59.0682 37.7619 cv
59.1182 37.9266 59.1672 38.0924 59.2183 38.2571 cv
59.2559 38.379 59.2944 38.5011 59.333 38.6231 cv
59.3851 38.7867 59.4373 38.9493 59.4904 39.1109 cv
59.529 39.2297 59.5686 39.3476 59.6093 39.4664 cv
59.6645 39.6311 59.7197 39.7937 59.775 39.9553 cv
59.8125 40.0638 59.8501 40.171 59.8875 40.2775 cv
59.9543 40.4682 60.02 40.6538 60.0877 40.8373 cv
60.1139 40.9092 60.1388 40.9843 60.1649 41.0551 cv
60.2556 41.3022 60.3453 41.5419 60.4339 41.7744 cv
60.4683 41.8682 60.5026 41.9547 60.537 42.0444 cv
60.5923 42.1883 60.6465 42.33 60.6997 42.4666 cv
60.7382 42.5667 60.7758 42.6605 60.8133 42.7553 cv
60.8592 42.8732 60.904 42.9868 60.9488 43.0974 cv
60.9874 43.1932 61.025 43.286 61.0615 43.3767 cv
61.1011 43.4736 61.1385 43.5653 61.1761 43.6571 cv
61.1969 43.7082 61.2209 43.7666 61.2407 43.8166 cv
61.224 43.8166 61.2085 43.8166 61.1907 43.8156 cv
61.149 43.8145 61.1042 43.8135 61.0615 43.8125 cv
60.6048 43.802 60.1316 43.7864 59.6458 43.7676 cv
59.5144 43.7624 59.38 43.7582 59.2465 43.7519 cv
58.7992 43.7333 58.3437 43.7123 57.8798 43.6894 cv
57.7901 43.6852 57.7005 43.6811 57.6088 43.6758 cv
57.0427 43.6467 56.4672 43.6143 55.8908 43.5789 cv
55.823 43.5747 55.7553 43.5706 55.6875 43.5664 cv
55.184 43.5351 54.6794 43.5028 54.1769 43.4684 cv
54.0404 43.459 53.9038 43.4507 53.7673 43.4402 cv
53.2638 43.4048 52.7633 43.3693 52.2713 43.3329 cv
52.214 43.3288 52.1556 43.3245 52.0994 43.3204 cv
51.6166 43.2839 51.1496 43.2474 50.6867 43.2109 cv
53.4024 40.3869 56.1847 38.4687 58.9869 37.492 cv
cp
42.1083 83.5504 mo
42.0906 83.5598 42.0729 83.5691 42.0541 83.5795 cv
42.0457 83.5837 42.0384 83.5879 42.0291 83.5931 cv
42.0291 73.3957 li
45.5547 78.4318 li
47.4061 81.0766 li
47.3571 81.0922 47.2988 81.1141 47.2467 81.1318 cv
47.1809 81.1547 47.1163 81.1766 47.0465 81.2017 cv
46.9599 81.233 46.8641 81.2694 46.7692 81.3059 cv
46.7035 81.331 46.6388 81.3549 46.5701 81.382 cv
46.4575 81.4268 46.3354 81.478 46.2135 81.529 cv
46.1499 81.555 46.0895 81.5791 46.0248 81.6072 cv
45.8861 81.6666 45.735 81.7333 45.5838 81.8022 cv
45.5223 81.8293 45.465 81.8532 45.4025 81.8814 cv
45.2347 81.9586 45.0542 82.043 44.8698 82.1305 cv
44.8125 82.1587 44.7582 82.1826 44.6988 82.2119 cv
44.5028 82.3056 44.2943 82.4099 44.0806 82.5162 cv
44.0222 82.5464 43.969 82.5715 43.9065 82.6017 cv
43.6741 82.7205 43.4249 82.8498 43.1695 82.9832 cv
43.1216 83.0083 43.0778 83.0302 43.0299 83.0563 cv
42.7368 83.2105 42.4294 83.3742 42.1083 83.5504 cv
cp
47.7481 93.8781 mo
45.8518 91.4105 44.1536 88.5949 42.6816 85.4706 cv
42.6889 85.4654 42.6983 85.4601 42.7056 85.456 cv
43.0496 85.2673 43.3749 85.09 43.6835 84.9254 cv
43.6929 84.9212 43.7022 84.916 43.7116 84.9108 cv
43.9931 84.7617 44.2589 84.623 44.5132 84.4938 cv
44.5977 84.45 44.6758 84.4104 44.7572 84.3697 cv
44.9313 84.2822 45.0991 84.1977 45.2596 84.1185 cv
45.3493 84.0758 45.4368 84.0319 45.5234 83.9903 cv
45.6641 83.9225 45.7997 83.8589 45.931 83.7974 cv
46.0123 83.7599 46.0957 83.7202 46.1739 83.6848 cv
46.3021 83.6265 46.422 83.5743 46.5398 83.5222 cv
46.6065 83.4931 46.6764 83.4618 46.739 83.4347 cv
46.9057 83.3638 47.0632 83.298 47.208 83.2407 cv
47.2622 83.2199 47.3071 83.2022 47.3571 83.1834 cv
47.4499 83.1469 47.5437 83.1114 47.6292 83.0802 cv
47.6866 83.0593 47.7387 83.0416 47.7929 83.0228 cv
47.8616 82.9989 47.9294 82.976 47.993 82.9551 cv
48.016 82.9478 48.0368 82.9416 48.0598 82.9342 cv
47.9138 88.082 li
47.7481 93.8781 li
cp
60.7883 98.0084 mo
60.7592 98.0803 60.732 98.1501 60.7039 98.2242 cv
60.6371 98.3951 60.5683 98.5723 60.4995 98.7538 cv
60.4766 98.8121 60.4547 98.8684 60.4318 98.9278 cv
60.3379 99.176 60.2441 99.4303 60.1472 99.693 cv
60.1472 99.6951 60.1461 99.6962 60.1461 99.6982 cv
60.0523 99.9515 59.9606 100.212 59.8667 100.477 cv
59.8376 100.56 59.8094 100.645 59.7803 100.729 cv
59.7156 100.917 59.651 101.105 59.5874 101.296 cv
59.5519 101.401 59.5185 101.505 59.4831 101.61 cv
59.4258 101.787 59.3684 101.964 59.3111 102.143 cv
59.2757 102.256 59.2402 102.368 59.2058 102.482 cv
59.1506 102.662 59.0963 102.842 59.0432 103.024 cv
59.0202 103.101 58.9963 103.177 58.9733 103.255 cv
57.5524 102.623 54.3989 100.967 50.9015 97.4726 cv
51.3248 97.4392 51.7501 97.4059 52.188 97.3735 cv
52.3078 97.3641 52.4308 97.3558 52.5518 97.3464 cv
52.9615 97.3172 53.3763 97.287 53.7934 97.2578 cv
53.9852 97.2453 54.1769 97.2318 54.3698 97.2193 cv
54.7712 97.1922 55.1726 97.166 55.5738 97.141 cv
55.724 97.1316 55.8761 97.1222 56.0263 97.1128 cv
56.5652 97.0806 57.1 97.0503 57.6296 97.0233 cv
57.7536 97.0159 57.8735 97.0107 57.9955 97.0056 cv
58.423 96.9836 58.8451 96.9638 59.259 96.9472 cv
59.4028 96.9419 59.5456 96.9356 59.6885 96.9295 cv
60.1722 96.9117 60.6465 96.8971 61.1011 96.8857 cv
61.1333 96.8857 61.1667 96.8846 61.1991 96.8836 cv
61.2136 96.8836 61.2271 96.8836 61.2407 96.8836 cv
61.2209 96.9315 61.1969 96.9909 61.1761 97.042 cv
61.1354 97.1432 61.0927 97.2453 61.0489 97.3547 cv
61.0176 97.4309 60.9874 97.508 60.955 97.5883 cv
60.9009 97.7238 60.8446 97.8635 60.7883 98.0084 cv
cp
75.6706 101.035 mo
75.5925 101.11 75.5142 101.183 75.4371 101.258 cv
75.0909 101.591 74.747 101.931 74.4051 102.275 cv
74.3352 102.347 74.2654 102.419 74.1955 102.49 cv
73.914 102.778 73.6367 103.068 73.3626 103.36 cv
73.3083 103.418 73.2521 103.474 73.1989 103.531 cv
72.7277 103.531 li
72.6746 103.474 72.6172 103.418 72.565 103.36 cv
72.2898 103.068 72.0125 102.778 71.7311 102.49 cv
71.6602 102.419 71.5925 102.347 71.5216 102.275 cv
71.1797 101.931 70.8367 101.592 70.4916 101.26 cv
70.4113 101.183 70.3321 101.109 70.2518 101.031 cv
69.9693 100.763 69.6889 100.499 69.4096 100.239 cv
69.3219 100.16 69.2365 100.08 69.1499 99.9994 cv
68.8091 99.6888 68.4734 99.3845 68.1439 99.0925 cv
68.1065 99.0592 68.07 99.029 68.0324 98.9956 cv
67.7322 98.7308 67.4402 98.4765 67.1557 98.2315 cv
67.0754 98.1626 66.9962 98.0949 66.917 98.0272 cv
66.6376 97.7885 66.3655 97.558 66.1069 97.3433 cv
66.0809 97.3214 66.0538 97.2985 66.0288 97.2766 cv
65.7453 97.041 65.4826 96.8262 65.2324 96.623 cv
65.1604 96.5646 65.0968 96.5124 65.0291 96.4572 cv
64.8508 96.3133 64.6851 96.1809 64.5297 96.058 cv
64.4932 96.0276 64.4464 95.9902 64.4109 95.962 cv
72.9633 90.5547 li
81.5157 95.962 li
81.4792 95.9902 81.4333 96.0276 81.3959 96.058 cv
81.2416 96.1809 81.0758 96.3133 80.8986 96.4572 cv
80.8298 96.5124 80.7652 96.5646 80.6932 96.623 cv
80.443 96.8262 80.1792 97.043 79.8957 97.2786 cv
79.8738 97.2974 79.8498 97.3172 79.829 97.335 cv
79.5674 97.5529 79.2922 97.7863 79.0086 98.0282 cv
78.9293 98.0949 78.8512 98.1626 78.7698 98.2315 cv
78.4852 98.4765 78.1945 98.7308 77.8942 98.9956 cv
77.8556 99.029 77.8202 99.0592 77.7826 99.0925 cv
77.4532 99.3845 77.1165 99.6888 76.7777 99.9994 cv
76.6901 100.079 76.6046 100.159 76.5182 100.239 cv
76.2356 100.5 75.9541 100.764 75.6706 101.035 cv
cp
86.9532 103.255 mo
86.9313 103.177 86.9063 103.101 86.8834 103.024 cv
86.8302 102.842 86.776 102.662 86.7208 102.482 cv
86.6854 102.367 86.6499 102.255 86.6134 102.142 cv
86.5581 101.965 86.5019 101.79 86.4445 101.616 cv
86.4102 101.508 86.3737 101.4 86.3382 101.292 cv
86.2746 101.103 86.212 100.918 86.1475 100.732 cv
86.1182 100.647 86.088 100.561 86.0598 100.477 cv
85.966 100.212 85.8732 99.9515 85.7815 99.6982 cv
85.7805 99.6962 85.7794 99.6951 85.7794 99.693 cv
85.6825 99.4303 85.5876 99.176 85.4948 98.9278 cv
85.4709 98.8674 85.449 98.8101 85.4261 98.7495 cv
85.3583 98.5714 85.2915 98.3982 85.2259 98.2315 cv
85.1946 98.1512 85.1644 98.0751 85.1341 97.9979 cv
85.0789 97.8572 85.0247 97.7217 84.9726 97.5903 cv
84.9402 97.509 84.9079 97.4319 84.8777 97.3547 cv
84.8328 97.2453 84.7922 97.1432 84.7505 97.042 cv
84.7296 96.9909 84.7057 96.9315 84.6859 96.8836 cv
84.6994 96.8836 84.7119 96.8836 84.7276 96.8836 cv
84.7589 96.8846 84.7933 96.8857 84.8245 96.8857 cv
85.2791 96.8971 85.7533 96.9127 86.2381 96.9295 cv
86.3799 96.9356 86.5238 96.9419 86.6686 96.9472 cv
87.0815 96.9638 87.5037 96.9836 87.9301 97.0056 cv
88.053 97.0107 88.1729 97.0159 88.296 97.0233 cv
88.8255 97.0503 89.3614 97.0806 89.9003 97.1128 cv
90.0504 97.1222 90.2016 97.1316 90.3517 97.141 cv
90.753 97.166 91.1555 97.1922 91.5558 97.2193 cv
91.7486 97.2318 91.9415 97.2453 92.1344 97.2578 cv
92.5503 97.287 92.962 97.3172 93.3717 97.3464 cv
93.4937 97.3558 93.6188 97.3641 93.7387 97.3735 cv
94.1765 97.4068 94.6019 97.4392 95.0241 97.4726 cv
91.5265 100.967 88.3752 102.623 86.9532 103.255 cv
cp
103.82 83.5514 mo
103.497 83.3752 103.19 83.2105 102.896 83.0552 cv
102.847 83.0302 102.804 83.0083 102.755 82.9822 cv
102.503 82.8509 102.256 82.7227 102.025 82.6059 cv
101.941 82.5632 101.865 82.5267 101.783 82.486 cv
101.597 82.3932 101.411 82.3005 101.239 82.217 cv
101.148 82.1732 101.065 82.1358 100.977 82.094 cv
100.827 82.0231 100.677 81.9523 100.539 81.8886 cv
100.446 81.8459 100.362 81.8094 100.272 81.7698 cv
100.152 81.7167 100.028 81.6614 99.9153 81.6134 cv
99.8278 81.576 99.7506 81.5436 99.6683 81.5102 cv
99.5651 81.4675 99.4598 81.4237 99.3638 81.3862 cv
99.2857 81.3549 99.2158 81.3278 99.1429 81.3007 cv
99.0532 81.2663 98.9625 81.2319 98.8802 81.2017 cv
98.8155 81.1788 98.7551 81.1579 98.6936 81.137 cv
98.6373 81.1173 98.5747 81.0943 98.5205 81.0766 cv
103.896 73.3957 li
103.896 83.5931 li
103.889 83.5879 103.881 83.5837 103.873 83.5795 cv
103.854 83.5701 103.838 83.5608 103.82 83.5514 cv
cp
105.713 55.3974 mo
105.575 55.0992 li
105.071 54.0256 102.343 48.4077 98.0159 43.384 cv
98.0148 43.3819 98.0128 43.3809 98.0107 43.3787 cv
98.0097 43.3778 98.0097 43.3767 98.0087 43.3767 cv
94.3287 39.1088 90.4684 36.3932 86.5342 35.3059 cv
86.529 35.3038 86.5238 35.3059 86.5207 35.3049 cv
86.5133 35.3017 86.5071 35.2944 86.5008 35.2934 cv
86.433 35.2662 86.3643 35.2433 86.2954 35.2256 cv
86.2183 35.2048 86.139 35.1943 86.0598 35.1943 cv
59.8667 35.1943 li
59.7865 35.1943 59.7083 35.2048 59.6311 35.2256 cv
59.5624 35.2433 59.4935 35.2662 59.3935 35.3049 cv
59.3924 35.3049 59.3924 35.3059 59.3924 35.3059 cv
55.4571 36.3932 51.5958 39.1088 47.918 43.3767 cv
47.9169 43.3767 47.9169 43.3778 47.9159 43.3787 cv
47.9138 43.3809 47.9117 43.3819 47.9096 43.384 cv
43.5823 48.4077 40.8542 54.0256 40.3517 55.0992 cv
40.3517 55.1003 40.3517 55.1003 40.3517 55.1003 cv
40.3507 55.1014 40.3507 55.1014 40.3507 55.1014 cv
40.2141 55.3943 li
40.1536 55.5277 40.1223 55.6716 40.1223 55.8185 cv
40.1223 70.3506 li
40.1223 84.2926 li
40.1223 84.4302 40.1495 84.5667 40.2057 84.6929 cv
40.2756 84.8555 40.3476 85.0088 40.4216 85.16 cv
40.5633 85.4633 li
40.5644 85.4633 40.5633 85.4643 40.5644 85.4654 cv
42.5941 89.9657 45.0678 93.8917 47.92 97.1316 cv
47.92 97.1327 47.92 97.1327 47.9211 97.1338 cv
48.09 97.3182 li
48.091 97.3193 48.092 97.3193 48.0931 97.3204 cv
48.0941 97.3214 48.0941 97.3214 48.0952 97.3224 cv
53.7589 103.673 58.9858 105.391 59.2058 105.461 cv
59.2965 105.49 59.3924 105.505 59.4863 105.505 cv
59.6176 105.505 li
86.3079 105.505 li
86.4393 105.505 li
86.5342 105.505 86.6301 105.49 86.7208 105.461 cv
86.9397 105.391 92.1677 103.673 97.8315 97.3224 cv
97.8387 97.3151 97.8409 97.3057 97.8481 97.2985 cv
97.8617 97.2839 97.8794 97.2724 97.8908 97.2578 cv
98.0014 97.1379 li
98.0014 97.1369 98.0024 97.1369 98.0034 97.1369 cv
100.856 93.8948 103.333 89.9678 105.362 85.4654 cv
105.362 85.4643 105.362 85.4633 105.362 85.4633 cv
105.507 85.1568 li
105.579 85.0067 105.652 84.8555 105.722 84.694 cv
105.775 84.5678 105.804 84.4313 105.804 84.2926 cv
105.804 70.3506 li
105.804 55.8185 li
105.804 55.6726 105.773 55.5298 105.713 55.3974 cv
cp
f
156.876 97.3631 mo
156.925 97.2412 156.972 97.1275 157.017 97.0159 cv
157.035 96.9732 157.054 96.9242 157.071 96.8836 cv
157.057 96.8846 157.045 96.8846 157.03 96.8846 cv
156.992 96.8857 156.949 96.8867 156.908 96.8877 cv
156.462 96.8982 155.997 96.9127 155.523 96.9304 cv
155.377 96.9356 155.229 96.9419 155.081 96.9481 cv
154.662 96.9659 154.235 96.9846 153.803 97.0065 cv
153.691 97.0128 153.582 97.017 153.469 97.0233 cv
152.928 97.0503 152.379 97.0816 151.827 97.115 cv
151.716 97.1222 151.604 97.1285 151.493 97.1358 cv
151.038 97.164 150.583 97.1931 150.129 97.2244 cv
149.983 97.2338 149.837 97.2432 149.691 97.2536 cv
149.177 97.2891 148.667 97.3256 148.166 97.3631 cv
148.134 97.3662 148.1 97.3672 148.068 97.3694 cv
147.613 97.4048 147.17 97.4392 146.732 97.4736 cv
150.244 100.986 153.386 102.634 154.802 103.259 cv
154.821 103.194 154.841 103.131 154.861 103.066 cv
154.919 102.864 154.981 102.663 155.043 102.461 cv
155.072 102.365 155.102 102.27 155.132 102.173 cv
155.195 101.974 155.259 101.778 155.324 101.581 cv
155.353 101.492 155.38 101.406 155.41 101.318 cv
155.481 101.107 155.552 100.898 155.623 100.692 cv
155.647 100.625 155.67 100.556 155.693 100.492 cv
155.883 99.9432 156.076 99.4199 156.262 98.9299 cv
156.285 98.8684 156.308 98.8101 156.331 98.7495 cv
156.398 98.5723 156.465 98.3982 156.531 98.2315 cv
156.561 98.1523 156.591 98.0772 156.622 98.0011 cv
156.677 97.8593 156.732 97.7217 156.784 97.5883 cv
156.816 97.5111 156.846 97.4371 156.876 97.3631 cv
cp
145.798 57.72 mo
155.993 55.2088 li
156.211 53.7753 li
157.429 45.7994 li
157.341 45.7983 157.245 45.7942 157.155 45.7921 cv
156.973 45.7889 156.785 45.7838 156.599 45.7786 cv
156.262 45.7692 155.921 45.7587 155.57 45.7462 cv
155.365 45.7379 155.162 45.7306 154.955 45.7233 cv
154.591 45.7077 154.221 45.69 153.846 45.6712 cv
153.652 45.6618 153.461 45.6535 153.265 45.6441 cv
152.793 45.618 152.314 45.592 151.833 45.5627 cv
151.736 45.5575 151.642 45.5524 151.545 45.5461 cv
150.965 45.5106 150.383 45.473 149.805 45.4334 cv
149.631 45.422 149.459 45.4095 149.285 45.398 cv
148.872 45.3678 148.461 45.3396 148.054 45.3083 cv
147.858 45.2938 147.666 45.2792 147.471 45.2656 cv
147.088 45.2365 146.713 45.2072 146.343 45.1781 cv
146.16 45.1635 145.983 45.1489 145.805 45.1353 cv
145.683 45.1249 145.556 45.1145 145.437 45.1051 cv
145.461 45.9317 li
145.798 57.72 li
cp
149.771 70.3506 mo
147.243 65.5323 li
144.762 60.8089 li
141.916 64.8755 li
138.083 70.3506 li
141.524 75.2658 li
144.762 79.8923 li
147.368 74.9312 li
149.771 70.3506 li
cp
143.607 83.0291 mo
143.56 83.0447 143.517 83.0593 143.469 83.0771 cv
143.363 83.1156 143.25 83.1595 143.131 83.2053 cv
143.102 83.2168 143.078 83.2251 143.048 83.2366 cv
142.896 83.298 142.732 83.3648 142.556 83.4398 cv
142.513 83.4597 142.463 83.4815 142.417 83.5024 cv
142.281 83.5608 142.141 83.6233 141.989 83.6911 cv
141.923 83.7224 141.852 83.7567 141.781 83.7891 cv
141.64 83.8547 141.495 83.9225 141.343 83.9965 cv
141.263 84.0361 141.18 84.0758 141.096 84.1164 cv
140.936 84.1957 140.764 84.2811 140.589 84.3687 cv
140.506 84.4114 140.424 84.4521 140.336 84.498 cv
140.121 84.6074 139.893 84.7273 139.657 84.8513 cv
139.602 84.8816 139.551 84.9076 139.494 84.9379 cv
139.201 85.0932 138.891 85.2621 138.568 85.4393 cv
138.55 85.4498 138.529 85.4612 138.512 85.4706 cv
139.983 88.5949 141.682 91.4116 143.578 93.8781 cv
143.89 82.9342 li
143.868 82.9416 143.848 82.9467 143.826 82.9551 cv
143.757 82.977 143.683 83.002 143.607 83.0291 cv
cp
139.339 55.6841 mo
139.385 55.708 139.425 55.7279 139.471 55.7518 cv
139.725 55.8884 139.971 56.0166 140.204 56.1376 cv
140.301 56.1877 140.391 56.2324 140.484 56.2814 cv
140.656 56.368 140.826 56.4524 140.984 56.5316 cv
141.079 56.5786 141.171 56.6234 141.263 56.6681 cv
141.412 56.7401 141.555 56.8079 141.694 56.8735 cv
141.773 56.91 141.855 56.9486 141.93 56.984 cv
142.08 57.0518 142.221 57.1143 142.357 57.1749 cv
142.407 57.1968 142.464 57.2228 142.512 57.2425 cv
142.689 57.3187 142.854 57.3875 143.007 57.449 cv
143.057 57.4698 143.101 57.4855 143.148 57.5032 cv
143.251 57.5439 143.352 57.5824 143.445 57.6157 cv
143.496 57.6345 143.544 57.6512 143.592 57.6689 cv
143.671 57.6971 143.748 57.7222 143.82 57.7461 cv
143.844 57.7533 143.866 57.7607 143.89 57.768 cv
143.658 49.6524 li
143.573 46.6626 li
140.951 50.0954 139.127 53.4814 138.307 55.1191 cv
138.32 55.1274 138.335 55.1347 138.348 55.142 cv
138.695 55.3348 139.026 55.5162 139.339 55.6841 cv
cp
143.061 59.5641 mo
142.99 59.5413 142.922 59.5173 142.845 59.4891 cv
142.77 59.462 142.685 59.4287 142.602 59.3984 cv
142.521 59.3661 142.443 59.3369 142.354 59.3025 cv
142.27 59.2692 142.175 59.2285 142.084 59.1909 cv
141.988 59.1513 141.898 59.1139 141.792 59.069 cv
141.689 59.0253 141.573 58.9731 141.464 58.9241 cv
141.363 58.8783 141.268 58.8387 141.161 58.7886 cv
140.939 58.6864 140.704 58.5759 140.456 58.455 cv
140.354 58.406 140.24 58.3487 140.133 58.2965 cv
139.977 58.2194 139.825 58.1444 139.658 58.0599 cv
139.532 57.9952 139.392 57.9223 139.259 57.8524 cv
139.097 57.769 138.938 57.6877 138.766 57.598 cv
138.631 57.5251 138.484 57.4448 138.342 57.3687 cv
138.181 57.2822 138.028 57.2029 137.859 57.1102 cv
137.859 67.3056 li
143.235 59.6257 li
143.181 59.608 143.118 59.585 143.061 59.5641 cv
cp
139.051 82.9593 mo
139.284 82.8352 139.517 82.7143 139.734 82.6059 cv
139.814 82.5652 139.885 82.5308 139.962 82.4923 cv
140.153 82.3974 140.342 82.3036 140.517 82.2181 cv
140.605 82.1754 140.684 82.1399 140.769 82.0982 cv
140.924 82.0262 141.079 81.9523 141.223 81.8866 cv
141.306 81.849 141.38 81.8178 141.459 81.7812 cv
141.591 81.723 141.724 81.6646 141.846 81.6114 cv
141.925 81.5769 141.998 81.5489 142.073 81.5176 cv
142.183 81.4717 142.294 81.4248 142.397 81.3841 cv
142.469 81.3549 142.536 81.331 142.605 81.3039 cv
142.698 81.2684 142.791 81.233 142.877 81.2017 cv
142.944 81.1777 143.007 81.1569 143.07 81.1339 cv
143.124 81.1162 143.185 81.0932 143.235 81.0766 cv
138.185 73.8606 li
137.859 73.3957 li
137.859 83.5931 li
137.868 83.59 137.875 83.5858 137.883 83.5806 cv
137.911 83.566 137.936 83.5535 137.964 83.5378 cv
138.274 83.3689 138.572 83.2085 138.855 83.0593 cv
138.923 83.0228 138.983 82.9926 139.051 82.9593 cv
cp
148.089 95.3897 mo
148.574 95.3553 149.064 95.3188 149.56 95.2845 cv
149.653 95.2792 149.742 95.2719 149.836 95.2667 cv
150.42 95.225 151.005 95.1874 151.591 95.152 cv
151.709 95.1458 151.828 95.1384 151.948 95.1322 cv
152.403 95.1051 152.853 95.0791 153.301 95.0561 cv
153.493 95.0467 153.681 95.0373 153.87 95.0279 cv
154.245 95.0091 154.615 94.9936 154.98 94.9779 cv
155.183 94.9695 155.382 94.9612 155.581 94.955 cv
155.931 94.9424 156.272 94.931 156.607 94.9227 cv
156.796 94.9185 156.983 94.9122 157.166 94.9081 cv
157.251 94.907 157.344 94.9039 157.429 94.9019 cv
156.211 86.9248 li
155.993 85.4935 li
145.798 82.9812 li
145.672 87.3575 li
145.438 95.5961 li
145.618 95.5825 145.812 95.5669 145.999 95.5523 cv
146.122 95.5419 146.244 95.5315 146.368 95.5221 cv
146.793 95.4877 147.225 95.4554 147.666 95.4221 cv
147.807 95.4105 147.945 95.4002 148.089 95.3897 cv
cp
194.351 81.0766 mo
194.402 81.0932 194.462 81.1162 194.517 81.1339 cv
194.581 81.1569 194.643 81.1777 194.71 81.2017 cv
194.795 81.233 194.887 81.2684 194.978 81.3028 cv
195.049 81.3299 195.118 81.356 195.193 81.3851 cv
195.29 81.4237 195.395 81.4675 195.499 81.5113 cv
195.582 81.5447 195.66 81.576 195.746 81.6145 cv
195.857 81.6614 195.978 81.7156 196.097 81.7688 cv
196.188 81.8094 196.275 81.8459 196.373 81.8908 cv
196.496 81.947 196.632 82.0107 196.764 82.0743 cv
196.868 82.1242 196.97 82.1691 197.08 82.2233 cv
197.217 82.29 197.367 82.3651 197.514 82.437 cv
197.631 82.4954 197.745 82.5496 197.868 82.6131 cv
198.02 82.6903 198.188 82.7769 198.347 82.8613 cv
198.482 82.929 198.609 82.9937 198.748 83.0677 cv
198.919 83.1584 199.106 83.2595 199.286 83.3564 cv
199.432 83.4347 199.568 83.5065 199.719 83.59 cv
199.721 83.5911 199.722 83.592 199.726 83.5931 cv
199.726 73.3967 li
198.281 75.4607 li
194.351 81.0766 li
cp
198.093 84.9379 mo
198.037 84.9076 197.986 84.8816 197.93 84.8513 cv
197.694 84.7273 197.465 84.6074 197.251 84.498 cv
197.163 84.4521 197.081 84.4114 196.996 84.3687 cv
196.822 84.2811 196.652 84.1957 196.491 84.1164 cv
196.406 84.0758 196.325 84.0361 196.245 83.9965 cv
196.092 83.9225 195.946 83.8547 195.806 83.7891 cv
195.736 83.7567 195.663 83.7224 195.596 83.6911 cv
195.446 83.6233 195.307 83.5608 195.17 83.5024 cv
195.124 83.4815 195.074 83.4597 195.029 83.4398 cv
194.855 83.3648 194.69 83.298 194.539 83.2366 cv
194.509 83.2251 194.485 83.2168 194.457 83.2053 cv
194.337 83.1595 194.223 83.1156 194.119 83.0771 cv
194.07 83.0593 194.025 83.0447 193.979 83.0291 cv
193.903 83.002 193.829 82.977 193.76 82.9551 cv
193.738 82.9467 193.718 82.9416 193.697 82.9342 cv
193.874 89.1943 li
194.009 93.8781 li
195.904 91.4116 197.602 88.5949 199.076 85.4706 cv
199.057 85.4612 199.038 85.4498 199.02 85.4393 cv
198.696 85.2621 198.386 85.0932 198.093 84.9379 cv
cp
198.819 57.598 mo
198.649 57.6877 198.49 57.769 198.329 57.8524 cv
198.194 57.9213 198.056 57.9952 197.928 58.0599 cv
197.764 58.1433 197.616 58.2162 197.461 58.2914 cv
197.352 58.3465 197.234 58.406 197.13 58.4561 cv
196.926 58.554 196.738 58.6416 196.554 58.7281 cv
196.388 58.8052 196.232 58.8751 196.081 58.9418 cv
195.986 58.9846 195.884 59.0304 195.794 59.069 cv
195.684 59.1159 195.586 59.1555 195.484 59.1983 cv
195.4 59.2337 195.313 59.2692 195.236 59.3014 cv
195.14 59.339 195.055 59.3703 194.968 59.4036 cv
194.893 59.4328 194.814 59.463 194.744 59.488 cv
194.662 59.5183 194.589 59.5433 194.513 59.5694 cv
194.459 59.5871 194.402 59.609 194.351 59.6257 cv
199.726 67.3056 li
199.726 57.1102 li
199.56 57.2019 199.409 57.2812 199.25 57.3666 cv
199.107 57.4438 198.957 57.5251 198.819 57.598 cv
cp
172.608 99.9994 mo
172.948 99.6888 173.283 99.3845 173.612 99.0946 cv
173.65 99.0592 173.688 99.0269 173.727 98.9925 cv
174.024 98.7308 174.314 98.4785 174.596 98.2378 cv
174.68 98.1637 174.762 98.0939 174.845 98.023 cv
175.121 97.7885 175.388 97.5622 175.642 97.3495 cv
175.672 97.3256 175.702 97.2994 175.731 97.2766 cv
176.011 97.042 176.272 96.8283 176.52 96.6261 cv
176.592 96.5677 176.658 96.5145 176.728 96.4583 cv
176.908 96.3133 177.075 96.1788 177.232 96.0548 cv
177.267 96.0256 177.311 95.9902 177.346 95.9631 cv
168.793 90.5558 li
160.24 95.9631 li
160.274 95.9902 160.318 96.0245 160.354 96.0538 cv
160.506 96.1746 160.667 96.305 160.842 96.4457 cv
160.921 96.5093 160.995 96.5698 161.079 96.6355 cv
161.32 96.8324 161.573 97.0399 161.844 97.2661 cv
161.889 97.3037 161.937 97.3443 161.983 97.3819 cv
162.222 97.5831 162.472 97.7926 162.729 98.0125 cv
162.82 98.0897 162.91 98.1668 163.003 98.2461 cv
163.271 98.4785 163.548 98.7193 163.832 98.9695 cv
163.882 99.0144 163.93 99.055 163.981 99.0999 cv
164.306 99.3876 164.638 99.6888 164.974 99.9963 cv
165.064 100.079 165.156 100.163 165.247 100.249 cv
165.522 100.503 165.798 100.763 166.078 101.027 cv
166.159 101.106 166.239 101.183 166.323 101.262 cv
166.667 101.593 167.01 101.931 167.35 102.274 cv
167.422 102.347 167.491 102.42 167.563 102.493 cv
167.844 102.78 168.12 103.068 168.394 103.362 cv
168.447 103.419 168.505 103.475 168.558 103.532 cv
169.029 103.532 li
169.082 103.475 169.14 103.419 169.193 103.362 cv
169.467 103.068 169.743 102.78 170.024 102.493 cv
170.095 102.42 170.164 102.347 170.235 102.274 cv
170.577 101.931 170.921 101.592 171.265 101.26 cv
171.346 101.183 171.426 101.108 171.506 101.031 cv
171.785 100.763 172.066 100.501 172.344 100.243 cv
172.433 100.162 172.52 100.081 172.608 99.9994 cv
cp
180.671 102.887 mo
180.636 102.775 180.603 102.663 180.566 102.551 cv
180.497 102.337 180.426 102.124 180.354 101.912 cv
180.31 101.777 180.264 101.643 180.218 101.51 cv
180.156 101.33 180.094 101.149 180.032 100.974 cv
179.989 100.853 179.946 100.735 179.904 100.618 cv
179.853 100.479 179.803 100.34 179.754 100.206 cv
179.711 100.089 179.669 99.9745 179.626 99.8609 cv
179.576 99.7295 179.527 99.6002 179.479 99.4741 cv
179.438 99.3677 179.397 99.2625 179.359 99.1603 cv
179.31 99.0341 179.262 98.9111 179.214 98.7913 cv
179.177 98.6985 179.141 98.6026 179.104 98.513 cv
179.051 98.3763 178.998 98.2481 178.947 98.121 cv
178.923 98.0605 178.897 97.9959 178.873 97.9386 cv
178.8 97.7592 178.732 97.5945 178.669 97.4423 cv
178.665 97.4319 178.661 97.4225 178.657 97.4121 cv
178.495 97.5403 178.308 97.6894 178.112 97.8467 cv
178.053 97.8957 177.986 97.95 177.922 98.0011 cv
177.778 98.1178 177.628 98.2398 177.471 98.3691 cv
177.387 98.4379 177.298 98.5108 177.209 98.5838 cv
177.051 98.7151 176.885 98.8538 176.716 98.9945 cv
176.626 99.0697 176.539 99.1436 176.445 99.2218 cv
176.206 99.4241 175.958 99.6356 175.704 99.8557 cv
175.678 99.8765 175.656 99.8963 175.63 99.9171 cv
175.353 100.158 175.065 100.41 174.774 100.669 cv
174.687 100.746 174.598 100.826 174.51 100.905 cv
174.299 101.094 174.086 101.286 173.872 101.482 cv
173.769 101.577 173.663 101.675 173.557 101.772 cv
173.348 101.967 173.137 102.164 172.925 102.365 cv
172.826 102.46 172.725 102.555 172.624 102.652 cv
172.362 102.904 172.099 103.159 171.838 103.42 cv
171.8 103.457 171.761 103.494 171.723 103.532 cv
180.868 103.532 li
180.854 103.482 180.839 103.432 180.825 103.382 cv
180.775 103.217 180.722 103.052 180.671 102.887 cv
cp
191.79 82.9812 mo
181.593 85.4935 li
181.287 87.4899 li
180.157 94.9019 li
180.242 94.9039 180.335 94.907 180.421 94.9081 cv
180.605 94.9122 180.792 94.9185 180.98 94.9227 cv
181.314 94.931 181.654 94.9424 182.005 94.955 cv
182.204 94.9612 182.404 94.9695 182.608 94.9779 cv
182.972 94.9936 183.34 95.0091 183.713 95.0279 cv
183.905 95.0373 184.094 95.0467 184.288 95.0561 cv
184.733 95.0791 185.18 95.1051 185.632 95.1312 cv
185.754 95.1384 185.875 95.1447 185.998 95.152 cv
186.582 95.1874 187.167 95.225 187.751 95.2667 cv
187.845 95.2719 187.936 95.2792 188.032 95.2845 cv
188.525 95.3199 189.014 95.3553 189.498 95.3897 cv
189.642 95.4002 189.781 95.4105 189.924 95.4221 cv
190.363 95.4554 190.793 95.4877 191.215 95.5221 cv
191.342 95.5315 191.466 95.5419 191.592 95.5523 cv
191.776 95.5669 191.969 95.5825 192.149 95.5961 cv
191.835 84.5407 li
191.79 82.9812 li
cp
189.381 97.36 mo
188.895 97.3245 188.402 97.2891 187.905 97.2547 cv
187.753 97.2443 187.6 97.2338 187.446 97.2234 cv
187.001 97.1931 186.553 97.164 186.107 97.1369 cv
185.989 97.1296 185.872 97.1222 185.755 97.115 cv
185.206 97.0816 184.659 97.0503 184.119 97.0233 cv
184.005 97.017 183.894 97.0128 183.78 97.0065 cv
183.349 96.9846 182.924 96.9659 182.507 96.9481 cv
182.358 96.9419 182.209 96.9356 182.063 96.9304 cv
181.59 96.9127 181.125 96.8982 180.679 96.8877 cv
180.639 96.8867 180.596 96.8857 180.556 96.8846 cv
180.542 96.8846 180.53 96.8846 180.515 96.8836 cv
180.528 96.9159 180.543 96.9555 180.559 96.9888 cv
180.609 97.1119 180.66 97.238 180.715 97.3725 cv
180.742 97.4413 180.77 97.509 180.799 97.5809 cv
180.854 97.7185 180.91 97.8603 180.968 98.0073 cv
180.998 98.0803 181.025 98.1523 181.054 98.2273 cv
181.122 98.3982 181.189 98.5755 181.258 98.7569 cv
181.28 98.8142 181.302 98.8695 181.325 98.9278 cv
181.418 99.176 181.513 99.4303 181.608 99.693 cv
181.611 99.6962 181.612 99.6993 181.613 99.7024 cv
181.704 99.9557 181.797 100.216 181.89 100.48 cv
181.918 100.557 181.943 100.636 181.971 100.715 cv
182.039 100.911 182.107 101.107 182.173 101.308 cv
182.204 101.402 182.235 101.498 182.267 101.592 cv
182.33 101.782 182.391 101.974 182.452 102.167 cv
182.483 102.265 182.513 102.363 182.544 102.461 cv
182.606 102.663 182.668 102.867 182.728 103.071 cv
182.746 103.133 182.766 103.194 182.783 103.256 cv
184.204 102.624 187.358 100.967 190.854 97.4736 cv
190.417 97.4392 189.981 97.4048 189.528 97.3704 cv
189.479 97.3662 189.43 97.3641 189.381 97.36 cv
cp
199.502 70.3506 mo
192.824 60.8089 li
190.664 64.9225 li
187.815 70.3506 li
192.824 79.8923 li
194.104 78.0649 li
199.502 70.3506 li
cp
164.965 102.654 mo
164.86 102.554 164.757 102.456 164.652 102.358 cv
164.445 102.161 164.24 101.968 164.034 101.778 cv
163.925 101.677 163.816 101.576 163.707 101.476 cv
163.5 101.285 163.292 101.099 163.088 100.916 cv
162.994 100.832 162.9 100.746 162.808 100.666 cv
162.52 100.408 162.233 100.158 161.956 99.9182 cv
161.929 99.8953 161.903 99.8723 161.876 99.8483 cv
161.623 99.6315 161.378 99.4219 161.142 99.2218 cv
161.048 99.1426 160.957 99.0686 160.866 98.9925 cv
160.701 98.8538 160.538 98.7182 160.382 98.5891 cv
160.289 98.5119 160.195 98.4347 160.107 98.3607 cv
159.963 98.244 159.825 98.1313 159.693 98.0241 cv
159.613 97.9604 159.531 97.8937 159.457 97.8343 cv
159.331 97.7321 159.218 97.6424 159.106 97.5529 cv
159.048 97.507 158.983 97.4549 158.93 97.4131 cv
158.928 97.4142 158.928 97.4142 158.928 97.4152 cv
158.795 97.7353 158.639 98.1168 158.472 98.5401 cv
158.446 98.6016 158.42 98.6694 158.394 98.735 cv
158.337 98.8799 158.279 99.0279 158.22 99.1822 cv
158.185 99.2708 158.151 99.3626 158.115 99.4543 cv
158.062 99.594 158.007 99.7389 157.953 99.8859 cv
157.914 99.987 157.877 100.087 157.839 100.19 cv
157.782 100.342 157.727 100.499 157.67 100.655 cv
157.633 100.759 157.595 100.861 157.559 100.964 cv
157.493 101.151 157.426 101.341 157.361 101.533 cv
157.317 101.66 157.274 101.787 157.23 101.917 cv
157.159 102.127 157.09 102.338 157.021 102.55 cv
156.984 102.664 156.95 102.779 156.913 102.892 cv
156.863 103.056 156.812 103.218 156.762 103.381 cv
156.748 103.431 156.733 103.482 156.718 103.532 cv
165.863 103.532 li
165.823 103.494 165.785 103.456 165.746 103.417 cv
165.487 103.159 165.227 102.905 164.965 102.654 cv
cp
166.638 89.605 mo
158.035 86.2139 li
159.263 94.266 li
166.638 89.605 li
cp
179.552 86.215 mo
170.95 89.605 li
178.323 94.266 li
179.552 86.215 li
cp
155.206 83.27 mo
150.759 72.6054 li
146.311 81.0797 li
155.206 83.27 li
cp
155.206 57.4313 mo
146.311 59.6225 li
149.931 66.5185 li
150.759 68.0946 li
155.206 57.4313 li
cp
185.691 70.3506 mo
180.034 56.7891 li
168.793 52.3586 li
157.552 56.7891 li
151.896 70.3506 li
157.552 83.9111 li
168.793 88.3426 li
180.034 83.9111 li
185.691 70.3506 li
cp
193.987 57.671 mo
194.04 57.6522 194.09 57.6345 194.147 57.6148 cv
194.235 57.5835 194.329 57.5459 194.426 57.5094 cv
194.479 57.4886 194.527 57.4709 194.583 57.4469 cv
194.735 57.3864 194.898 57.3187 195.072 57.2436 cv
195.125 57.2217 195.185 57.1946 195.239 57.1707 cv
195.373 57.1112 195.509 57.0518 195.656 56.984 cv
195.732 56.9486 195.814 56.91 195.896 56.8726 cv
196.032 56.8068 196.175 56.7401 196.325 56.6681 cv
196.416 56.6234 196.508 56.5786 196.601 56.5316 cv
196.761 56.4535 196.928 56.369 197.1 56.2814 cv
197.193 56.2334 197.286 56.1877 197.385 56.1365 cv
197.608 56.0208 197.844 55.8978 198.089 55.7675 cv
198.145 55.7383 198.195 55.7112 198.254 55.6809 cv
198.56 55.5162 198.884 55.339 199.224 55.1504 cv
199.242 55.141 199.262 55.1295 199.279 55.1202 cv
198.456 53.4803 196.63 50.0912 194.015 46.6636 cv
193.982 47.8123 li
193.697 57.768 li
193.721 57.7607 193.746 57.7524 193.773 57.7441 cv
193.84 57.7222 193.912 57.6971 193.987 57.671 cv
cp
189.547 45.3074 mo
189.126 45.3396 188.698 45.3689 188.268 45.4001 cv
188.107 45.4105 187.95 45.422 187.79 45.4325 cv
187.208 45.473 186.623 45.5106 186.038 45.5461 cv
185.95 45.5524 185.863 45.5565 185.774 45.5618 cv
185.285 45.5909 184.801 45.618 184.32 45.6441 cv
184.125 45.6535 183.936 45.6618 183.745 45.6712 cv
183.368 45.69 182.998 45.7077 182.632 45.7233 cv
182.424 45.7306 182.22 45.7379 182.016 45.7462 cv
181.666 45.7587 181.325 45.7692 180.988 45.7786 cv
180.801 45.7838 180.613 45.7889 180.43 45.7921 cv
180.342 45.7942 180.245 45.7983 180.157 45.7994 cv
181.287 53.2103 li
181.593 55.2088 li
191.79 57.72 li
192.126 45.9317 li
192.15 45.1051 li
192.023 45.1155 191.886 45.1259 191.757 45.1364 cv
191.596 45.1489 191.436 45.1624 191.271 45.176 cv
190.883 45.2062 190.489 45.2365 190.089 45.2667 cv
189.908 45.2803 189.73 45.2938 189.547 45.3074 cv
cp
180.706 43.3507 mo
180.658 43.4664 180.613 43.5789 180.568 43.6863 cv
180.551 43.7291 180.533 43.777 180.515 43.8177 cv
180.533 43.8177 180.546 43.8177 180.564 43.8166 cv
180.613 43.8156 180.666 43.8145 180.716 43.8135 cv
181.161 43.802 181.625 43.7864 182.1 43.7697 cv
182.242 43.7635 182.385 43.7582 182.53 43.7519 cv
182.961 43.7342 183.397 43.7145 183.841 43.6926 cv
183.951 43.6863 184.059 43.6821 184.17 43.6758 cv
184.724 43.6477 185.287 43.6154 185.852 43.58 cv
185.944 43.5758 186.036 43.5685 186.127 43.5633 cv
186.606 43.5341 187.086 43.5028 187.563 43.4705 cv
187.71 43.4601 187.859 43.4507 188.006 43.4402 cv
188.501 43.4059 188.993 43.3704 189.478 43.335 cv
189.54 43.3297 189.601 43.3256 189.661 43.3214 cv
190.141 43.2849 190.608 43.2485 191.07 43.2131 cv
188.353 40.3869 185.571 38.4698 182.77 37.493 cv
182.745 37.5775 182.718 37.6629 182.693 37.7473 cv
182.641 37.9203 182.588 38.0955 182.534 38.2675 cv
182.5 38.3823 182.464 38.4958 182.427 38.6095 cv
182.373 38.7835 182.316 38.9556 182.261 39.1276 cv
182.226 39.2381 182.188 39.3465 182.153 39.4539 cv
182.092 39.6353 182.031 39.8114 181.97 39.9886 cv
181.938 40.0804 181.906 40.1742 181.874 40.2649 cv
181.793 40.4932 181.714 40.7174 181.635 40.9373 cv
181.621 40.9707 181.608 41.0071 181.596 41.0405 cv
181.503 41.298 181.41 41.5451 181.319 41.7858 cv
181.292 41.8567 181.267 41.9225 181.24 41.9912 cv
181.176 42.1591 181.112 42.3248 181.051 42.4833 cv
181.018 42.5646 180.988 42.6407 180.958 42.7189 cv
180.904 42.8575 180.85 42.992 180.797 43.1223 cv
180.766 43.2005 180.736 43.2746 180.706 43.3507 cv
cp
164.979 40.7017 mo
164.64 41.0114 164.307 41.3126 163.98 41.6034 cv
163.93 41.6462 163.884 41.6858 163.835 41.7285 cv
163.55 41.9798 163.275 42.2206 163.003 42.4541 cv
162.911 42.5344 162.82 42.6126 162.728 42.6897 cv
162.472 42.9086 162.222 43.1192 161.984 43.3183 cv
161.938 43.3558 161.889 43.3975 161.844 43.4351 cv
161.572 43.6613 161.32 43.8687 161.077 44.0658 cv
160.994 44.1325 160.921 44.1929 160.841 44.2565 cv
160.664 44.3983 160.501 44.5307 160.346 44.6547 cv
160.314 44.6798 160.271 44.7142 160.24 44.7392 cv
168.793 50.1465 li
173.84 46.9555 li
177.346 44.7392 li
177.312 44.7131 177.269 44.6777 177.235 44.6505 cv
177.082 44.5276 176.918 44.3972 176.743 44.2565 cv
176.666 44.1929 176.591 44.1325 176.509 44.0668 cv
176.267 43.8687 176.013 43.6602 175.738 43.4319 cv
175.697 43.3986 175.653 43.361 175.611 43.3256 cv
175.369 43.1244 175.118 42.9108 174.857 42.6886 cv
174.767 42.6115 174.676 42.5344 174.583 42.4541 cv
174.312 42.2206 174.035 41.9798 173.75 41.7285 cv
173.702 41.6858 173.655 41.6462 173.606 41.6034 cv
173.28 41.3126 172.946 41.0114 172.608 40.7017 cv
172.521 40.6225 172.434 40.5411 172.346 40.4609 cv
172.064 40.1992 171.78 39.9324 171.494 39.6593 cv
171.419 39.5873 171.345 39.5185 171.269 39.4465 cv
170.923 39.112 170.577 38.77 170.232 38.4239 cv
170.164 38.353 170.097 38.2832 170.028 38.2123 cv
169.746 37.9256 169.468 37.6348 169.194 37.3408 cv
169.14 37.2824 169.082 37.2271 169.029 37.1687 cv
168.558 37.1687 li
168.505 37.2271 168.447 37.2824 168.393 37.3408 cv
168.118 37.6348 167.841 37.9256 167.558 38.2123 cv
167.489 38.2832 167.422 38.353 167.353 38.4239 cv
167.01 38.77 166.665 39.1109 166.318 39.4445 cv
166.24 39.5174 166.166 39.5883 166.09 39.6613 cv
165.805 39.9345 165.521 40.1992 165.239 40.4609 cv
165.151 40.5422 165.066 40.6225 164.979 40.7017 cv
cp
156.931 37.8652 mo
156.963 37.9642 156.994 38.0632 157.026 38.1622 cv
157.095 38.3781 157.166 38.5928 157.237 38.8054 cv
157.256 38.8618 157.275 38.9211 157.295 38.9775 cv
157.387 39.2464 157.478 39.5112 157.571 39.7718 cv
157.597 39.8468 157.623 39.9168 157.65 39.9897 cv
157.716 40.1753 157.782 40.3577 157.848 40.5359 cv
157.884 40.6297 157.917 40.7205 157.952 40.8112 cv
158.009 40.9665 158.065 41.1166 158.122 41.2636 cv
158.156 41.3542 158.191 41.4439 158.225 41.5316 cv
158.282 41.6775 158.336 41.8171 158.391 41.9558 cv
158.42 42.0308 158.45 42.108 158.479 42.18 cv
158.543 42.3405 158.604 42.4937 158.664 42.6396 cv
158.678 42.6783 158.697 42.722 158.712 42.7596 cv
158.788 42.9462 158.86 43.1223 158.926 43.2818 cv
158.928 43.2849 158.928 43.287 158.93 43.2891 cv
158.946 43.2755 158.966 43.2578 158.983 43.2464 cv
159.135 43.1265 159.3 42.9952 159.478 42.8513 cv
159.531 42.8075 159.591 42.7585 159.648 42.7137 cv
159.802 42.5886 159.966 42.4552 160.137 42.3154 cv
160.208 42.2561 160.282 42.1955 160.357 42.134 cv
160.531 41.9902 160.713 41.837 160.901 41.6806 cv
160.976 41.617 161.05 41.5555 161.128 41.4909 cv
161.384 41.275 161.647 41.051 161.919 40.8143 cv
161.931 40.8049 161.94 40.7977 161.953 40.7883 cv
162.233 40.5453 162.523 40.2889 162.817 40.0283 cv
162.9 39.9542 162.986 39.8772 163.07 39.802 cv
163.283 39.6123 163.497 39.4194 163.712 39.2214 cv
163.819 39.1245 163.925 39.0254 164.031 38.9263 cv
164.24 38.7345 164.446 38.5385 164.655 38.3426 cv
164.758 38.2447 164.86 38.1476 164.963 38.0496 cv
165.223 37.8005 165.483 37.5462 165.739 37.2907 cv
165.781 37.2501 165.821 37.2105 165.863 37.1687 cv
156.718 37.1687 li
156.735 37.223 156.751 37.2761 156.766 37.3293 cv
156.82 37.5086 156.876 37.6869 156.931 37.8652 cv
cp
172.622 38.0496 mo
172.726 38.1476 172.83 38.2456 172.932 38.3436 cv
173.138 38.5385 173.345 38.7336 173.551 38.9243 cv
173.661 39.0254 173.77 39.1255 173.879 39.2245 cv
174.088 39.4174 174.297 39.606 174.504 39.7917 cv
174.594 39.8719 174.685 39.9542 174.775 40.0334 cv
175.064 40.29 175.351 40.5422 175.627 40.7809 cv
175.66 40.8101 175.693 40.8373 175.726 40.8653 cv
175.974 41.0801 176.215 41.2855 176.448 41.4815 cv
176.538 41.5565 176.622 41.6285 176.71 41.7014 cv
176.882 41.8464 177.052 41.9881 177.214 42.1216 cv
177.3 42.1924 177.384 42.2613 177.466 42.329 cv
177.623 42.4582 177.773 42.5803 177.918 42.697 cv
177.985 42.7502 178.054 42.8065 178.117 42.8575 cv
178.29 42.9962 178.451 43.1254 178.598 43.2422 cv
178.617 43.2568 178.64 43.2746 178.656 43.2891 cv
178.658 43.2839 178.66 43.2798 178.662 43.2746 cv
178.729 43.1151 178.8 42.9399 178.877 42.7533 cv
178.888 42.7273 178.9 42.6949 178.912 42.6667 cv
178.975 42.5114 179.041 42.3467 179.11 42.1747 cv
179.136 42.108 179.164 42.0371 179.19 41.9693 cv
179.248 41.8234 179.306 41.6743 179.365 41.52 cv
179.396 41.4398 179.428 41.3585 179.46 41.2761 cv
179.519 41.1187 179.581 40.9571 179.642 40.7924 cv
179.673 40.7122 179.703 40.6308 179.734 40.5485 cv
179.805 40.3556 179.877 40.1555 179.95 39.9553 cv
179.971 39.8949 179.992 39.8385 180.014 39.7792 cv
180.107 39.5123 180.202 39.2413 180.296 38.965 cv
180.305 38.9368 180.315 38.9055 180.325 38.8764 cv
180.407 38.6356 180.487 38.3926 180.565 38.1476 cv
180.592 38.0642 180.618 37.9798 180.645 37.8954 cv
180.707 37.7004 180.767 37.5045 180.827 37.3074 cv
180.841 37.2616 180.854 37.2157 180.868 37.1687 cv
171.723 37.1687 li
171.763 37.2105 171.805 37.2501 171.847 37.2907 cv
172.104 37.5462 172.363 37.8005 172.622 38.0496 cv
cp
188.165 75.1501 mo
186.828 72.6054 li
182.38 83.27 li
191.276 81.0797 li
188.165 75.1501 li
cp
170.95 51.0962 mo
179.552 54.4863 li
178.323 46.4342 li
170.95 51.0962 li
cp
191.276 59.6225 mo
182.38 57.4313 li
186.828 68.0946 li
188.498 64.9131 li
191.276 59.6225 li
cp
158.035 54.4863 mo
166.638 51.0962 li
159.263 46.4342 li
158.035 54.4863 li
cp
147.928 43.3214 mo
147.447 43.286 146.98 43.2485 146.517 43.2131 cv
149.234 40.3869 152.016 38.4698 154.818 37.493 cv
154.835 37.5524 154.854 37.6118 154.872 37.6723 cv
154.934 37.8807 154.996 38.0883 155.06 38.2957 cv
155.089 38.3895 155.118 38.4823 155.148 38.5741 cv
155.21 38.7721 155.274 38.9681 155.337 39.1641 cv
155.366 39.2516 155.396 39.3391 155.425 39.4268 cv
155.494 39.6342 155.564 39.8375 155.634 40.0397 cv
155.658 40.1096 155.682 40.1784 155.706 40.2472 cv
155.797 40.5057 155.889 40.7622 155.978 41.0103 cv
155.981 41.0176 155.984 41.0239 155.987 41.0301 cv
156.083 41.296 156.178 41.5524 156.273 41.8005 cv
156.29 41.8442 156.305 41.8849 156.321 41.9277 cv
156.396 42.1226 156.469 42.3134 156.54 42.4969 cv
156.566 42.5636 156.592 42.6271 156.619 42.6938 cv
156.679 42.8461 156.737 42.9941 156.793 43.137 cv
156.821 43.2046 156.848 43.2704 156.875 43.336 cv
156.928 43.4653 156.977 43.5894 157.026 43.7071 cv
157.041 43.7425 157.057 43.7832 157.071 43.8177 cv
157.054 43.8177 157.038 43.8177 157.022 43.8166 cv
156.974 43.8156 156.923 43.8145 156.874 43.8135 cv
156.427 43.802 155.962 43.7864 155.486 43.7687 cv
155.344 43.7635 155.202 43.7582 155.058 43.7519 cv
154.627 43.7342 154.188 43.7145 153.741 43.6915 cv
153.634 43.6863 153.529 43.6821 153.419 43.6758 cv
152.863 43.6477 152.298 43.6154 151.731 43.58 cv
151.643 43.5758 151.555 43.5695 151.465 43.5633 cv
150.985 43.5341 150.502 43.5028 150.022 43.4705 cv
149.875 43.4601 149.729 43.4507 149.583 43.4402 cv
149.085 43.4059 148.587 43.3704 148.1 43.3339 cv
148.042 43.3297 147.985 43.3256 147.928 43.3214 cv
cp
f
260.356 142.414 mo
261.233 143.107 li
256.265 148.582 li
257.622 146.325 259.011 144.265 260.356 142.414 cv
cp
288.363 173.383 mo
290.41 173.638 li
290.581 174.97 290.702 176.324 290.775 177.696 cv
288.363 173.383 li
cp
285.996 190.328 mo
287.944 190.863 li
287.341 192.153 286.62 193.462 285.761 194.73 cv
285.996 190.328 li
cp
275.474 199.821 mo
276.558 202.246 li
275.04 202.826 273.364 203.231 271.516 203.421 cv
275.474 199.821 li
cp
262.036 199.821 mo
265.998 203.425 li
264.142 203.239 262.459 202.842 260.941 202.275 cv
262.036 199.821 li
cp
251.513 190.328 mo
251.764 194.921 li
250.853 193.601 250.1 192.233 249.481 190.887 cv
251.513 190.328 li
cp
247.116 173.635 mo
249.147 173.383 li
246.745 177.678 li
246.82 176.312 246.941 174.962 247.116 173.635 cv
cp
250.023 171.23 mo
247.427 171.553 li
248.069 167.792 249.082 164.213 250.327 160.848 cv
250.023 171.23 li
cp
257.433 158.292 mo
252.131 167.976 li
252.487 155.748 li
260.608 146.797 li
257.433 158.292 li
cp
262.37 141.43 mo
261.565 140.793 li
262.653 139.365 263.696 138.088 264.642 136.982 cv
262.37 141.43 li
cp
275.14 141.43 mo
272.863 136.978 li
273.812 138.084 274.856 139.362 275.947 140.791 cv
275.14 141.43 li
cp
287.183 160.806 mo
288.436 164.183 289.455 167.779 290.097 171.555 cv
287.487 171.23 li
287.183 160.806 li
cp
285.517 187.046 mo
283.957 181.88 li
286.693 174.524 li
290.617 181.547 li
285.517 187.046 li
cp
280.146 192.63 mo
283.966 190.708 li
283.624 196.957 li
277.59 197.085 li
280.146 192.63 li
cp
271.812 195.711 mo
277.177 193.757 li
275.365 196.913 li
271.812 195.711 li
cp
268.756 196.816 mo
273.874 198.546 li
268.756 203.2 li
263.635 198.546 li
268.756 196.816 li
cp
262.145 196.912 mo
260.333 193.757 li
265.697 195.711 li
262.145 196.912 li
cp
257.364 192.631 mo
259.918 197.085 li
253.886 196.957 li
253.546 190.708 li
257.364 192.631 li
cp
253.552 181.88 mo
251.993 187.046 li
246.893 181.547 li
250.817 174.525 li
253.552 181.88 li
cp
254.23 177.926 mo
252.106 172.212 li
256.44 164.299 li
254.23 177.926 li
cp
268.756 146.21 mo
263.994 142.68 li
268.756 133.366 li
273.516 142.68 li
268.756 146.21 li
cp
274.227 144.67 mo
277.068 154.958 li
270.261 147.61 li
274.227 144.67 li
cp
280.077 158.292 mo
276.902 146.797 li
285.023 155.748 li
285.381 167.976 li
280.077 158.292 li
cp
283.28 177.927 mo
281.07 164.298 li
285.404 172.212 li
283.28 177.927 li
cp
282.829 185.111 mo
283.853 188.496 li
281.195 189.836 li
282.829 185.111 li
cp
254.68 185.111 mo
256.315 189.835 li
253.657 188.496 li
254.68 185.111 li
cp
268.756 194.668 mo
258.873 191.07 li
255.648 181.755 li
259.313 159.146 li
268.756 148.953 li
278.199 159.146 li
281.862 181.755 li
278.636 191.07 li
268.756 194.668 li
cp
267.246 147.61 mo
260.441 154.958 li
263.283 144.67 li
267.246 147.61 li
cp
281.274 148.613 mo
276.278 143.107 li
277.156 142.411 li
278.511 144.272 279.91 146.342 281.274 148.613 cv
cp
247.452 185.119 mo
250.575 188.484 li
248.688 189.003 li
248.15 187.603 247.748 186.279 247.452 185.119 cv
cp
255.423 199.018 mo
260.145 199.119 li
259.09 201.476 li
257.724 200.784 256.509 199.948 255.423 199.018 cv
cp
278.399 201.434 mo
277.365 199.119 li
281.968 199.021 li
280.905 199.932 279.723 200.752 278.399 201.434 cv
cp
288.748 188.983 mo
286.937 188.484 li
289.989 185.194 li
289.684 186.333 289.28 187.623 288.748 188.983 cv
cp
292.804 181.398 mo
292.839 181.144 292.856 180.984 292.858 180.96 cv
292.887 178.072 292.668 175.263 292.268 172.536 cv
292.262 172.499 292.262 172.462 292.251 172.426 cv
291.313 166.15 289.372 160.342 286.991 155.166 cv
286.957 154.983 286.889 154.806 286.764 154.667 cv
284.17 149.14 281.103 144.362 278.267 140.539 cv
278.234 140.467 278.213 140.392 278.161 140.327 cv
278.126 140.278 278.071 140.249 278.025 140.21 cv
273.428 134.066 269.521 130.484 269.425 130.398 cv
269.421 130.394 269.415 130.393 269.408 130.389 cv
269.375 130.358 269.333 130.342 269.294 130.317 cv
269.267 130.297 269.246 130.269 269.215 130.253 cv
269.2 130.244 269.179 130.245 269.16 130.237 cv
269.137 130.225 269.11 130.209 269.083 130.199 cv
269.035 130.183 268.987 130.182 268.937 130.173 cv
268.889 130.163 268.841 130.149 268.791 130.147 cv
268.766 130.146 268.743 130.146 268.718 130.147 cv
268.666 130.149 268.62 130.163 268.57 130.173 cv
268.522 130.182 268.472 130.183 268.424 130.2 cv
268.397 130.209 268.374 130.225 268.347 130.237 cv
268.331 130.245 268.312 130.244 268.293 130.253 cv
268.262 130.269 268.245 130.297 268.216 130.317 cv
268.176 130.342 268.135 130.358 268.099 130.389 cv
268.095 130.393 268.089 130.394 268.084 130.398 cv
267.989 130.484 264.088 134.06 259.497 140.199 cv
259.447 140.242 259.388 140.273 259.349 140.327 cv
259.292 140.398 259.267 140.479 259.234 140.557 cv
256.413 144.368 253.357 149.128 250.775 154.632 cv
250.752 154.656 li
250.613 154.813 250.533 155.011 250.508 155.219 cv
248.146 160.367 246.22 166.143 245.282 172.384 cv
245.244 172.488 245.229 172.597 245.227 172.711 cv
244.839 175.41 244.627 178.191 244.656 181.046 cv
244.658 181.063 244.673 181.193 244.702 181.409 cv
244.614 181.697 244.664 182.002 244.831 182.255 cv
245.102 183.878 245.759 186.956 247.164 190.362 cv
247.17 190.398 247.162 190.434 247.173 190.47 cv
247.208 190.609 247.277 190.725 247.36 190.829 cv
248.446 193.352 249.952 196.013 252.02 198.376 cv
252.095 198.539 252.22 198.663 252.362 198.765 cv
254.161 200.732 256.38 202.456 259.088 203.68 cv
259.121 203.7 259.146 203.73 259.18 203.747 cv
259.215 203.762 259.249 203.759 259.284 203.77 cv
261.848 204.896 264.847 205.583 268.37 205.583 cv
268.739 205.58 li
269.139 205.583 li
269.142 205.583 269.142 205.583 269.142 205.583 cv
272.667 205.583 275.663 204.896 278.228 203.769 cv
278.263 203.758 278.297 203.762 278.33 203.747 cv
278.365 203.732 278.388 203.701 278.42 203.681 cv
281.13 202.457 283.344 200.734 285.146 198.767 cv
285.289 198.665 285.415 198.538 285.49 198.374 cv
287.554 196.015 289.059 193.359 290.141 190.837 cv
290.227 190.73 290.3 190.612 290.339 190.471 cv
290.348 190.43 290.341 190.391 290.345 190.349 cv
291.736 186.979 292.393 183.927 292.67 182.267 cv
292.847 182.011 292.897 181.695 292.804 181.398 cv
cp
f
364.615 193.633 mo
360.339 191.478 li
360.712 198.385 li
367.422 198.528 li
364.615 193.633 li
cp
366.419 203.244 mo
367.64 200.506 li
362.19 200.389 li
363.431 201.478 364.826 202.453 366.419 203.244 cv
cp
368.183 204 mo
369.917 204.658 371.848 205.111 373.995 205.297 cv
369.45 201.164 li
368.183 204 li
cp
357.585 174.174 mo
353.256 181.918 li
358.867 187.966 li
360.591 182.259 li
357.585 174.174 li
cp
376.637 198.046 mo
371.003 199.952 li
376.637 205.073 li
382.273 199.952 li
376.637 198.046 li
cp
353.521 173.413 mo
353.309 175.007 353.16 176.629 353.087 178.277 cv
355.979 173.108 li
353.521 173.413 li
cp
355.992 191.784 mo
356.713 193.361 357.606 194.97 358.702 196.508 cv
358.41 191.12 li
355.992 191.784 li
cp
353.767 185.322 mo
354.097 186.673 354.568 188.264 355.22 189.954 cv
357.489 189.33 li
353.767 185.322 li
cp
357.174 159.221 mo
355.723 163.027 354.541 167.096 353.817 171.389 cv
356.83 171.015 li
357.174 159.221 li
cp
392.685 182.259 mo
394.409 187.966 li
400.022 181.918 li
395.691 174.174 li
392.685 182.259 li
cp
379.285 205.294 mo
381.424 205.103 383.348 204.641 385.079 203.969 cv
383.826 201.164 li
379.285 205.294 li
cp
397.299 173.108 mo
400.197 178.294 li
400.124 176.641 399.982 175.015 399.769 173.414 cv
397.299 173.108 li
cp
397.976 189.931 mo
398.625 188.282 399.096 186.731 399.436 185.398 cv
395.787 189.33 li
397.976 189.931 li
cp
386.836 203.199 mo
388.379 202.418 389.741 201.459 390.954 200.392 cv
385.636 200.506 li
386.836 203.199 li
cp
385.854 198.528 mo
392.564 198.385 li
392.937 191.478 li
388.663 193.633 li
385.854 198.528 li
cp
394.586 196.311 mo
395.629 194.826 396.49 193.278 397.19 191.757 cv
394.868 191.12 li
394.586 196.311 li
cp
399.473 171.391 mo
398.75 167.082 397.561 163 396.1 159.181 cv
396.446 171.015 li
399.473 171.391 li
cp
360.452 189.339 mo
363.6 190.927 li
361.661 185.329 li
360.452 189.339 li
cp
367.569 154.028 mo
375.188 145.803 li
370.751 142.515 li
367.569 154.028 li
cp
378.088 145.803 mo
385.706 154.028 li
382.527 142.515 li
378.088 145.803 li
cp
391.615 185.329 mo
389.676 190.927 li
392.824 189.339 li
391.615 185.329 li
cp
363.76 162.938 mo
358.811 171.974 li
361.238 178.499 li
363.76 162.938 li
cp
373.67 196.973 mo
367.451 194.709 li
369.548 198.367 li
373.67 196.973 li
cp
385.827 194.709 mo
379.606 196.973 li
383.728 198.367 li
385.827 194.709 li
cp
390.694 182.134 mo
386.788 158.049 li
376.637 147.09 li
366.487 158.049 li
362.582 182.134 li
366.035 192.1 li
376.637 195.961 li
387.243 192.1 li
390.694 182.134 li
cp
367.682 140.142 mo
366.054 142.371 364.369 144.898 362.741 147.682 cv
368.787 141.017 li
367.682 140.142 li
cp
372.767 133.774 mo
371.591 135.117 370.257 136.729 368.846 138.579 cv
369.888 139.404 li
372.767 133.774 li
cp
368.205 144.54 mo
359.224 154.441 li
358.829 167.936 li
364.709 157.202 li
368.205 144.54 li
cp
384.432 138.577 mo
383.021 136.726 381.682 135.114 380.507 133.769 cv
383.388 139.404 li
384.432 138.577 li
cp
388.567 157.202 mo
394.447 167.936 li
394.052 154.441 li
385.071 144.54 li
388.567 157.202 li
cp
385.598 140.139 mo
384.489 141.017 li
390.564 147.712 li
388.93 144.915 387.233 142.377 385.598 140.139 cv
cp
389.516 162.938 mo
392.038 178.499 li
394.465 171.974 li
389.516 162.938 li
cp
371.437 140.595 mo
376.637 130.424 li
381.839 140.595 li
376.637 144.45 li
371.437 140.595 li
cp
f
298.575 284.592 mo
298.575 263.3 li
298.575 242.012 li
302.966 238.742 li
302.966 287.859 li
298.575 284.592 li
cp
291.238 293.232 mo
297.684 286.446 li
302.757 290.227 li
294.186 297.992 li
291.238 293.232 li
cp
248.094 294.116 mo
268.754 294.116 li
289.413 294.116 li
292.47 299.049 li
245.035 299.049 li
248.094 294.116 li
cp
239.823 286.446 mo
246.27 293.232 li
243.322 297.99 li
234.751 290.225 li
239.823 286.446 li
cp
289.413 232.488 mo
268.754 232.488 li
248.094 232.488 li
245.038 227.555 li
292.47 227.555 li
289.413 232.488 li
cp
287.948 287.925 mo
292.057 282.259 li
296.052 285.232 li
290.137 291.458 li
287.948 287.925 li
cp
245.448 282.261 mo
249.56 287.925 li
247.369 291.458 li
241.454 285.232 li
245.448 282.261 li
cp
249.56 238.676 mo
245.448 244.342 li
241.454 241.367 li
247.369 235.142 li
249.56 238.676 li
cp
292.059 244.342 mo
287.948 238.676 li
290.137 235.142 li
296.052 241.369 li
292.059 244.342 li
cp
284.616 282.547 mo
287.712 279.024 li
290.441 281.055 li
286.799 286.072 li
284.616 282.547 li
cp
249.795 279.024 mo
252.892 282.547 li
250.706 286.072 li
247.066 281.055 li
249.795 279.024 li
cp
252.892 244.055 mo
249.795 247.578 li
247.066 245.546 li
250.706 240.53 li
252.892 244.055 li
cp
287.712 247.578 mo
284.616 244.055 li
286.799 240.53 li
290.441 245.546 li
287.712 247.578 li
cp
282.915 281.429 mo
268.754 281.429 li
254.593 281.429 li
250.944 277.273 li
250.944 263.3 li
250.944 249.329 li
254.593 245.174 li
268.754 245.174 li
282.915 245.174 li
286.568 249.329 li
286.568 263.3 li
286.568 277.273 li
282.915 281.429 li
cp
268.754 239.735 mo
284.92 239.735 li
282.808 243.146 li
268.754 243.146 li
254.699 243.146 li
252.585 239.735 li
268.754 239.735 li
cp
246.668 263.3 mo
246.668 247.771 li
248.932 249.458 li
248.932 263.3 li
248.932 277.145 li
246.668 278.83 li
246.668 263.3 li
cp
268.754 286.865 mo
252.585 286.865 li
254.699 283.458 li
268.754 283.458 li
282.808 283.458 li
284.92 286.865 li
268.754 286.865 li
cp
290.84 263.3 mo
290.84 278.83 li
288.577 277.145 li
288.577 263.3 li
288.577 249.458 li
290.84 247.773 li
290.84 263.3 li
cp
268.754 234.516 mo
288.156 234.516 li
286.178 237.708 li
268.754 237.708 li
251.33 237.708 li
249.351 234.516 li
268.754 234.516 li
cp
240.943 263.3 mo
240.943 243.508 li
244.656 246.273 li
244.656 263.3 li
244.656 280.327 li
240.943 283.095 li
240.943 263.3 li
cp
268.754 292.087 mo
249.351 292.087 li
251.33 288.894 li
268.754 288.894 li
286.178 288.894 li
288.156 292.087 li
268.754 292.087 li
cp
296.565 263.3 mo
296.565 283.093 li
292.849 280.327 li
292.849 263.3 li
292.849 246.275 li
296.565 243.508 li
296.565 263.3 li
cp
302.453 236.603 mo
297.684 240.155 li
291.238 233.369 li
294.453 228.182 li
302.453 236.603 li
cp
243.057 228.182 mo
246.27 233.369 li
239.823 240.155 li
235.055 236.605 li
243.057 228.182 li
cp
234.544 238.744 mo
238.933 242.012 li
238.933 263.3 li
238.933 284.592 li
234.544 287.859 li
234.544 238.744 li
cp
304.95 236.605 mo
304.942 236.547 304.936 236.493 304.919 236.438 cv
304.896 236.364 304.863 236.3 304.823 236.233 cv
304.807 236.201 304.8 236.164 304.777 236.134 cv
304.765 236.116 304.746 236.11 304.736 236.094 cv
304.719 236.076 304.713 236.052 304.696 236.033 cv
295.011 225.839 li
294.98 225.808 294.939 225.793 294.905 225.766 cv
294.872 225.74 294.851 225.704 294.818 225.68 cv
294.793 225.666 294.768 225.666 294.747 225.657 cv
294.686 225.624 294.626 225.603 294.557 225.585 cv
294.49 225.565 294.426 225.547 294.357 225.543 cv
294.334 225.541 294.311 225.526 294.284 225.526 cv
243.224 225.526 li
243.199 225.526 243.176 225.541 243.151 225.543 cv
243.08 225.547 243.015 225.565 242.946 225.585 cv
242.884 225.605 242.825 225.622 242.767 225.655 cv
242.742 225.664 242.715 225.666 242.692 225.68 cv
242.652 225.704 242.629 225.742 242.596 225.769 cv
242.565 225.798 242.527 225.81 242.498 225.839 cv
232.813 236.033 li
232.797 236.05 232.792 236.072 232.776 236.09 cv
232.761 236.108 232.742 236.116 232.728 236.134 cv
232.705 236.167 232.699 236.208 232.679 236.243 cv
232.645 236.304 232.612 236.364 232.59 236.432 cv
232.572 236.493 232.563 236.554 232.555 236.617 cv
232.551 236.657 232.532 236.694 232.532 236.736 cv
232.532 290.491 li
232.532 290.78 232.653 291.053 232.866 291.246 cv
242.279 299.773 li
242.152 300.201 242.298 300.674 242.692 300.919 cv
242.857 301.024 243.04 301.074 243.224 301.074 cv
243.378 301.074 243.532 301.035 243.67 300.965 cv
243.805 301.03 243.949 301.076 244.104 301.076 cv
293.406 301.076 li
293.558 301.076 293.702 301.03 293.838 300.965 cv
293.975 301.035 294.13 301.074 294.284 301.074 cv
294.465 301.074 294.651 301.024 294.818 300.919 cv
295.207 300.674 295.356 300.201 295.228 299.773 cv
304.642 291.246 li
304.854 291.053 304.975 290.78 304.975 290.491 cv
304.975 236.736 li
304.975 236.69 304.957 236.649 304.95 236.605 cv
cp
f
300.284 57.0341 mo
299.874 49.3302 li
309.931 57.0341 li
300.284 57.0341 li
cp
299.892 59.0617 mo
310.267 59.0617 li
287.562 79.3325 li
299.892 59.0617 li
cp
237.615 59.0617 mo
249.945 79.3294 li
227.245 59.0617 li
237.615 59.0617 li
cp
237.225 57.0341 mo
227.576 57.0341 li
237.636 49.3302 li
237.225 57.0341 li
cp
256.061 48.0511 mo
248.3 44.2399 li
264.2 44.2399 li
256.061 48.0511 li
cp
281.447 48.0501 mo
273.309 44.2399 li
289.207 44.2399 li
281.447 48.0501 li
cp
285.95 59.0617 mo
296.965 59.0617 li
276.56 80.4114 li
285.95 59.0617 li
cp
268.756 64.1103 mo
272.296 85.1506 li
268.756 94.6068 li
265.214 85.1537 li
268.756 64.1103 li
cp
251.557 59.0617 mo
260.952 80.4146 li
240.545 59.0617 li
251.557 59.0617 li
cp
251.555 57.0341 mo
242.496 57.0341 li
254.032 51.3057 li
251.555 57.0341 li
cp
265.539 57.0341 mo
253.748 57.0341 li
256.486 50.7083 li
265.539 57.0341 li
cp
268.756 56.8151 mo
258.066 49.3469 li
268.756 44.3441 li
279.443 49.3469 li
268.756 56.8151 li
cp
281.024 50.7083 mo
283.761 57.0341 li
271.971 57.0341 li
281.024 50.7083 li
cp
263.744 81.7657 mo
253.759 59.0617 li
267.565 59.0617 li
263.744 81.7657 li
cp
269.946 59.0617 mo
283.751 59.0617 li
273.766 81.7677 li
269.946 59.0617 li
cp
285.957 57.0341 mo
283.476 51.3057 li
295.014 57.0341 li
285.957 57.0341 li
cp
297.774 47.7217 mo
298.235 56.3743 li
283.742 49.178 li
293.452 44.4097 li
297.774 47.7217 li
cp
244.056 44.4097 mo
253.765 49.178 li
239.275 56.3743 li
239.733 47.7217 li
244.056 44.4097 li
cp
255.11 83.9392 mo
243.87 65.4635 li
263.308 85.8031 li
266.379 94 li
255.11 83.9392 li
cp
271.131 94.0022 mo
274.198 85.8062 li
293.642 65.4635 li
282.398 83.9424 li
271.131 94.0022 li
cp
313.832 58.4612 mo
313.834 58.455 313.839 58.4518 313.843 58.4456 cv
313.895 58.3236 313.924 58.1892 313.924 58.0484 cv
313.924 58.0411 313.92 58.0348 313.92 58.0276 cv
313.92 58.0223 313.922 58.016 313.922 58.0109 cv
313.922 57.9713 313.901 57.939 313.895 57.9025 cv
313.878 57.8023 313.861 57.7044 313.82 57.6168 cv
313.799 57.571 313.766 57.5355 313.738 57.4949 cv
313.686 57.4177 313.634 57.3479 313.565 57.2884 cv
313.549 57.2749 313.542 57.2541 313.526 57.2405 cv
294.175 42.4186 li
294.1 42.3613 294.017 42.3217 293.931 42.2873 cv
293.917 42.2821 293.907 42.2716 293.892 42.2664 cv
293.788 42.231 293.677 42.2123 293.569 42.2123 cv
243.941 42.2123 li
243.83 42.2123 243.72 42.231 243.616 42.2664 cv
243.605 42.2706 243.597 42.279 243.586 42.2832 cv
243.497 42.3176 243.409 42.3593 243.334 42.4186 cv
223.983 57.2405 li
223.966 57.2541 223.959 57.2749 223.943 57.2895 cv
223.874 57.3479 223.823 57.4177 223.772 57.4928 cv
223.744 57.5345 223.712 57.571 223.69 57.6168 cv
223.649 57.7034 223.632 57.7982 223.616 57.8952 cv
223.611 57.9348 223.588 57.9692 223.586 58.0109 cv
223.586 58.0171 223.59 58.0223 223.59 58.0286 cv
223.59 58.0348 223.586 58.0411 223.586 58.0484 cv
223.586 58.1892 223.615 58.3236 223.667 58.4456 cv
223.67 58.4529 223.677 58.4592 223.682 58.4675 cv
223.737 58.5884 223.813 58.6948 223.909 58.7844 cv
223.915 58.7906 223.917 58.8011 223.925 58.8083 cv
253.64 85.3361 li
253.642 85.3382 253.644 85.3392 253.646 85.3403 cv
268.089 98.2356 li
268.103 98.2481 268.12 98.2512 268.135 98.2627 cv
268.199 98.3138 268.268 98.3544 268.341 98.3879 cv
268.351 98.392 268.358 98.4003 268.368 98.4045 cv
268.381 98.4097 268.389 98.4202 268.399 98.4244 cv
268.401 98.4253 268.401 98.4244 268.401 98.4253 cv
268.412 98.4275 268.42 98.4275 268.429 98.4306 cv
268.533 98.4671 268.643 98.49 268.756 98.49 cv
268.868 98.49 268.977 98.4671 269.081 98.4306 cv
269.092 98.4275 269.1 98.4275 269.108 98.4253 cv
269.11 98.4244 269.11 98.4253 269.11 98.4244 cv
269.123 98.4202 269.131 98.4097 269.142 98.4045 cv
269.152 98.4003 269.16 98.392 269.171 98.3868 cv
269.244 98.3535 269.313 98.3138 269.375 98.2627 cv
269.39 98.2523 269.408 98.2481 269.423 98.2356 cv
313.584 58.8083 li
313.593 58.8011 313.595 58.7906 313.603 58.7844 cv
313.699 58.6926 313.776 58.5843 313.832 58.4612 cv
cp
f
345.575 49.2416 mo
335.366 57.0622 li
345.159 57.0622 li
345.575 49.2416 li
cp
372.217 44.2128 mo
356.057 44.2128 li
363.944 48.0844 li
372.217 44.2128 li
cp
351.932 44.3712 mo
347.565 47.7165 li
347.104 56.4378 li
361.721 49.178 li
351.932 44.3712 li
cp
375.505 59.0356 mo
361.579 59.0356 li
371.65 81.9356 li
375.505 59.0356 li
cp
395.264 79.5462 mo
418.236 59.0356 li
407.74 59.0356 li
395.264 79.5462 li
cp
382.031 85.8011 mo
378.91 94.147 li
390.327 83.9527 li
401.763 65.156 li
382.031 85.8011 li
cp
368.977 80.621 mo
359.482 59.0356 li
348.346 59.0356 li
368.977 80.621 li
cp
351.513 65.156 mo
362.947 83.9486 li
374.366 94.145 li
371.241 85.7979 li
351.513 65.156 li
cp
335.04 59.0356 mo
358.012 79.5431 li
345.534 59.0356 li
335.04 59.0356 li
cp
376.639 63.8018 mo
373.045 85.1526 li
376.639 96.7178 li
380.231 85.1495 li
376.639 63.8018 li
cp
381.626 81.9366 mo
391.699 59.0356 li
377.773 59.0356 li
381.626 81.9366 li
cp
406.172 56.4378 mo
405.711 47.7165 li
401.343 44.3712 li
391.553 49.178 li
406.172 56.4378 li
cp
417.912 57.0622 mo
407.7 49.2405 li
408.115 57.0622 li
417.912 57.0622 li
cp
379.756 57.0622 mo
391.709 57.0622 li
388.932 50.6479 li
379.756 57.0622 li
cp
364.344 50.6479 mo
361.567 57.0622 li
373.524 57.0622 li
364.344 50.6479 li
cp
359.478 57.0622 mo
362.001 51.2285 li
350.252 57.0622 li
359.478 57.0622 li
cp
376.639 56.8579 mo
387.391 49.3438 li
376.639 44.3086 li
365.885 49.3438 li
376.639 56.8579 li
cp
403.022 57.0622 mo
391.275 51.2285 li
393.798 57.0622 li
403.022 57.0622 li
cp
393.794 59.0356 mo
384.301 80.619 li
404.93 59.0356 li
393.794 59.0356 li
cp
389.332 48.0844 mo
381.059 44.2128 li
397.219 44.2128 li
389.332 48.0844 li
cp
f
376.643 232.514 mo
397.336 232.514 li
400.426 227.529 li
352.856 227.529 li
355.946 232.514 li
376.643 232.514 li
cp
348.78 263.3 mo
348.78 283.174 li
352.598 280.333 li
352.598 263.3 li
352.598 246.268 li
348.78 243.427 li
348.78 263.3 li
cp
396.116 292.113 mo
394.102 288.868 li
376.643 288.868 li
359.182 288.868 li
357.17 292.113 li
376.643 292.113 li
396.116 292.113 li
cp
354.211 233.371 mo
350.955 228.116 li
342.886 236.607 li
347.721 240.205 li
354.211 233.371 li
cp
357.499 287.925 mo
353.35 282.206 li
349.287 285.23 li
355.268 291.526 li
357.499 287.925 li
cp
404 285.23 mo
399.934 282.206 li
395.785 287.925 li
398.018 291.526 li
404 285.23 li
cp
404.506 263.3 mo
404.506 243.427 li
400.689 246.268 li
400.689 263.3 li
400.689 280.333 li
404.506 283.174 li
404.506 263.3 li
cp
406.412 263.3 mo
406.412 284.597 li
410.905 287.942 li
410.905 238.661 li
406.412 242.006 li
406.412 263.3 li
cp
346.872 263.3 mo
346.872 242.006 li
342.381 238.661 li
342.381 287.94 li
346.872 284.597 li
346.872 263.3 li
cp
347.721 286.398 mo
342.579 290.225 li
351.224 298.053 li
354.211 293.23 li
347.721 286.398 li
cp
376.643 294.088 mo
355.946 294.088 li
352.856 299.077 li
400.428 299.077 li
397.336 294.088 li
376.643 294.088 li
cp
399.075 293.23 mo
402.063 298.053 li
410.707 290.225 li
405.565 286.398 li
399.075 293.23 li
cp
398.387 281.052 mo
395.593 278.972 li
392.451 282.545 li
394.686 286.151 li
398.387 281.052 li
cp
360.404 239.707 mo
362.553 243.174 li
376.643 243.174 li
390.731 243.174 li
392.881 239.707 li
376.643 239.707 li
360.404 239.707 li
cp
354.899 245.55 mo
357.691 247.63 li
360.833 244.055 li
358.598 240.449 li
354.899 245.55 li
cp
354.505 263.3 mo
354.505 278.913 li
356.872 277.151 li
356.872 263.3 li
356.872 249.452 li
354.505 247.689 li
354.505 263.3 li
cp
349.287 241.371 mo
353.35 244.398 li
357.499 238.676 li
355.268 235.074 li
349.287 241.371 li
cp
376.643 245.146 mo
362.453 245.146 li
358.781 249.327 li
358.781 263.3 li
358.781 277.275 li
362.453 281.455 li
376.643 281.455 li
390.831 281.455 li
394.505 277.275 li
394.505 263.3 li
394.505 249.327 li
390.831 245.146 li
376.643 245.146 li
cp
398.387 245.55 mo
394.686 240.449 li
392.451 244.055 li
395.593 247.63 li
398.387 245.55 li
cp
405.565 240.205 mo
410.398 236.607 li
402.332 228.116 li
399.075 233.371 li
405.565 240.205 li
cp
404 241.371 mo
398.018 235.074 li
395.785 238.676 li
399.934 244.398 li
404 241.371 li
cp
398.781 263.3 mo
398.781 247.689 li
396.415 249.452 li
396.415 263.3 li
396.415 277.151 li
398.781 278.913 li
398.781 263.3 li
cp
392.881 286.891 mo
390.731 283.429 li
376.643 283.429 li
362.553 283.429 li
360.404 286.891 li
376.643 286.891 li
392.881 286.891 li
cp
360.833 282.545 mo
357.691 278.972 li
354.899 281.052 li
358.598 286.151 li
360.833 282.545 li
cp
376.643 234.488 mo
396.116 234.488 li
394.102 237.736 li
376.643 237.736 li
359.182 237.736 li
357.17 234.488 li
376.643 234.488 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Neyro) ()
%%Title: (1310.i012.003.P.m002.c20.Diamond icons.eps)
%%CreationDate: 10/16/2013 5:50 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9?5dP1TJ^9?l##A5CbN*<iD,hNqI&ebN^a>u`A!Z\kl9/8LLT&9NJ<Hh(fai<<[Ej.^@k<:[n\[STA]rP@u*YmF^<it5i
%.(9.^c"X_"e'`:35ODhXpZU#*qE`K?[RI0$*AiCLJ%sa@#//l*]@$'?<cabFrDmgf^OT\hgrH)8B`H3i)h.Geq@n+SdrN,6PhY#k
%hp9u$NI]"tFai5#?8)BY=ho5be]+6tlpLfG[aToeHh<5;8q/i0qL)HebfXln#MV[i0t:clBArGJE)H)s]7.NODLHqj9aa$@TCai$
%q"t@6%*!jJ(?!5<.6.&,NBU]D/ntQ>lp&bR&<"*4%RPKkbD(jqlE5tn)#qVc!V2joLAr>Q9E,=uXQPP4alh@70B!m3Dd_TH^sBUU
%^etggA:YMQ1cu,6SVH#4BG5OEb$2DfrZCedZ8(\U2-b<5Pr;<M)1[CX`:)*N#=%OjYLVF/^omoIZ+#F)s02K@fL*J'!dl\8"PrgS
%H65[h'?oLThegts#2_Pj^"i*s4&pmj^L`<J^O$RbJMZ&?!RcESkA#%'[tA;3ruE3ml=,pi:=)%:+4EQC%1>^?d(V3WaLSGu2okIh
%Wp@g1aY@c8ln/Nd*8H[)@(j6krM&.P?"ORCd*aM^QJ:5A/`KAmcais\KM(*$ro_E'M7!EIrI3+Ve6r.;k&*#=VWE"4EUKr0D6r':
%/O2mP<!:Ka!Rj!](ZO'10D$1l1$AmZ#]TXK%3=^c*;En@pQkjAT'eNAnDe]$4m;7>cJ/Bq^P,"VI2:n(K5/0WKh\]2p<LCi?_6Bq
%8G7'o?,$_V^u*$fH,&3]3bCXmZQ&!#YL&X8$NE90s(:L+JdL-U)Lt2a>!IX/];#cS6Msk9GN*g.=U#+"e+1+2qB6ij;Z@'<pcu,u
%oE^as=C@^1&;`GFS&?#m1f/YD1mQt5"FV5rC;"S.rn#*J3AAX<LVK<km7+e@$jT`TiL_p/XrhaiHS)tUm\"cl4)25D&KuB$nPcg:
%h*19`0p@9MLJ7b5:@@&0I\TcTkk^jnH?Im86[fOn)UUJW(KH=W_e+l-'Mat^0hLt--JGKM62?KOlYG5prpos:92I9S?,'SS`lK?A
%ms2SM`\r$#W:tpX^Y6pBqJ!LX9>?*eCfseB7cR[M?m&DNYe3*L1baphG^-k1Y$2ubrCZkJga`6h_f"Qf(ioIoWEr$*m!!r?q.VFi
%n9;4dJfg>18DX-qTHA^(>(VK_DV%[mWF"-p[;O?c(4'k0#F'6',Q=bD)f^WT(RV'_HCA%uKL&fYnO>bA`^$p-<Nl'K7l5#W:#63m
%+PJDA1btC`rSk,T!?9_]Y0^mH$_`4gj)I..7O.@V"+mf/GD0Uo/c2(>RGW4D6=K&ad-+a2VeeIFoi_Q)YgF`ba!a\^EVMWn_mjha
%RSN2[\n;S-[Aq&f9(6.sM%L5HB*aJeV&T%LL<kC/Cj9%Fki6Ys%@VXo^Ag"1U'B/fG:%HXbo2YoRGSCph;H<RQnsXq9XMPbjBCrg
%IN?)1nHeie*TgA-Cg=&a7V+@_"*P[hj6^`'1eqa5$bq-4-<N^d>GG^^B"bG!?1HWWHdJl!gH=cDJl*kJmLGkO$WN4$GClt.0iJ9U
%U8E,c0,068-oB*i/q7OLjSt6I^e-%8c`PGZ\VW[c*m2_p\N^eNRIa6m#"#llXq.+Pj))EbRg4"%Oh'dc/q]Zg@5+#k&N#R1k-<](
%QCGp8#peZ<gcUmTnAh&q==t7B;\R>+la%2d'SE#Dj7(L#[=?H>_,[plRI,7^X>(Qg"(sGMkk/_fi+JV'9f'>JC@f&[Cad\M]5Gl!
%H3)e"T\$7AXl="8S8>r#"1QgdW:ejblLjlHGq\AgZN\gV#-qsNM0K!+n5gCs<6K0OrfjMQ&XuLkPW-s9`+m"9?$l?h3BD&7R@2rl
%/@e'om]KY#MkB_JUGc^&ANrO^6uUF8pT),=e^(ZmZ0$+up><i4)7BcpEmX<fS*a7[n$fSV?+S4MiMU6WE9lsf]+s*,_5PPA"rtf[
%KE%G;E#<')9PF>c!uh3R6Stl<=PRd&r24q$rH>m)Y@L95/cE4k*"#QF#esdtSY"O+$Z6eJ:]+?cjrKn8QXG9b0o6ekK;3U$ACqB.
%FB=ut_6dL-$F4/$R!4<QUY_o<YVW)4DkOZg?4CNZP:T70h'!82`+0RR0c\hOS+kSrqY.VpradnLB0kZ%D&fH.#eimYI9KBeG(]3O
%J<ZQrD^W/^S^%-.UT9b`q:q:B_<+`]UTh;p.\D41NK*$nRl96IgVV8#B"QkIG(\`1)3487^Q?R[YU?b_a2INd/pV[>>()K$e7?HY
%F8ff#f[#^tSTFo0A*$d9Jk`A-%i3H&=Lm2SFtW<A^'l?%!lL,Q;Id%Tm4?EaR7UIiF6,8\?@OdiR"9S9ZO@0=kttWjE(qS+e\p^n
%a\?ailjR3Z5Ki&%9oGr_.!qN%C[i9cBRVQ4g2$3l.p8'SGHr(3.5<q`r]n<QW'[7neC9n>A+C"7ZL#[t:<)`*M$t?NbBh_#DXY(T
%A2qT]]_#F1TQ(f*kdq[7:,PpTmL$]qL82)Ej-T1Sa4@+emre,h6MMRd?,&1\-E$+GE#Hr?V^'X3OI;LTq\ag=.@9lUMu@WXde(R2
%DRF:?aZDKXei&H00I7bts2*?08n,+!gKB8a_:5E:/=/u,n_&sSRl'q=T1*nYZID[=[%1h\2*.p")VIa!)L&Za)47_ecJfMFmgb*]
%l9IW_SGXrjIk52gp324dhtZ=5*p)4romGZcAlSE8jdkpJ#'=T_SeL+cmL"qC]bU;[MZ4h>YMs1W1Z/p(]dom^m8aE+k?"^:k2;[q
%r0STUNUI4VDEu$S#0^hi3dsUT$XR8j$$M`^]Bs2G@mnT0//la*&C,lc9FcejGGgRWhl8Ukai;c$>/:V0bdQl`5UB$FQ7>b;+>`hU
%bj;,Yk*7?YPb5)';C+r$(U0d@'P79S^$2UeaWaq&Dg=++cRCS3;dPA[SY]MS9YrO[[4#2Oj<#c0GCi5;^h[8719X-7f:r1QCJh)f
%?&QT!!OX=YG&[#SmCX3G@e<lI?AgT7[4#09C%A,"%Vek<iKRpmCMGUZjHT#mF?c@`WD%0C'@Z]m_t7c`+'likY$e-`0.cI[QK\:-
%dp#T"9r%[0P"2+0Q[WQ6p#Z!"1NU8'+6bY0Y1GFj@'8,DH>Th:VF%J'FTF7AfB2MT,ce<QR<5U^k$%.a>&E]/c(28Q<h!m4=j_!L
%M9tK=+4<r[Em$_"s7RjaWX]$l@WZZGEophqJHU$KRYt%%BDrcU6NUi(?iN3$lo4k"VmC?[dF*&9L/LH8r.@\nMFuVPeUQDJfcGF>
%J(br^@6(cnCH6"C^U5'ZD[l[Ss':7!E\g[j3fZYlYIb2Li:$Mb(RF/?LFIK)V:WNg?H/`qJ)4c9]ZZq`Wns`ZkOmEimjlEm6mqL$
%V+b?p[(S!>rlHh-9U]a=QK](6;cC=.5DXD/Gag$D3r*9X@@X@i_kcOIC:i/5pV>5D%5N;pI;3l?NDG`brg%q$/MQG0@Nu[Kj_&%l
%;N@VP$Y7>-?&^>-;7?WHh3hoD!JaNb8hh=0]>Hqb`j>;fg^S-#`%0k!nra05X#n6CMnG"c1PQ"$%!e6Aj61^QrQAg"cf28.UQ+=k
%*^nd[[nfX"1r&:a1dD#2rq##MG\:uEr]>c]1Ni[i4,bQ&]!doE\*%D<o/#;"RIC';*i"F'Ic`^Vo:;NLcHgm90sN]&o:>*$A:EZ&
%M)q;15<g6#q>A7^W.>@QR.U[>F7:(XZbBceCOT?0A_sDCf*!mMI/Q-?1to^a,LWMt>kXl-EYVr*c%&d!_jpsQ)8\DZPah%U"J;eI
%l64\fK!F@9/?>4q[E`HP-I!OS</->>kh8Ha#[2#:FFl@UXQgVh[@d,8,Nu=RKA'M@laK?T(//6'/<dN1kKbJ0Il@<PmQ>tWc_'"p
%<qH7B4Fd(>:tTZ?1H5?kp#_o3lAL$E\WJK4MRVp\kQD@i>K6<'de8^M1o35:)\r")m^+mK`1rr^E71VHm<bCs$>->#>IOafXQGLS
%,hiC:g+9.*18nM.G;i($Uq9=-G_ssgrS7KmqaLi\?07!1]2-(q1^d*lLb&tr?fm33H/`D,GaTpck)#FMian^+R3u>?)cJg##N>7W
%dQE)&_hB(fJ7kH>R^`dSXBfYVd4S.@rb2;``$B)L//QXqO%oO*4KACp?QY\VRmqOj]j>aM<H/ciS+JWdZFlAUl#08>g4r8^O%`6Q
%ELae^1g.h<Q<n"2TlWHg(39B]dpuS%m#L/^36mD$SAt0o)sHp.\ViFsI;.qQo@K>+o_#&u9>B'WFk`PFR7>FXA%2"b4Jk!$\+8_6
%fdALbcL@OK>)"\q;PUk`XS2I80BhF3FG!ad#+HNR0I,,h=nlftXcDr)hfg^EHc0h%`#.Ds&[Z9"j>RGN->dDp@%Mdm2J!r'9gaTR
%9^U5P%fKD2ALcXOmI&,u0d@&]QU/&8W3G6OGuFZuk]rS!))a()f6`9JDj1<jL"DZtD+PKJ0tVopBo6oMneh'_O"ieXf$rk;gj'rN
%ZIQdMj>!t0ffY<MiKeYYa-]g`50m`_o,(Dha7s;car"aarCeM#Z[U2IhY!pt^[\a<cVc%7qi.FB3;f>?<6^LdQl6JkbEFW^6$!Pp
%nRn^(1=X<fKp7nLn.*[1h[@T_i5ZsR<O2fgM=u.I>H<2)YP5)md_)hQ!Ob(i2_sc)XS!isf#4KJWcq;,2ed#VVB-Z(nejXfd;NYP
%>jXVs-"PAHo7qsQ>3NSH3,&;/cmX;(mfr_Fof[d`BY*%0b2Vr_GMC@n`g3')F?KOrdc2\##5tO>cdAD42J@WGSE?X*m(=!p.5[Fa
%K95p#+Fd3sB.?d$ZrnmRb(S!Oi(FB#mllT!A]lF8gaf\iVkY:fR&8Y:Q;*e7K!5/5[qscY'+giT3`*molS4+V$/5;BiP.NP\4cjD
%*m:C=fNlL;fi6fjR[Zfgo4W"_c-<#oGr1kJjt\o,o4W%$UU_6n&"BhK0#JV2;]*hl^hOq9c,7);3&_B2k2G)XS4c=:eguMrR?3hl
%Et];6/[O+9kYBk!g-sW>U3\1NR`i,eZQ7B:fQ.H=_M"n9NZmGrnk#1X)85f+p$YMshoD7+^"0pc'n^5K!&O12`r)OV8PiXS%Icj_
%LXfJP)Lh?o/]U0ENaJp_J$3J,)ts-C)d0JrU>9+[>fQ6Q:Q7uiLsKqq\,TB9<(=ls8h'TA(s\U7Jhup7g`AV9\9[rq1sr=2d_16X
%6@':;>NRSf:5r/p:eK+SFO0o#E*2e>q)5M?GD0,lDmN3M7[oMokLX:B]=/7>ebS=m'Y0*"ZGTu,Qf6m6_3:AU<j1tQr.&'(VG$WM
%@-kBMbGljtXY\\,8[AW>HF**U%5Tc,!WV'Mjri-HB%Z[Wn?Fc3C_\ebD]'5_9%uFNT1X6("I3d.Z:f[f+f(MU6MjNS2g;#MeBU4g
%48.n#IaG1k5uR,gi!?0kg_kPYCl;Qcf&*$A/%?1C;3u!?MWR+MgaDs]q*^!)L?D=Z`&U8m<d&nd?(-#1BV+R^6qrcZ?sJ\;=%1pT
%CiiaKPm)q?kP?nQbe(cd;=EuNooWSA1ofU&g%i`k`E?:o$PHNbLdQoim:oUi(_5o8:&H(^#ec_ZN4\c^AM_F"-&K0PS4&4%)ooL/
%r:@Z$`#HcKU,(s;15i))\q/'X.Wa?(/%0F91W]0K%8NqPo4Ko$o^'U??,]c``!jB=1\QB^C%Nienl'JuQWYbBR(cA0c/]]"Vu0tt
%V@URUGVEVWFSIcdmTicI1mKOQVhonXr@*DYa-cjn79@QbdpS$178(ujX53)PD6h^1N8Erke]0jcdaCnh)]?g:r76^S,\(bYn,!$o
%m*jcEh#*:k8W\9mlQTs^c.4\es+r(iJodt3";)<N!9P#>PHGEOg`r=-Ktt!AO`i5Ql'lDV\O6<[gm/K66+:+fc;MgJ%p>Q>4;@5\
%B3E;0("l/AQf0cU&3eC.Wf+:!@r5*b[&O@0WCCKVamr2%bKW);D9po%Y1\cY^+q4qBlOE43-ZbEW9^p=k?5Np0S)?I=R]knN;7-G
%^324#H&nFTe+;)04SA4dljB#j'cN&rUC!eP_RZY#S<i6Q[$=bmTbZAP,=mk&4%q`lC=U1^+VDpbd-9;.CEH$>k?aGX]GOo'>O!mA
%qS0K[qT\-:m5G7=mlgM8%P4PTCS(d@@X$22bjG6Ys!$[hp:<+`j1$1Pr7=ZXdAUDk]-j$g[G-\+S<`F4o=8nZn#njuji%j?g$o7D
%!G"[$#hL&ukp_nG=RZiebBW[Zih+t4XiGoAFSgjgicbpom7jY[X$qM*Tj.:#qsB$iq?j=o(>+.Jo!%!;1kMroQJ9<,ac[bDkC\hW
%"8GsSA%Lol3A'^0Ni`CeH(0)^!T@DBF%k=#rB:q"LFa;=n/ME$)ZK@L@)$_UbO+FUJ(8SIJ&.0NaR(ZQ%G!iLhoLp0CO/MZ"fq1S
%g%QFO^E7DWp<RW\n:f0n0L2i!V:70F$*j9pDkp\:LO]9[IWZKu(/F)8-1Q%gHMMXklrUC-T!iDO%"$^2DL2(b9@I_[rnptG_go1@
%`Z3aOTeoPTSrJ5=9M;JIi45QC[\)kTY5"N4s3ZE.T&U(p%%rIVqo+Bh+d$]_Q5(NON"sfgba\Nc;?2T5IQ[Pa4DQlpW;fXnE!ba,
%)8r7BmHU>Nd87sR"$n!!Y"/Ob$N;npXoY3Jnf^5Y[Z&Qm[#P*d@;]eF;'tYWl*W.bUXOq;Xkr;<^Y;s3l[M00r*aD(+0MIWs6J0u
%WWb\6(+M2qeZ3*ECKIkUflUpP&3R#&n2#CN.nZKenB>=fInSF)5ZDTLRnWA0'BNCNn'Pi-;UdFPPt<a:m.?i)!\/ohT\"*@s.EP_
%#V9nkqGr)X`tI.`LsuAPMluc$oJ"[IJfJCceGk6X*0)]?qHpF=[R@ZMrbM)Lq]pthY>MLKNZ'i./[oa3pl0&CcLfe!>!qr@ip"60
%gGb(*&^"16miJt"/BEf&'rM65Se..+j"n+VREn&?pjf(f[bKEmF4Tc3o2H%Aqg7/q`V@A'/LK:f@f-I/N'(09+5=Le*B>XTiTpHE
%m;fhnoZ'1]!3OT5NSrOAEQ1hE:P8^]6[k%=f_;uo5p%'q9]u%k8t"%"GFGB#!Ro%dmDm"\eGIp@He<L>(h/FnCpeIqlJT7WcG^BS
%GF/Xe(ESh*s0@H*o4HW5-On\t2Qkm#f:2G_B?YHHXX=1bnJiK)c[slrk2q-%N=%WYQDm&HJnq:=^?>d7?N"Lp4Cdb+"ii>]-@S^c
%ciie`S'b6*:Q-ARf$4!IAk_2"HQnb$oF.9%:=R.,kJ&?Q*R18GfDPWH)gaMHN;$[4k!;_3j^f&rV0-&*MiAjX*FKG.XGh&=T=5d,
%1V[o@F9[_r]M+RVIFR\`IH*P$9GSRM2g&1E?eFmhI^agXp:I^PI>TDMk<M%^<#XN$)]D0"Z4(Mj;jKMW_&AQHCh1/2ElA62X?,bD
%?$m+g&?49%4g<[=d3TO>&\>BX:-C9%1BI\Xa;GCj;RGK9C(Z`A@;>YPX!FduC%mfFn9L;+@pp`d)"cRn"2EFu]$V_>k(OhqEft-W
%=06Z=W]fPJ;XHd5qR6'']A`Jd+C[TK@d2HMY2a_X/eFp@BLJ3:12PqZp06W'AfIlb2O9-VRss\$h`HdYB/,)5_+FsgT0_lnpq*0Q
%Wn%"G=^;=R69`HSpBLR+O@PItONJRH5`.jWLtlC)h4SsPY!XJg[&!3d*n9eS6R=elTEURU[J"[a+X&X/I+')dId:J$?Ndq<Fsl'?
%b70fI+*@$]h*1T^gVCe+U`[&EmRR-6R`6cGZ*pO89k)5#dQ8M)jXS*mTHU]]F7NL@/X!jum$%a7L.'r:-:@CSmg`bm/U&76"IQSo
%D[![X^Y?I0SW.WkqlnU<eQ@qH9WB:08',a@jtLJ]o)#ZZ9"X@IE+aLH@(=r)[K]>-h47HFXnqo,*jaeS6SPe\N;Q_kSc]&k]ckV%
%U>D#KhYnC74'4s-N`ah$]`V_uLLPac6s]j*PV/-`e/hoTo&ZLZ,p8[b:jdSeBET?>!+d1+jceK#UYSO;qBriJ]jUI$0K"9i+YUTf
%jau,Bc&YIER'hF?k-qO"aEG/s&qG\8+NnDW+N'@cRNR6pIci,M*ZBo%a0,RAD`'WThjZp,0k=pPbgEFK"uTX%MN@+uB35o>XeL]s
%nLF_#m+6gAZhJ^p#2RmKotruR\KQMUeH']jk>(<E>5Qn_p.[I#orGuEV`&kYWrF(G@-[K4bS[.A)5lttrtDeC)$8Q+%(`C#_p-Nl
%EaR$0FgM(RDN;)t2sOs$>h<u/@$>)to`e?/ru#.Oluk2E]<[oLUM`c"QB`T*Ruud2CFD0*\Is##,DOT%IaPNa;;<+6*6":T3uT?B
%1U\MIcCC[+`OP9SX#,U3h(ek+)`VkT6^b\GkWfCFOJ=GIi"EOBN%#BC$#CU5b.5F+fm12\[H0apDRMXAF%*iiKl22e'e8]B_BS&)
%m-[NMX,_h5Z+alhT2Tkc6f\OY_89't+PnHBqFC'tEcUFZi?B&DmtW:T6`dcFS.`\Ho_ncNcmJ)j;7=hE'9:b+j64]*5LE;dPt%Ms
%U\a(eK>^s`6`45J^32."Fcosi:)Pl:Lc?fQ$,"o*]3>YX6g1+GH/%c-J![1A!\Tr^.m-TGf3*"58sJFAl1H"k)D@C'mkR^%GOAk>
%XfJ!f2ufp1Suip[/lm?2nP=1K0s-TM\Ya5AeniriL=1;d;B8>Ea4#eq'j"!/QKP0qA(SN>#GZ9U2J1`^gdb)@(0g>qa,d1MWa(2'
%A\p+7DKuZs#d9pJ2AEOB2I=-M6e6rhE"6;\/U-nM=6bD7Xe$@U4"FN]%I5J,?c.+[##-70bpXTS9r%1E1VgY)^M'U,[Q^E3Z1451
%+h2\hC?bK<lM[U;\VBZ`>P5pG3!$9uS:G=<)r3X!cBoqeR!D0q7BUQ6D7?0`+7iXe+^OKdndnBC,5(!LQD#nV5uh7"]Dmn3SO8mo
%L!_'SS+OW8q4Ce.Kn`5>fo-uVaklOM(ef;,:8@[_)@k\bWib-c]F9er&F??p]Fe8_Ai9K]rd"lK)IA1akG!6e%pG@hW/YTD_r1Mt
%#,Z!;$'&S?C'u$=YP1t8I&c!?VMA]W]P\2/?.]^1*9NV$)J8c;eS_uTY"].C@D-g?QF]n!8]mS,B.M$q>0pU/D*sC'Hl\mpX6iA$
%+FF+]HHE&K]#suVZ-,Y0kfiMhY2b.jHD!u4,E\[B?R=%.`i=<k7lG;^h5ajk,oKlV/'6.??-+d?4E'oa[Dj%0ar>K7kO$j.8eKhN
%#%sWC)oHj"#O"YAf:a/;bFd>4j1E$"/%G*Gd@']a<gYb?_sco:#TJ@qC<=k^iJJ3#oe(ZK9S2ToJ2jhaj_V)<"Vr+WQ7Z3GZq!Jr
%9f-pGR?50Fq08Vi3poQrlZSJ+IqF[RHBDr'U7j928j7S=^I8TWRX@e-Yaa7jg?qqpj'))X@hEHQ)h]\X2lP73:$#VjPV.TKA)*8c
%XkQL9PG-`(m:>LnG9(2`Q@kLI,n=9"[IRP(p@WtD22aKZ6g]"pFg2]?gCW5mEok"%K7`(D^+AUjmcBgRS'J=RWb\(!jln2LhZV8$
%Fo-o=S^7WeVg@Yi*hnel&ONo$qc\b-C>&#^Wc?rnc]l&F_\dim_N2Z=):W].rQl*%2Z03a5ho,T6Eu'4c4#8+\Us19;\!Q^`Qk7W
%DL&SqdDX"K0-/jM[H4fV^Y`^`C"BnrGJI-q?+7)kXp\j;gC)`kg=VBR^EZ@oN*DpmIQ4<6\'K65#>tlQe:Zma4$)!9eQ[-3,p%Z[
%U1.LW4]g:Hp7sQp!f%$HGk>%PUUS<U<_qUd7*=+tMF4b'fHFFum@H;.4</X4)/FC0.=ESd?1BiN]QrV+T>VIS#)X_\mNiAH`tOBm
%[e:5M5V6e8Na-tUCZqUk)@rN0HGncA<@PrBAL*Z\oX[Ch/'@VRfDc=!qa's=M"im>]HVQ-]Be'&Wm1@AR]%#nW^F`_P.`?$<M@T_
%;=VMj?@:uT]#C#W]4G+)c"dp0,:35`Z="gaa07b0h<H<*'3%57O8l"2g.JV&F`$)VF(`P$8t^*<oOu;joB"ihc\q*:c_%<7+-p4P
%O8"ru)r9oDjm#;#hWsaGV1g:dF[+c1BYT&)ANs;QGea2df6k,4q=8'?UH>D8jXko4IDehNJYr*4hb+bYg;AoX^[f]/esAG2NSYV&
%"fBsTX5*$`<j2D>Mc]?s)s_*T\64=\U0>_&T3S2SWmj5LKMJNEB[upch(O3V=u8Gq0,9rC9!>I?fY:[=@6YTn9BO-UiqLHV':>Y=
%Y.["<3ncsA4*Q_BIK!,(g<:Y"SlKX:qK6<HWr.!L[?keaQBiR$apZt3F-q^G<W70Q2^k5H4`Q@=NQ-b(oAX>2o@!HQ@MJY3\5[%)
%*ujN!T:GD%@*u[4^FoM#_k/"M..,N-mM2)Emgfe]b7@d(&Kgr)!2f;#0.^/5Wn+e9btIYMD8#G[Ge@.+]C]r[A+Rh>nn'S#p>Yl?
%K?LZ;e\AsceJG^?/!kWuVQKVg\,PmOCAk?f[:81Db9tKh`@lj1jm_dN7,[=Lg?VB6VQna5^MX`heL/V\kIYL[:@l[#]&TmacAb0"
%]#,;e<`qCm[Ih%S%$Yh)"O;jteQ2"*.m@c)gO6f?]G)&!c@1u;n?MOt@rl;]_9(8kBAm>RV4Gs+K,;gFqle!3j4`ZrrTq@%)YZ\d
%&YSd5IeEcNjg0AE^M>!l?50T7g<5(6O)#JiI=8>(>4L2dQgZMTlJaWYrpU_`6;:i+mHjh48Ujlj;-k&g>!L\d_qT)^D11H>ko]R=
%i8>."ienUW97#ja`H*c\an,25g@r(+d;F[hL@OtpQCJ._'jl_hp_k`8/Nc85<e3grlX$i<9&qT.]pGVpao5Tu*0n5kQHiRgr7LT=
%-P)./g&$!MrhC"m$[\A^rR1LMrPup=YH&Hn:!rl`FNOpdaf^'G3b=5i7IrlTY?^pQEk5ERDQg.42]l=i2p\*NT](fINcS$47h`Ih
%5FQKtH^/5^b,)#D2k2plem&?>"o=ef]>^,WrXY%;$et>5erKV$$V.DtK/@TTi[U1SS+32!:C_LQ'"#-)&&E(1W]dr?^TG7%C#pue
%#4]P+\+ObJGi[Q+@^5>!Q/&Q&ERi=!S&*e@j^i?qF@'eC;SB5L(J\<nig]V[cJ#bu_YK[K6!HSMUd';&f/d81S0I[b^^J9mO#p,r
%0C=CmXi3oH*:YQ#_8eG_S&;?H1?o'7=7\-hpYb;u`T:.H=f]8$-odjkPN4po^M4b/#/@pd[CgVD%GMZe.X89+dhIgcCQ"j%??i;U
%jl=mqohn_bh=aA%*/%rtfCWp$2pFPbrUSG9``fo`IF8p=Ck'@#E['!5YNgCYX(44ZH[5(IFAJLA3aSO`9.Sm\c\gWW[:Z\k3c5ao
%/jDIO1#=I9"*Cu;g2HZTj(7CpiSaY)$$:Ok(sLW!*T`$:iP/YJ5OGZ(8>@[B'>"4rI^K((j7GC4>[4j1O.YcVIp"2]A*qRE:oD%6
%IqTof_\0^IN(aXpJZqG>f(f/gU\it:5>pII/YH3M^9T[fY6Wobp$0S-6*GoR>^qe3'fC*.gcch6T_n0-gVT)%O9Zu%4S/7g(I)ed
%]..[e?i+d<cc`5GI(sV[GZ`ia45*j<1f(iOhX'#Z%"DOh)7j0(=.n(_1,Xfd&dp)DildP)^RTrJ-WU-0cFj[8b:%8mV5@;C^YN*H
%d%At=_PX5t?8Z*RVp-S.$LHM'UI[OU)RX;H)=OPCh6T%ccYnQIWL&Mnqp\2ZQS\,^ph8usb'Nksm6KQT[U,[TU@HeM9bT)i>H%_P
%1nYm&@joM2Ha)dJ]>U&Rf7^3";/d+,%EF]f`+>4K((LYj7jG\A1tXrWV.e85=jJ]aYB0!eGXSo_]pD?8e1%K1gjI5D)\3;`2/3'<
%kD(".ODh4E&J6uooBVCF@[)KmKo!5m9k(SdmdH,o,I%p01ahb#q0I%[*-V1Xo0SNg7M4K0qC@Op#h.9j(,5l[/DEKNn3>#<7CUoV
%M)TBl7^:!IhT.qY<`/@Dpgj`EkQdVi(qg2\:(0]+"`%p:PchqI$99@@6_Yk<a%g*\E/aR4'PZY9!%3_;V=F>^n1.o\D-;7%3VdVb
%C6-:M-8InCYoCi:_Q#Gk?if-B`oJ2]1dlIq:d?YmZuGc7:,F-fr"#0WDi7#NLdj.ZZ^8A'Hf@i."c*H)om+A@NIGF;aO^f-#aa9'
%_tOr5([oVX"`L6r.e]WEg"G-Dp(tGZ<<j%>FAX-T=aRj,*+8l]dgsEA?aPTbSK7S4KJ<_no'+VMQY>-FPqJAp^>ocoE%/>qdYuqr
%=M'K+Kn:lH3g4R7o#&P,MAs5t-+%1$e"C[,HFgXilb<-lhJs-574:03T.8rS$.GuiAYhGKerHBCVU6H$*'[TYhHG<]Y.].#n9chX
%CU):V$hh^*YH+MOcgO"j"E20GqQf`Ck1msjZNtQld>nRhPQt)K]-mj/[LQcOA:/pm_1'codFY2KAj=0EGPs#+\9><,l(HX2hWT,9
%hj^[Y-SNTdFffuArib-_$9V_'[Dh<]KlX0/MV;i](&kVCeYTm+f)Dj9GF0_sW:mPO&738YpPM&FhjfB*k[V$/487(FeQVS0)rHFl
%D+XsQb##$QDB@fn4ME&Do;3\fNT3+mTcor4cA"^uT=3%Pok1+ogKi6ZrT@tTI`4nOl:^A9d=).%o(7mN?diA"5EX_S.#4<N2We,%
%<e@T-V96@$OaY(6miPgA3VX0PQ+!k;"lL'/>K=EC?W0$n4_Z:1MIF`_:9T)[=msmXLh)G:c-+G&:LTO#hpUP^_@=oRir15QRh*?)
%d`R>H0B'Ba9?-#$-gsHUp1)@X)P$21PrE=r:h%WE8GQH<?ES^oLh'FGpGR3u$Of3_.dV;8Y@s@j;.E8fHXU1U2%P'*q6,CZp1?>_
%+lmp-UlV)NYZ4c%&fIPJjWeDJmEN]K+9Io(A/L#)Y_jlr]u&`Om<a,,lZlRhG^n'"&b"/cQ-[bm#'s*nFnGI!rt*2RDBn%e7:q5Z
%DY70<`Pg7m4Hm,/p=(dUj@m/k"+A:H1H=L2^-6m?hJ*M6l&WKS)\)3re]R4;]D[_;rTVAb>@eo5]feJ)`Y1S,HoJoU9j_4DDsii.
%++Ql</JjF*hnS(>^KiBCDB44O,m@\g^\qm.>J%Q;B"O)8s&sc_oj\Z%@mmmH%-R4X`E.g(&Zb5@iGn,+$k>:qV>/&7IW<(6QXk6G
%N+*cp6k%_g8b/qDdd->-Dr\f==\0gU8*a<ZS6j?SJ262/Z!h!eN[-5LdB1.6QPU:pWa`X=q&gr^$/4A=drnrRcg:8EAhA4%MgoR`
%5OA,)$U0&]oV8ck2HG'W!1Fl.D=T3^bhd6q<<k&KM,\$`9.TbgQW#>5X'Ai6(K[#Omqqmba8N_e_G4hrM@IpY+&<4K7uL`_^=f&@
%roq&[fl6o76i7=0_B48VZ9oQ,gNcl.kG%5#<qY:tkEqh3U!q\pAum":/sRN^]Hp[biBDOebg5.9e]M*mVZsBj`_kuCn(lFGq5^i[
%NRa5X'?]!m/tNfJY89tL#DO07H[T=t]Bg!B")495PC3`'T0+'ur"\^#.PT#3h8@\7a,T]=Rl<j=\@``%aQ3`9!4`n9NuoF/:EM^u
%$hgl6V.Y3>.-1tSb8[L#^L&G`%en/\?Z'_<['5'\Q@BmWD#q8^_`W$To@8I`b&?\?I26^E,r3$<LTn0^0/bI90$Xens5#q9+7)<4
%3OPFBXgaAqY&@lgJ,2(!M-"Mpgfm''j;8P#(+)s25^;UDdBlr(8G7n)9q%F<e7,[d8)[V.3a;F0)8[NSAci"805C30@;g;Sc,Nql
%UUZ;8/N/reDQJ87^X%o3E]^rFh?%Z>ra-W1p:\dfgTGN13lkbTh0RK+qR1e!!2K-4^\*qC\6h3T+3I,fDi"-mX1NOA#<)9Kqnr-i
%gWa4D\`I:;(QY_L2n]$\U!8q>\'E%Bq>!+##YC#8p#UOkde;PJ0e-C,2K>&Y&rd:d?g`TjLLiWXNJLTO1iIt=5]2Th?>ZdYk`e?'
%XgqZ.Wb7qJlUa"PIW-CI.Ce#LqV'&7iH!O$hg9\BH"[lcEp^akHf+0A5(EM[En`d)=,!cOK&[kVJ8s<B??gNhgeCQH/G%dUmf%+/
%\bEt`L9'hDihLmRYXE[mb?DC&hN[b9YN0T7>2D5fo:ZZZjPgPdX3nkulD?V^M]YZT\;P\Q5@.BCfW7jQ"o#*>Tu\4rXjc*3E+,4&
%7pF:JAIG*E0ck$jT=<E@dkDM4a"D;<`p&E%LX3Tu9-;cP]ZVr=3i+d=c`^Y<s'k7bVU=9Qe-l/G?[P/1FuVH"#Tq?@VeoG703GLL
%]lk.YW`qH!Coe?E]F/q)2uaaHe\\;Rk1`[).&0G2=E..n&gJ"GTZ>E/ZEaE,l3O3DV/&<.^[fJCrkgrc6i.;pT7A]+>Q)T(pZ/jA
%]Y`P&=67:bqtXsBg0$M41Tbn\aGBoGXM66U(>#0BHrL9I;1!+DHuN\^2[`tGb*t'9CdfbKG@W41+-$A*ZN>L;BG]P"mZS/+VSQ:b
%Ie**Cgj21QfU`eI_oJrRkCkL,0@!@cVs3m4WaNO:\l772=PYKUXab^PFIM$>_P)7d4^sAjrPINGc.@[#X(OZ>lfDk7Mo`oKT<$6L
%!YFM]q)Lh8jQ5p3riNJ4HLpgN-nhsb0t"8fBOY0CU$tjrq;cmA3QU&.\!E&k_!_"S&;o=bBkQVH6]<i?V-s8*qh97?<fZ]li;rdM
%b\A`4PU*DHY!P3'D4'FEMru/pEIPuCW[WFI%Wdo-`ci>VHtUe:CZ*5QM_d`teUrIcbau`mW-b3lW:ksAds+\m>]IS&*kYhu@UPKf
%'Gg,3*W(Mj[*)[ca6n(V_:.dLn6I-_L80!RFu4Y1`?WFt%nj,#f"BDtJA8fb46$s^V6(2rR\/Tfm+\#5m["ur.1UZEZs'Fi;?48K
%4C6nB9ElgP:b(PgURq`mojn9de0-sG?RVENe2K;Ohhuakp<#>GH+E_X!moYLXp+M`<Hli&IOQ8-4Ns-u00ZnL.)=3C7&%BjaD*H[
%q6j>(28,iRqHX*W^@M).Z+9Y><^,@.Xs=]9>J,!`W!E'C`B*b@X>rf.?EKGbK>Np6ja$gta&k6KG98&>''LecheRQ2o\%7<Qe,HG
%LDPU6C>n*"`1[%(Yl&&/;>Jm,ctQ:AMT]dNX)TIj"!;P(`r5[]",dONUU/As2OnuLR_JEh$@P-EJJLB:'Fl&4acLCeLe[KAIoP.$
%^$D"k0.`@`an<:=@s"A;^Q<ZC/l\*@H1e1bgAe`hhKTYQ_76%K6aUW)6u2[\(S>Us?_U[R*42$?[m.Dn?bfn\:.c>Rj*IDI\b@W^
%7RE,sC+<1Y>c.nO\$]D?<KG5l!gg"g-l;S93ifm+5s+%JSijLL+3Zep<B'lWd^/dBeQFi>Juqi34'Q.mO.%&?gN$CKDeOP@Zp=US
%##F"EOECM$[,G][hGH&)ojkU4DA@?BNIP-E>$G>LH7gr5`C9s3@P')-LlDdY@6H3GCt2QZ&DHJVY"-6I:-3bE-nWO7Sn,cgn`/l!
%P3+#^(S@d1[[+WCmm202)'r1;?L(7:06QLPluhRZ6Z>m"rr'g:m>n.cbR9N^L47PVlA$=s>sCRfr6"R44;rWN3e-_k0i6k";-hY_
%Kmn;Ua'Z=5n(1+`OKNuL(*F0<GHb%mIICE6\*l$Jpr@Z2/"9$DB6D_^KC\%u(Tl,2qs,H&3l6D1OiGu0I<bf0(0sV*+)MPZS\GMM
%5!=$5(;N>RPHF-.ra5*M/*"],Q<pb[:R@)C@hXTl*,QjsJa>%>9X%_\co271b>1BTg[=Pc3qd`jrM-hW`!t?#'=r8dWk4%3kge;a
%nSUaH=9b>N1"6f=^t1.5i4un]?:ZqfWDbbP&%AQO9/Xq8^D*p7rPuG@V`]8)Bg%cSq<DdtrO"c'd,Gb`7-u^rlXdiX/d19LJUASM
%Ts09_Vs(L2N`bQ3`E/W-NaaD9ia=uYRa([ii;D`t@4O[Rr-5j%M9;:XpE"\%[f*dd@37(Nr1n8e>;!'`[VGe/n)C,Nl[=I?f+cnM
%rSH]b>Dph-5>'YIjVDEuXa?P`(pUkrP8)g*2WcS51#r;ILh^bdV0+)1pafRsGj,/9FpF"U^!d5oM+ZTD(!d8[G8cGAh'm)_F3:u*
%11+'#<]^]t2tou,;d#iC9eeDh,@],Ms!$*PDGjclP\tga@lKlH[QOmKG-T!`]#&UC<dA4(_oP@(H;bi1"<FFX=HT%t)$aYh.7LW%
%Q[)ur1UQ;J_:@(&nhKGi])IjoI,NZMZ&sqmqn;u#E->IsIU0^!*EsWZI?:Ap(`(QqNqf/?aD;5SQU*:Gq;!1F^C5/BG&sf6?bcDZ
%)74EIrb-o@b+TY7V1);Zn7"l4n)9=)-*2K&/Pj\.oP'1(mhZr<GC,G;1n\WrPm_>Lr.UHQ#JKWmX^&QYqrJLu>fsn$i;bGPC9HI6
%JZ;#=:;ugRY2Su$^[Wm8^mH1K^mE5jKBaa8GR).#qF)nQN6a';K0:3iWnZ^aK'L&)TQPr1qTFp2I7[oc\_=00eAC52KN_V<;)$eb
%`7X]Dr$Agu=S4iTDO)8W\(te#0>$U`:kE9LcbZE7S;1DP]>6R2f.eJ!>n3J2C\>[D\>TT*gHbf)mc?mETGJ/9AINj"C8dfp2'47X
%)QK-e8+o"aS,ntCgTCGU1<,].Yt9@eU:r*2m(T3oHBM&X?,mB.8:J;q**j&CB.^mTaJ([df1.q%VV\=aRB#TQ*nn^WdqLVL)l`JX
%Xm>i2&s%P`%V&9oNasD3*5i4Tl?2O";?oPKB=K9Nr_:)lBB!11fl#?iHhZ,*!"#"-s#NGDOGO:ioa;G*cMTi^o,+GZPT@HRXi?#N
%_XIC\KX-]5f@rXH:X<")@4>TZJ$lmi`GmimP1m6=mC(@=I`;=-KKd`,VEDHhK(R-5#NK]=O6ik@!bS<H)D6<tcqCl`mq@(4%ACXA
%41tSUr!)Tqc'#@Y\j!uu%-sIQH`Y($Nphcsf%FCh*NMhuH/HTT_/MQFiYqL$91d6JB6dtZH<SAP:2b2sSY!WA]`,S+REZ/RLVJ=b
%SSf-GK\+%e2q*g4gli.fMUqDFfmbhmBJ"CB0R<W0*[krH5r5Ys2oFQ.GoJI5GjSoiHnf8=pc=@F+hVO]qY@/^pAG&B7;jS,U,f`k
%kM75:qlMr^WuQTP=2!>Q30&$E/fpVqI;I;(hR;bFXe:e%_MBn[ctFC'8@Lj09e8^;jWiB6cOE+U%i43,s&)%,9U:?]17O+RCu`8N
%0?8/nVd&qqE=8J*Z[_r2!k$%7(+Uuj&m3nmO41c!.DZeieu-l`dni,[k3p4.bLk0#ebBR)]rVubG[0^rj0%n^8:je<RPoRPr510U
%YL&Eh,0t%ZCMW^EC<^i@qGak7lh&#/r+`Y,g,aYrg<r+t5Dp!NAr\IW>+YO/jCk[Zqe&W>8:RZ/%t%IRO5V2ADs./s^P_SFCr.k)
%Ja/qU`FtHC^Yo.@>G^4jX7Q_NWb2G1CBsA\KmWN#I_P^a)s?F1:NKoFR$fm,_o3'QQu8ohKUA2W+dPV0b@M$Vau_YmQY>N4$`shK
%j>CNd$=jf2,1&n>dpib1#lHX<dE,TD>cR5W3LAjteO5)SH,kY*>q9j(*k'HY=:L&dF9J8=>>,#;(L,S$.9ee:LNnhq@PL1]J077_
%!:#(Y6>Ru0\h47#6Gea8#Sp.ujUKg0]JV(_4N#<eHJW[!C1cO$b;++0Q"R6+A2$,)mkN1tck1i#KP<+`!-BfE^siY;E?p4ISn?nQ
%&a8I!k'4=gXUJ,bZ9?Rl#QQ42&Bf&ERLU`\,(bP^,-!3W_9+X%k0rmU!U9`<n@W<E#`3=Nm$Ie<VT[^+D)d@)8W^`MBae,S=6i2[
%mJrPHdt.Asi0_jl<Z(sT==d@LMZ"e/ri<k=Q%:J*87@qON"uL]ZFk.a&_-Fu<^6fh1<_#b!<,:tK`j,=%`>_r&^a98D]6(#C$QmY
%%9TdR\Wq>'k:k@Bc!7bK!.a4S7KPi!JZrT.q0jR8L-LAC5lf*hN+5rk@VL3Jj=`uT)0q"j^mN2q(+r3,VKY&$]!qgt!Vt,[+WCnp
%"Tmu1:;lh.KUAn_#mWb<cja5>CtfNGQm\?e-Bf!;h'@tJ4G868dYoT]ZrGl*K;*@+,hRJm4n"i**m$W4FOuh9K@E9p$rok=Jf6#f
%;(AHAR8dK4!h17r\.Bj+*3$eW1K'RETjiom'5E8gCo+[^M!MTp]HaXBbU7rgn:YZ@R;"+gZ9^*o%g5U4^AS&]4X248//07.\;QeF
%*F[:=pauW0H#fs&lGcB9&E&/c7"A^&EPP<e3$!gEAXXc\JZ)dBhQSP(nfNg)BuicHA5fWJ&I?9(gl)e6UdBk>6Ac?!0]R0S5hjX:
%.6TN#jg^&00,P?GVB!_/1f@:"r5^F[$S,m(.gKO"4.aCpg'10;(.tjT`SRg^_@V9G,6.uhl!Q;D#ssDLL.qY<2h\cX[sPBPRFa:M
%(+RE,]5ANX=bl;pb6+_B+H^h?""TdjN>)s'P_OQ*egrs,r$aNHl=A6\\Hk&hgP2RU"@+s`MC9Y^WWTJW\VQKK=b&LIM?CfI8C'c[
%!f"bfY[=n_@%:Jh>1m>i@E]96,o?YWSP/l*=G;\WE,<HiMTLeo:Kl>*3MlD.GZ_5u`9Jb$gm#]K8K9:>RsRur*g[dLq?]&MO^uWK
%0G!6*KMV38J)PX7N2gb$M)%(bjK1*gb+9Y81cADBVX3JlZr!__6K]cH0'#885_i/B`V_9dX(!\)l*E@fM>'(RjbtiD1\?.30i<PO
%@^/a`)"+%;HUp#9R__2mH,20=O`Jhcf$Rj4mC]DSo#V^SQpr(^JDbb7DZQjBZ:]gmWTN_>_a#.0*>$.F\Ut77[H7M';cDI(*i9%0
%c<VFuFr5</TO@#0VOJhi^e0>O-ig<YW7QRM/G/?nP"ZBcRmu8%Nloa=TeOR]K6c'+<$nR^DARq=?(aH6A9Jpp&-`rp&M5nG$0X`a
%7\,'M^$r)c!)l<7JNa+>F*$R`DARqe3REGjNp4R9#Z_a]N8t0K0#6%@"HtqM=FtYqKc]fMTn=_I/l6kKgVj0F`-&RKK^3YL&0*?A
%BgbJq"4Yl4bES8k-uO(9?D@[V0a@jl>/QUrJMBenEP!WLr\QcP/;Z@e"V2p`D_97(aSmf[)9E?oK^CO;:Z35a_EH17%V@W7T2&+#
%b:&#O,7+Mm(ILKNj_,qgP6UqiiNX/*YS>n!.4O*;.;i9&,^Z1Ve32^rQ'#%*)Y*u3N!9T0a>R:Q>3*58ed?P9HAYqX7s<a/aX[?)
%`&s6,!R.2#OSA"6//VWeJn8s?Bh"D$Q;+ZHmU!H[jb8o89]/kqQ3WrE,-T!eJh"c['5NoiDg-KBHJnB3b+qahj@kaO0J1Tt^#q-B
%BoMgZdbShcH-rF.b@8Xn2E+eGmA!JuWU@7-4<)1(LW4N\'P0ZqbK2i3RIJV!Q=/McCd.)l!8=fj-7(8MkY`[pB^*+$ViuRZe5FR5
%)\Y"4i/P`h='FI`)PO7%!?02/\O"35SoOc6*HHq),8^/Ips7mJ)o>(`Hf$Rh!?!K;Z]]K:9kssd7G'4/UP"Fp$^m6B;90_7"iY._
%\5=,%kT?Ot$&THr/kqUU(sb62]84T@02\UG18OLnY76k]nOs^O[$E;M`glE)YTB+NM!]`")R5iH./B'i>i9=0(aE(9N-NMRB&(,?
%W!Nf(f1\h8:'_2_LIH5!OZ;1oQ7[cDkq=^8TAWPX/nGTNkns0o.BR:&R4`6RE,p9K5=JF<iZmG3_B"bA<<K5g\#boBj-_%;#.W`6
%('W%-`l+.bH!s@27npuWY&RppXL>c995J&m#Z\5>HCOd<*r97!dMWn[HU8gB4R3;u(mrJ/Ss[]3d_dfLd7B:BbBh^WZUBin=3;79
%\I,_nKjhbD4.%B/MUeMm[0&aVM.Y)WH]20@%8#o\\*eO=bAm1pSio`mnY^?1/:O8@,]?ti"JQIc;^-Ot?B?oO(D>\;1UPX/F@4u(
%K8[Tk"ue]aXh.,U7kePl8@kd:4bVQ$GW9[Y_$$a:fl:U*^$W>"RF4IZZ?S,u2OV_YRcN^J-Dg-M;Xf?nEjIT[6C$X5ELCFD3$RTA
%Dco`.-d8p1&Z:.Gep/lQDE-7rVP0uJ@A:Z`<9=4;B4rHHnMF]iL-LBC,-TB\UsrBM.+To&1W"tO=JKE95[DP.k--:P4dZjE,5#AC
%h0DH876D4I_ha]p`L.e<QIS#mN_]C(($oV".=>XMY_CW44`:9Bk-qmq!+eMF_VEJE\1,jJ'EC(IT`@Ph!3oo`-69E=VRY_M8%:5T
%`b43:X!jXaB"B0XJ1KU3-:!-;>N'l;""*_H08DN,m:8J(lY1GXSs\J[0u/$<jPt2b>^4(@EF%=T@t<QPn^CLC'(/I32Ou#NK'?qT
%SH8/9,>pF2i"K&EEge4XR,e_l"dP.cQ#Lp)!@08LEYY_`OlDl7EflsQG#<MXSl`QYLehj5p(U"/4U25F,46(!4:!9,9[4kYV@Dd=
%]-9nU3"3K',O+2C)b[2)40]tKIILcL4(O"K?7/j#cZ[QXlAMA$F[uce4i.:?#(aN411F*1AB5%c]L8EUa*:8hj[^8c2gI9<89?V-
%7!N8KAj]8q@8W(<P'E3K`R54jfuET]=Ft\:4L^<+N?p,LR!N&ulp)L_Kb.e\Z&StLG>(&X%m<?DY12j[T+ktKPcc3?cf=^BPMA(:
%KY/HAO3JLX?l%)=OrU5Br.^/LgOp&\>r``ufL)5L.82"J!#.%^:6$$K;,.j\b]EZ;n6MBP(#]aFLNKX4*g4@%_?].,naiN3AJF;W
%4j.\`N.i5`-G"$00pmjXg"%Q!7[U]SOc'qf-uIL6>C,(/??g!,.$\;IR$#3aN^u?&7RfrP%I&>rldPEZjVdT`(ZlQ[n/WKoIKDjV
%J1FkV4C]N?`'TpW.;(BV*fbr'E-MpH,4G.\[u?*%2&0;^E-=@(LPlX?QuNlMJir<EX%ehePk!l@I*/rkEh$84FduuHODE#sh8Hg#
%>BLD>p"m-qJH)Gb@G\u`Q3)6W2J"Is#Y7ddFc4[i8jn8gf9%5E/lK8J7_S2;$p>OY#0iMGUIn5@mjQ%-A;"/n,1n&8+1C1^i"@37
%UMQOk@>&7qm%H3V'e92XHA($Z@^m9:4AD5E0q-5t<<J^3i=G\`QE)P+5uWT:)%.s_MsB(RPh6Xl3Q)^'#_<\SSW#mi9_0VG%l9G$
%X\bZ3*Vl[K>#jc@pFDpA01[&12E'tT0AH[lcAO9MJE+MG0IE3Y5ah0O996+_YbTF>Ji6%6$lScIf+#Xg0Nb;[@c2Vg.O#?#G!)X0
%4@(R4HS"=>nWBb]6G>`]cD%'7eWWeTEn_e\o)&J[F_H=%%S&m/;G93NYcV0cY!d,lZ^LHi[nV::f5.a4dO/jg'p?<C3KF/\9himh
%1%9o<b=gpIOoDf0'%si>o@uP,CV2o9a^cOi^r\O#F9GcigYhae;C/"\eR`0cUBq1_`l_#r9IQS+4L`R+^aW@j)_4FS`Ago^YBaFa
%oaEf68kf__<Lr0D'ZH_JjmGCXK1f!]qfiBhU86fac(eh&'eQ7-j;$4?*#K)%pU3(2A8@;r(D7nDTAjdnT8J_`;0p1B1=D1UKT^p_
%:NP9F9JV6(Nu0WH=B*@%MdJ=Q7=(I_U&mbiV&/Za=p[0!RQo`%M$]n-CF$l-W\fn30V>?NX-*LD"Ii;rNqAf=oA$d0,eY0Dh]6u0
%@FdL1RDRH3pNjJ+%ID(TU_k#L=`-=:PYiXf%8W=1LoZ5`T&>f%+_Omd)?l+8rG!$S`n2b(c#)p(%#:)=9dOgXohZ?5WB)O:SJ45O
%*qm%a0-*od8ga*\WVXSUh7+Q,PeSV!X&;fY*qcsAWcZ`=JL4iYaIrttD5#PtVW/l89rYR$Hos:\QC?oYZ&f2"L5'nQB]0`rMp4f!
%)IQeN)isRmh0]>YP:,PpADf<Q"sCS2`=J1BIS0k6d63;*29I6)oc\9JE]PN`**X[<Cqs8!9aL)J07m/sVi-;$:05;E=rpe5M$sWD
%W&geB*-"!\"JnA);VbE!^X+\thN$L$,EO3:Q=EMuf:Y0X`!4O5RTP=Q8lrKA9DArE0\[qIC>2W.6h!ZK=g0E0T-hoZD25U@?$.\l
%]]brhX93e^e2#S)&Vq8g_uW0J8`3520um;B"N"]o,t06h#M[6<VT7po9PSlg1I/s&*-JGMPTU*K`26`9EWe]dY+NVf#DEXL``*u[
%Kao9<WA"u\X1PZp)_VRab8c+YGq*CS3Pb/9;2qE?N"0M5C29QpOA`#6Q;+jP;#%jZn?-4S=JWk'kTSI+G`KR,;HVGq'tID,?NNZX
%a3X>W7-mXhC=4WM>&>5_FqPJLPSF3@!Mkq.c6AMVdAUat#,e_c[bTh#SX?:lRLr'f"'th58-p;!.bio>i%VAEnqVW*8i\pB7=5F&
%H4hL7HB'-l/sBQ]1PFcX)M24RM)iY''$,+3":e`\&UdqdhH^1UAl:um@cEE3K,[B)h$u`u]Y$4UTT7%T`S9-=LrUc3kEN8,UI-F,
%#fWiI"S1V2G?R*8Sg,nm_sZ3`0>h"S&X7nf?%RTZ,G>Q4Z>U`:\,hhH/6`/RPRV,!d@IGK`OkH)SQNDIF?PU,W8&XI$qGLT"N.:T
%.DhO>c!ia7+BpX"T_*]m3PT(D2Vu_`>.@@u4`%d\/r,);;>.E]p,#)*'G!LF`c;\db\MPpaO/DJn?]:g3C7O<-4Bl`\s&?s#Oet`
%Wd*L!8P;!A+[iBLbB$Wsoro!u/:nRO"(H&:lY@,^TJG4l;s/pc??cbrTpA/&O&RJ0&kR8?F:_uPr4Ff5:'bubdoOs8Jp<YL\dh[_
%NQ*V"P>3sOBg'JB.&]5DRA?u,@3HBP&@5[hs+)d/U3X3g.OG1Z\iMeHJ2DM]\k&l:"s\=!S62k%&]_,AXbT`r#k.+p%O-rm?$K>*
%V>*LiVpQO5UTb$YArPcqJ2o/%BmQYW;`d9&P:*nq/<JIdi$>0p:+`u$^hb?)3Gp911r1+TT#K=&E2,!NH<d4ql8kd-nY"(5)6I0)
%lG49%^)\s<T3lf(a)t6)!e&.&eK+,]aSqVHek0XE,9:58k4''2$Dflq"kO+K4_8VLeCiV1nLWN;QkWhke3%1@i+N+O]5g_S/YHU8
%9:f'u!>\i=T"Gej<2Ah'g[a%E*G(2/CJ)nt(1?&63*&RMIbt:qUM"UG*UNj<#bFb%9Tk>9C2*5qK%'ogQq^T8E_hE`,NcK"C;.[_
%&].&/msp/EK3cc`3^<46Rt@2Tq>&[)!@hPhHmHR/S)_T*V'^Zm66/($)N?I^J7rK?<heHuEVY_%62=G!!-L/-.;dN@5peP0V#<7Y
%011MtJh*O>UdQhc-;ulV\u5bkM$9BOWC=OQAQTQpm(MFu[gGFb)Bq^c*rt7#]!V4CDG'0T.UKG4=$Z79]&G86OAPJ%@H`Q&-BBjG
%dHoqY2BG@JZ*g9.Z/QU^nmY0il%ZhlUC#Wh?&qhm5e<^<8ISEO,ePK$g*&VU3HJFs9\N[-.F9tTinTDt=Wu0O1#ho&4u?@C$>RM`
%q+2_Z!/JT]0!Lo,#i6">l[ciSr4Eg,giDX"!4=DuPpX81UPp-XeMUIm)D`nKhDEsoI`@6PQd_%6rc!=0aVjV.qs,G]UHn?G^ue'2
%3kd[`lf&h`j`%7UA6^i4-jn4=KIXD!SnO<\Z>G9HU0M#'VE=R-Jka3i'U3To9ogE.'@4's7QDG,D]81HX+PqNE\(NtVbEI!5n%V)
%hs6"5-Zs;Xn3#>;p=mu?CS`J="u21,J1<MOcM9(J7Rif/<<cN)GV8:'UKc4-VaWZ/+jd9cP78Xc.JY)@Jf'rVI;KS\\;&$o7\>@K
%l@^45fL/i5`AK(c);;ZP@Vr\*MX)7CkE=929(GIl%<*kt-?W'D6C0cQNbQG"+&<p!?rsjeB"H#P1^us?N.d#NAfNna`CI5h`/9+c
%?2bCrMOfBE0Kh^Ye?EsS&$tApZ6M2uKk4DiUcfCF!FK`LXMd<!7hA$XE[<`#4<^MOSRAV!WPV+l#*:'b$434&S]O;jb0.VV7(c@K
%>fuD@Z)hLu$'ci-M"k"c+#-;B#$%+U#\pr?(cjfH9%]s5+^oFGG]Da^7E>.GFNSU%g*[e)ePtdQ`IoqP@<fXZ%4<te&1=U]:2rFg
%1rW^NDXeMjnD]]%,%):W9Bd)I!s=bIQ(d51an5(F0#l^-Lip8kKm9#?c4AB?K:g,HfA\jN0bkYF*UI[+PD+d&VFLA-#JGAKT+u)f
%^LT'0Sk'5NUfh185WgW$9ML-FII$/LS;fhu$U1#W)5atlN2K?iL2$1h,;X@sH)094-Xul4#sh$hGAR9<PY,sY7Q1u[eG79u<eB>q
%@HDl-+,[HWF@R@kk6#k"];!YMZ\8+j+H@2f>.U$(F6M;?T*C7j0Un%EbN2ki$Zf&GnN;7-Lekb<4@SJu1@RW/8O4ndbiI4q3^0K!
%A;S0!-?\=)N&5U$NKm8j%s2e/<YLo/@hSc/T0^Vhq[Yq"bEBtQ'6=slK-6>7&Chtqe3'l6<V\2337\KWg6b'5@L@pWE^Nm;)/;n8
%XUP12]iikGiKWGl,,&lsqc()'"X+A4-YBmlpYeh7e!'ooJLWt!]ZEk;*#4dO@W+WoM,P?8ZGU'$27X,Xi30"p.UtBIYS\:n$)c!c
%dORq5@]fD4P&&]jBS3e%0XXOIE,Z9]>)J?,d;<#P9FFQj/lmZZ2sHV?D&k&K+LZ-n`%FQ?!<1(R)BA2t3JO5F%)(Am46lMgq.+'/
%nOSgM>_sAN]4>"nf;)Fq,?]DDM7aSaD]-\"e?KH+$_W;a7'&'c>E0n<UVK_&R]co@_W/TRLn@%+Y*`H\AEqn0glm9PTop/:9;!P=
%!6<^O3-%1Gn#)L#K4#7+`na]YgU"F2""<@f&cXS)cRH/B9h.CVLe"b^JU(a(gig'/W17nR'WO1(=RlWj@#&cu@3.g%/^k7`,ReKe
%\-s</+qp$#n`_o3`Sq?R:II?n`l'QaiF9<(i[TNA)5/k,pn^a8Vm]uD_ZNYS\T;RC(FR*KO:ES`p)B5O:JE&k',Z#8E0N)H>^sV^
%-KiFm,5`QU%RNuShWFQUEAf'B3'R7D<Oejs1jo;lk_gDd=#aG;kZp7G6>+BHKMcp^I6Pjn@IU;Oi^""m`/()N&\-emlS/T(Kk)QM
%]ad8m`=.MSC6(K).?1j%nfoKj\]EN7f(95qI,%S_T-RkQ`SsH#"U[dsFZ_5g,9M2R_=g7u00On(RVL@5k0j*FBY;O.CFtd9cl7/"
%RojcY!&68*,`X$7:Wq]_MZUjK)WQ")nu!gO*YoJMr9tVM^sP%8erMef`bS&Tk?*SL*hBkha,Qa4%CBYf>T=o_S3H^S?PrarY%*5`
%?05c>%@EC:A+a(R6*Ljh7&t.#o@FfcC4stk>&"+QRd>rdfMmsP:R)L0;^V])%?W$3]E9flPLjOhcf6Na]NA2]O/e^^T'OI&$0j2I
%\X"c;*U$iZPa*B=(YX.kL8JNAM;aE_2Qo.p5;3Js#8!G$Xs,D.,Z;Ah[Kn^"6pZVUo0&Uc!+NCu-"r66&u0+r&>Y(<VCb.Kn&]qf
%m4B[9nJp2VGp=q4Z`N(rFDn^ZO(P"G="(5q&pM30bnW!mM()(W*@;O0@V>0EjGP8pih1Vf`&TcROra)n0q5@^gf_O^J?rWuAgq"4
%^@>nF1Fld/_PkKf<=!93EP(]h?sQ#K/4h'9Gk,g?5ZOrm_-^6:##>nh3?3G4$<<b@hh+4m_Xn[P3F8rNoct**gHlRMQ^H>4(i$BR
%;js.%%&GD1Bp?&nU,L7A</r([$7eu!>rh8_`UAne:jdVR?YlS._9unpfAm88+X;f:n\G=JOiIYm$"FNWfVXj/[o$@025`s+6Utl`
%+\2`9;$S\Rn^P0CVXt.ABW@pd32J<#WA-SY\.TIY/%A>`I@(#?GSqA'F9[6m_8aq]T'IIRY*]brG;qlf1J@1q3_mQ9HA6h/7PV5:
%7Zb%c?QZ[,AK.+YBXD1P^%];TH^c'!g&PQXL$6pQFY(T&Um1GN&SQ8+rh)#<Z^nu^dc"?l:unnFc./32%5p4pf[\uJI3Mfh:G"Mc
%iR>c?H:W+&2A%mc@[79h5n,k8.L"BD&TaBfkSFAi/e:_I'aB,UJl(u22a48O.M#=.CfgJKi%pc(dWok9<]4gc/^ZCB`k_@?H=c:Q
%,9H?aOX)O;ntkBcI2P+-GUA.Ra$_7Fl5Vp\2.bT@W15tLd8%?J-(gS8<?6;]</%[#=jJncK2>H+V3`SiJY)(icO?6$/dMfWV/*pM
%2=S0aqH9-IfSU&oXCb\J.-bFL0DIk7ds3MSHFf'U@701>9^X$)ff\<96npY6%iU95VdkS8O"_qqC[rc[cf7CQ@jS9.DL"8%*p8W)
%j^qqD\SEUoV?q,3:f[/_$bT0,!O(?,[ZF#kZN*;Q@rr@@+gX_s(B/&?.J&5EN:J,E=lK#Z,W?cNH6PKR5oSBu.T8/Lj'2HG@1IFJ
%!i8Fa2af+r_Hh+89R997ZEE5F^/uW%&o=.GU"h(^a^jD5>fYlC.M6[a8RW_X'do379%PL@2hp#ebFo>a&P,9L&_]O[q;iff;!3%@
%L.ifa!sjLW0#T:RIkh!C0p@Gl/'X@%)P>6?EM]T';]pa^ib4:BU]Q7#%1VPbgA'Sg0/2DS/WpjCQadpI[*HP3+o',2_mcg4E<^$M
%K/dCui`KQ-lif=,\NL/7AW,'Pm[<Sf!7d'A81dN%Hq1VFV*km<ZOCh/m:h:tQAL;:QE\DCIRJ/aM'[T8J05md[^/8^n?<\MltP5q
%a!4)lU5$l9782_mcVp-q,=KbkWX!N^?Sf2[U.i*-*s<ZM%;i>gMZ>KFWCoUH)HN:_$k8T6-fSR*T<r5l02O@ubOotY89`Z_4tSJP
%UjtamD16WG[CAoZ3JY-?7Q4?W)2]a&O_u"b9#pH9%WCp:=*&Y<!Z(tE6[tT)_Lhcn8&Z('h`#gV-Jhp+A0X6q<8qL,[G[XESA,&=
%MfT`L\"m7Gjm=;qOOA(g:YA+*+%m[N$$Wc46Y;J0>BiA$VL7l*I?R#m>ojX5->G6)T-lNnN3Hgq#B^GNe5S1K:6eVO;fNo$-+_n<
%dR<G3@YkK]X,HS!'Q`]3S!^HkZHPfSbG:Jl8i9-]0V3#UrC,559MbG6Uel?Y\`,7P))n"GW`!<3JL]F9BhF*<al@DNP$u_LIe%B\
%'VZb'b0U5TET!eNh;j]Uae,W#;Etg4^M,!*Ko3_AUI'RcM)-$R'%OIjJruWoc4<sC]*QhC2gJj='YTd9j64c,L(i0N32&i)X4m(e
%j&TXB0*Z0Fd0VoNrrXeAX$I%?W#Z@7?KWFo%:Zu34bDZ70Y[DjW!9h%R:I"f.f83j$U;Zu+<Ad,&4EZYJi$/5+N,sYRZi73q?mEp
%PscbL&.Nd6(*F"@,m*&s9!YWIU!1O!IBk]$kc8,P%Y@r3_\PcJ#(]k=H2+chl=tQGg;9Hc`oB_I+9WVX]G>fUPX[uqY2P"/=S[KY
%+GB6.nLQ[;_(,)+Qq8&F#1RlXA.f0NMlQjJ4TP>s&mpG`n&T98J$E=BGJND:0Ek7>M/ra@k"=oQ(g/%N7h4QiZ4T>\ncUgq1'_2F
%1F1@2C1N`Q?OZcmQ8ZakcS.b+aEO'"fFE@e7'H`K#!j40Ys$j-*CHKP_$WKPOT"MKJ-i%h![U38;F"?,1d"'/.fmJFUg/U(J./VG
%70m>E%i#-(Xc#*1WXMHN92#U<O].%!%j@*BAG?F^da%`HXhY;X#`Q48jW@"97D"FCYJIVH[/V1:`V`+R@M=-+*QXJ'=:(U*JI"CT
%EL_\uWk9d3'nqM)0Z!-+0GFj#N!+nOimM?*6G@EP((WkL;'aZ0.fkdV&d_s0'ZkMUIR:$4!2?B,L+:!)j>.8CdT*)?jQ8k!LUN:G
%?Rm%P[Ml?1`KVji>p#ehebWO`*IsW2KqZ@`Os$dNdY5:<*+oqkj7PD2A9A$.c?,89C]l(_>n-uqi\#:](?(_ARC#=D8-i.?#Qng3
%/6;N?Gs",LoN#d!U'c=[Jmhtr)/o=b%aXF-Su?5>$\Gg#R$rb*O!U#3fC'+oN1R`$ZU_0Zd2Iqpg5rhUad&*N`>fV=^(B'-`/,OP
%'L;R#'?5!91Dfrt;J2tSP1.$FYAVF"O,-XV:34@5Z=n\'$Ud!/h-CTB62@e]p,SjHKORGnQLJpak4)Z,iIr9,;`jo%&Mk7/=\MXV
%256Hem#ToiLh&e2PCpDQI^BlMi*\`:O&#p5?'GJgLD3[@HOW&ES,B7JOAetqlUG@`n\!N9:I_7/bK()N%S*a+prG,"[e/B!`bSWb
%_130^@FYPmQ=OnroPk$4;F?>d`ZkVIp_(p&4\mc$7Q#:tY>!G9RTQbFJMEq_%!\?Z$\Pst_tcGC$+)CoW/'1<K5[(7E*nR<F_,lh
%!3WJE[LALUT8R]72$#!oD(cA-:YD\Y`N.Ha.D"<dMC-2!GI?Lp'O\<CW4RYYMZm2+&d0ra--KsnP&usto]1,6mj+WO]SnLI1#!#L
%@q'ES(C:hQ@pLH759>5tP/S_!4XQeZiM?kW16*%kH>sg5*1o`YM&LgRM\@e-+T,Oi0AKBX/Np$t9TC5A8A+BW:o+;$6kt#>=b%]I
%b-6b6.8*Kj0K#+`(XEO!9+eZ\I5]&!2(("\G]%:0^F<&?Uq]/Hg`EFdS"/[Pp\6SHX(Lnh;&"#WOcas4nQc9l!JZOUSCBVXO-i."
%5oPnuCpf-DM@b]i9=fJg*ZgSFEWom)r8H&D'GXWB![FP:%%o#4+iEmH:el]3`hQjH-\Bs((u[#sge,,!LeTgX?,#Vi16%1'<+($r
%:n<GOl,02!"a!UO$&f=OB1GEJ5PYa#/3T`'U4q2nR,VX5@o1,d@19ohB%h7V7=dqb#Li/_>cq[E9T=i]:8B5#X2*Je9S<nC<hMlh
%/\_ElQFPhT@E#?#@MMu-c\?Z]>EHS9%'mo0&./u^47R>cC8t*&/B[G?AT(*1KXY>c$*Jq]@PBnf&UH%o4;8Y+53K0j>mG"AVSgJ*
%;h39l9e9ZA]Juc8I>UCH766J?%9qVW-(J4hd69^UbYuU&kY,JX)C5sbMdKn_j!>IkAHn`Aa+qVe($_Za!)feX&RUfn85LESTnaP?
%F*C#($&juX6P'19PL=dp/F%VcEe$Z@%Zh'p!$_X9N0PHjk:\-;8#@J:;[@nMQqWU\EudE[=,8Hj@Oo>3:l2)fYc,ms/OebZ`B+,`
%ISs,o\]g""?+^=b?MHm7`'lQ5cdVs02nP"ZOuS165"(L"X:j&Cko*Tub/=S76r>3rWPhdK(Sig*SsPNi"WB,#cJK]Ljcsc:ONGF=
%YcQFdbqh$%V:S?LO%BF,?bs-]XJiW1klJ`<G\l^9li^ALnesr%1OhSl,mc>]:":/^Fek@(l+QiDY.0.Aa`k^7]I4BLk--BaDDd2#
%6*:Z4s""`_3LY=>)YVp.Up%kYLZ(s)06/QHPWm7Sg;6R'2=XKTeq<5oB9fiTQ#\&`B]MT3,:IH*Z3J90N0^LG4WUR'XMb)](9Tr3
%Qo^W:<>J%KE48;&,#'dX8fMQbH#+Rj:6GZ>;Gp14Y*6Ro)?V0!Qsu$mas!O;l([<N_-QlJTGUe9ou\1PBJd"3TJC=_0cRid_P9>%
%WohD.98N%9YDH+IA]MK]+oUN<i1;\cN)bSa@0&#eo8<nlI2\HY[N^[p&]E$nF4I[YL/u"OBFr^P:6-N!NOM^*acQKm1BpkW&\OaP
%q8I@<o>LjN2\^'imZ&\lnpSHgAEgYc,4O(AXu(11GXI5RQ[3XuW'V`P_s!A]Um4Xb/'/Zh+dHkk5/l)C@usb7,gsJ$0X`>L#k:AY
%Zj9)n&"-+o_W@sCL.5:X;In.>5K,CY^rS@5rJ*bX!TLFWpSo*dLAmGnh/Hc_SdcQ;:)@)@):(3NG#eo_'pD6%XaDoZ2*rS(/u>7Q
%*'t)"?ue;je52f1r^.PGMJc=E8lMbM_5\D#P/Y<_)_I2S6!NVf13d?4KXuCQ6RM9`X2O7BV&9XMUe3WEF9!+a]I[\g=$`3ZQ#'tf
%>rP(/oVcf&(qtY8HG/ld9<%\coHG$L7a+j.jV_=JC5sQeW$IWfHH9VgLIK>5.B\N-hBFmJ;.SnlpqSpRY2JQT=Cd/HPGQ`s,=Mg!
%UYMb<jXEG`@k"0&g24o9d3=74p@)=OfCqcfSZ8q=pJ9=W$8h=(\Q:4Yp!Qu<:F8["M!NfYl^OD\r)Qup4sHpT9?I6,r1=m.:1rVO
%72WL)2@eh<[A]3=.(5H`dkX@rm2Eh\,@N@g_3)f`%%/XY+lJ1_>o1@.A#:l#7X.[[:]h$J6+AEJ6>qrNR.oYar+'qMoVH=[#h>&+
%362bsk\.XC+=r'Rqar8X?%/I3U?lh1hN6b?1nb&hiFH;q4s;=\qWB!&1*dF2bespK^S/Q=[TKkjDfEbeeP%<U6;B(_YV`[)V]Zmf
%h2!okOKFG;R&2#lpmRf<$[RW%)KHUBpC'8\O&[`UHdJKCALcZTXi6cH*Ynlf?d05Xq="Ofi%^n27X#,X3',Oo/`P0k$QKUk-Z!*J
%:I%TpF!/O,6-uGR#k/3'd,F/;k?jl0(c!<@1,g#)i0U&AK(0h9=F<<DDLeP$M@t"jnM6+l8>>+]pCAqgaADEb"X1e3WM;hQiP]:F
%q"uXY\V&5Kd>U+lQa764P9(nRe*$fg"PNn]Uc#(c;',g`^kDcZGS_Nh.sb@j%9S3:Ch)^ipcHCC,s^[S('/s,U6g^:dfKdu'121&
%O[BuS7`DA1^e93PT.*WGp]X0@(`<%d+dO*Pj'74%.[NLFk[4pj),s(!&<mr`cm'>0Yq8N^:^gf&%8@!mkdh$cYY5hUV-I47Xr.j@
%:i1lINNj@paO'd'LeIAN3l_F*L."nV+#so$RN[>Zrki=R1$oOhjFhVgY&jfC8"L8X:qtA4,tW8*UrpG18It4.RV?Ye,hI%L`.U/m
%NO\8bn63,]m&2WdJKbl-C7[`t*H0$!Ur"l\9i"S"lo%$/Y7Ma,\`]o\KDr8i-2%m[2p%82X"ePQl7+mZi:J^hi#2T).>u&J#go1G
%`,S.f1F7dQ/X_O,)$-VWmlK#9KG%Zc$k:OB#nL?TeBCIrFKBJEJ%+KL3a&^Y:j):OX[ncJrdY]H:u\_e:Ei/`!K4,MdWD9ICoh2j
%&itbt[L*u^0o;QJObE//E#lsj*7(Ae2(*,\$nbkD2C)\+,!fq_+fJKT6Ed*IZK+`%1bd#3C)\Ng8>rsoOX!8<6O;<<(opc7[\R'A
%l`)#2QF%\-Q2j&hUtQXok"%>*.DdU@oNF^tYHV-IV'RO5boe72Qp1Y6![J_A(&),M1o7jPJdP:Y8"*\8k0rP]>],lK?CYIr9.fNi
%!A+UG4&6Ebp]:_oA@(PWE1h;)Cb]9V&A$i*q<7d'3F<&f>A!.eF]T!*#CsZOZI9YR'1I"N@LZFm63'f?9b*TTkD!:]^"[..rN#-P
%AZ#`=g31FJ/BiS6N_J%m1Q$Vm@b?;'j9?`[St&'%D=E]L"PUG#7dg<j7/DSFU[a@Lf-/(T,u'f.MkrK0kR0[=7m]1PQmYEl\!D;(
%&7>f$3K*)j3"l'F#dKbad(rq`U8&r@TZqa4=1X/>Q7<dEI$kfXG#e7rT=Q9jT#i,YmjTm\k7]gh^p$FeiQ.:Q>1h&nMH[*H&Mn`H
%>S(@9'KpiR<-4p?rUf.Rj1B6WF[c98Kgoj^YiL[/n8SnDB4m(k"gGjp-5/)&DhgboSfFJG#T%6-\5HE[Y%$Ym&[YSC1Zdiq6io\s
%0'8Od2s'=Adh!0JI&mr('MoGG49U6qN`ZA3\VW_NTt=c#L)L[HP]eX1i'f%ILNb'^VmF:5;lWaO8HO\Z>uMn2l(b#Nc)D&t.@spT
%nZ^3u)Xj>6A845j`s2>;1.te!O,h@M+@3N+;BSqeQ0cRT%gd%X+M"jo?i#"5%,s#X+-!F;BTBB%9ODc++qVV<8/d7Oj<5XK1C6`B
%IUeo+LaR?kYpntrI\>I-"R2d"h_tVbP9f,d'$-?.5tleOK2S$cZOg)K$;V6:+&rUBNZdt]Lru:lFc;Ee76G.k+bq8F'?Eh&#mVfq
%"G*Ek/d5gF5g`JsLh0:bl;K.9":`?-&[<_Ye[ct&">XQ(/!U6'*F2!/R1RH'AqMoMJo"_V+JG2/.M\.]Lh;t7-q]LbNbQFS+[J7s
%C.R+@%I(H%W)j;"-hT,Yl&"\%9bW=(8.Ti'JLi/8K$a;r[AB:r_eEsTYoa*gF9s_0OMm0W0uY22XK4ud6Ulu!grWQT)aSU\:<<bS
%Llu/>V&YZX:b!m`eZY&r4N?h'i?r`<s.?MKf9%<`UAL4\"mghROL3a_=,-&BjGbU:^ZliUb3E:u`WFmLGuZ1/kDL-lBZlK8OJF_R
%>O/[3IM"#$h[#I@Q0[nSTcNA*m9BG3)Z\Qp[+!@53]Vkm,U=3Qb=-CWVB>r&F,!YERI63<e&LE=cZ&])V*bFkT,]V@#qqLo"aqs`
%3,u"Nk8q4u)6Y.V+*Uf<'q/*Xi.S.Xi6)Lu_BL<TWsV+-&0+mCJYLlaSH.h!Y6^;nY6Mb3<He]R@'KaL%Qa4a6."q["5R)0-ghaq
%,"KFFGS%MTU-N?6@&2+u'Jbf2UaW)?VL`(K9*i6G9Oqgq(!mR#jtJWRbJ+*0&TDES2e?F>DiRrjoiB^39Bs+?'d-m'.g8F"fjGY^
%=sK*Rlb+kqpUQlM]u,Pm!9;>_AVq-]+Xr,dP!_PM1F*XKLO=<QG*)>YDfiQUC]Sj1gr0jD^='jI&'Q-\Zjjpap@W.AK[!m*Pl7UL
%ds0:j,(k6$2MA<4d-\D/=+qF[U7OB+htEDRI3RPKiaf"OYbY`$Xf8a>^.^Gbi4!^5>e]chQhcdm+ir!X+W0tN"u,a3Dk;$bnS@_I
%i$qJS"([F(RS,1Ii$ah1.]a5&8V-F@&Q83u`&sO@hlZ2M`;]aX(]Zn1K-f;[Y8=`"NiD%o#DScO20.[Mk/@CLAG'@?d0Q-=r,Vic
%IdM`@<!Lll^?@5\%Ee0Z*4>F])VSflY:Ljcp/h`*?;.QX"Z&iIr*38_[I_*,?nP3'=_:6SI-X!'%^/K0D7!m^4ZD>[d[rcS7H7C!
%n7*[e\IODblL?XA>gRiQ*iP]toQ%S#fJ$_aQJ9:F3a17ld)Z[]+Y"lkr!T349$NLf9`98*97m#EW#A%)"ul)4aE^Hfq7'sSh_9:F
%8>cg@c_o:A%o-@i;U!'!r$C@s[DYGLQgs-0!QW5`<oM*$3ujli,>"dZ*&]i%Vba3Dp%uLAU^,Q9'g)us_dbi+2IN`5o3foS:bb(M
%[?3pAkOYBr?Li;,2&if]pKQZY'uX)AYp]m;4eH("*cm<G'2:`OT3(Yh"]N.l!8@I\-3hN!%m<rJ"td"4=-Ps:A@7P_$_(u,eBot'
%0A37>nB_"0::tM1rUR)inct7]M2.D(bKOOG?51EUaI.A3T!<iOSbId9\BXIF)m]<3b./a'-G7d(eAI#h&rLu9.=sXT+/'$j"dY%=
%LDO6DC084FjMr16%AU]F&Sb30ZUEdc5B$N_nZAq?!2,pr@iBDl8I,X]@A&@,\+D)\$E7p$EbLOcB0hYo4-I9N3K6@)=]k=^a=-g=
%$Z".eUeV<NK+3a6U'!lP+i%5s/K0dOF@o+:Sou[OTZNk\A,:@J0u,AcWlrDD^9C?P+X;XAdn9sP]QS&\QbI\N)M_]sgOh=ikE1ap
%2?=)%OFGmQR@l<#)5I\5[Hbi/H*h2\Z9e;:!_+7(1(,WIGe(_ZR77KO!:i>$%Q[6iCU6+P0qI5Ch%#UbT,S$uM/_]-Qm2dWq52ku
%A@)<"_G\,h2J'AS=%]On\D8Juq>"";GC;Z#P83rlJ`ob+lhMT>lM8.D%!/B?gD^<VDT24d,F3$/q.X.I=7>h:#=M+mfCM(VhaMHI
%QNEo=h7p(ZR]24WY_jQ>O2ZlrG%ojbBE:kF5*n$peN0;F*A`l>P!!nV!BWc!m$se);X_j62d=7Y`tj?4Xa'233:6'F\@WUkEj+7m
%s7NaPbfea\q4Sk*2J,B#'q`&G7.U%lhTBN;bpB0oC),bJLj7VN5m:njrGj1#Z-_$SaOoh3?X@RWg$G=i[k:%;)*LQQ#&hm5!ne+t
%0t:QRL>a?FQn.sc9pcPk\QW]TP[]EC&q%0ZBG__sZnu-AMXnQW&)d$t3WQpj!K!`j2mB6=i*e7'4HO!*O1UK5i*g"@Gc_!?&^_a-
%Be)b(JFu`Zr:R-+lPk5'g=e"b;"F!Ds2iotD>eK;h9m*crN@]Kp^uGg%%PVeH=u-bUdPr"8:'Coa#pIekMr[qT[eN*3">>6OAA%F
%+J1^^'g["-0",TSZ,;`^,0<JU>tf_IE]iQ[([^t7#q^JKI"fPQ#("`BAGZ,&ms898!XD_D5=00MgrZ[4LVMLd;nJ335#S!$E7"Ys
%7*SY[U`7,tCr[3L9;WHpaId\&ZiUQ%k^7Iq46R<!6o+J73EAL"eX9YbTMOdG[f`q/ZT"LDd#^/ajQ^0f#YP9aU4W@_5o263VJ)Xh
%c[4PT'M<+<X/O^0bHn*:JBrC/Sj9U.#7#>agC,6^VW&GLs2)V_KElaUPUm"F.H4SdV"`t.aKRuY/nHLo`e1rebXKd",RH:O!AMHp
%Bh0Sj]dNk*ZA'@*?p$i,fobZi.QHF/P;WTo[^27SCu9]Nh?UD+)3O>]XQn)ka0Ul3I`18lnXW3,oDDa8(=W6TS;F%9mPb9GMU!ch
%j$a/fc&^K$IFHp1P@/=:Zn2+Y?Yg+=LJO&I'ep*.]6:oOf4/;QA+0`n[E\[9kO8Dm<nKbtS%B73ZGfel9V+n#Y\1+eXt\f#36'o0
%7NK%l_lYd8^C]'&IpB/BT==bSB+nCL\;?bX,7b=uMN0nV"kQVdhp3jBKMr/ObdKenZ3g*!jF5tF/#/Nt>2SWhX%!CYKG\4XAmZ5h
%1-:OO%'\uk3qjN5Jn!9c$utSO;>'Mj^Mi:Q;+\mO915]M1D@pl1aboVqDHQRb5.^9>cpAI#:"^u1=*Vuis&83If7l(*S2DaGkU/F
%s8<MC*uuM(m9-3"3@_@c\hD7DHlE@,cH+EP?eNc;I!n?D&8T4mgY:7L$1MV0DIW_QnqI?%R2>@Fm5#B>=4lF2$Loq4p']*E<5MHj
%*Mq\O;`"]61M=%CItZ_J:)c#N$nijddFQ9qL3LNb7]=';?<&!Ue1ejLG#0\%jG5tMq_4Q1a&RWHmLjQ^&G?[sGc!#jT$BT=pmT-M
%mdr?X14\8Ui@2"ZiQohWQTbCt.7cjl6am&V;3tEk-t6*@O%r\;%C;#eC.OkA7F_uC'St%?A5Y=S-<*Z(\r/gdW_n/Ob+S1T)AQ3]
%L^"U0#^S?r9_KRs^b5pI=Wd>FX5Wr3hP=VCf]0"uHm^.l4MoI)MNhqtJCf5lZ3df:83ND$+R6T9h"FpYH>XJd_7!WdL_9Q%])O/Z
%"22uTOMZrY7hF<m/o"1.@YXXKT"A#a=N.BULbDapmn5o$MDu]658`k\k<&H[HYJe_1=4;TA",23MQGNnU9%1"n]J5t$7'4+C68b'
%,H=7)?dAW[5XOX/Z9r-H0e0-_iS(`T"tN!Lqt+lSYHX&J*IoQ"35F&4g4r*iXsZ_jO7eI<.\4oE#d&X0)BuKb-tiu_pT&C[_pX6T
%1I`+?Ob%15`6@Jb9&7>]+Yf!Q6>9uQ)4<LAZJNI@.0gs(Ocn2]W@-ikEP%I#\(KH0n\"00SU.A_)Kl2-`C?eoY%XaH#!EAV8*:T$
%.7@%p)&5LqSEf$k5FjlR[Y6tZT,Xe>Vn3,[?MX-r_@=`CY-$Bh@%Sl,%5MN?dl[ULE[Z.&q9]bg6StfX:;Ace3+"[XY'@?nE]bQ5
%R1aGSEYCk!C_o8O73@eKZ1O,fJ>bLm"!jBT&5@N#.L%1FT/m+V`es50;+rd)RbIno3ohJWC8Ws^c#[7>TVWCK&4B#1Lr4KcpO2;j
%<YF3_V0BR=g:4shFU.,96B1(b2sFc!aJt:O=;ib)H6p';VHZ:W4T'._2SM$M`g`'qLjA_,DH&`tku!-tqc]u9BfgF8RX6Z9?GVL9
%5sOE,kEQ9bA]2&nJ452Gs*;3ukN?tR,WODnYk#XZn0hEK@Rp0YP6crHjjUF8Z6qKKdg5udDRN6OQCiP1GV7fh[-/0"jFu$ik;JI5
%KAU>K@#:HX9tP/a7fe0k3DdS."\6uK8TFP$[Vju7oXs,F^!k,TLgjueaV50E/uMFe]uY)VmbQPWbpc-&9WNj'VUoeYp_.8U)@pV+
%3,cB!dY9(7473c+bFLAnFB6(np/omT'tYA.c5V%E=J%[YmMnc]E?"W3KIR5XC:art[Dk=SDC\lchXGKpeWoKP:HiH.@1-'"j4_2h
%Be.q&3!HZn_d)X?j%CMPhORdi]A.I?Pg$VVd(/1Yh^#duib4W/1rK.=?Fk'e#:pCMk6W5TK$M.n([/R=T3F9hq%gIh)V$:IM?F>V
%<V]@68&pVm4:XOFdL[9W&f\bR%$]eS@t#u0oJd?m:!Qteh/BK>=hGiP`P2'.I)r/Gh.H@VUZD?2`PFNK-@M=T&%&-s4@d?P_Y$fu
%71=1c&^RM0@oAuNk7aM,>BM%G>Lp91EE8PjhgYPWs'VY3ikF5bljFHkq_Jp_^<uH^+=?UaoN?A"a;=Vsm!'3Wq/_rh8l<^+s-2P0
%/l3WIg3EKe[<S6aFKed-(:I:CCK6s-[(EKAdX1W,I_Cs:pq,umF6>rVD`;j66-aW?lHQV1e?LL$JrfceM+fKBBBQbMSNoMEMQmOG
%;e(.j(X29?4j/H&?A>1?,7<uK[8VIC1#u;.oO._M$_PTN4jP,sEnCV5K:cV?3L(M&nm#S3C:Y`jHN`]+S/9H+Y\\m##SKPBrH+lU
%V+VnN]&pl6AGl:b"nZq!Zh:Y'c-q!DADV,8Rb'YVj"5*QnNrdFD:ZV?+H*8,;]6kXT[&#*CH1JDl2J?iH[?iC.F@=gh1PXX12s)!
%HRoaeY4Xd*(4<8=&8ROQ)uOY;\;W2@Gb+VQm*B>6_kFn\*iEjFd?KHb'[mcPE/Ma@OZ5F37aQe?C<n7p72<9.7!&AFLIfem,E&;I
%2/"[b7/X^pgFMJN'2bTO\lZ_c:sgEu;2!;I[&UV?HCp%FHQ4.lmG>Y'jAW%([#$Ti]Y0rHak).0a%7,eLre0\g7me1gtBe@QcSBJ
%]!I5+XImZ%Oo*Y!UNfGd^Xid/H94iM'KjrhhtFNL8F;7koPl1S-AqpRND%S!!Sd="Y^XWqN@fV\6]lL3`k>`&IT;Ttk^sd8S_l5j
%([H7b/1pS91W7:%M[i.JNg'Y`&<o_57dM\ALSOg&6#.&)SUGNg;K8IK9plQG[Mc#dd/bbo^t-@&BWYG014-Uf[s)=`*'D>i-#-Pg
%5:SBXa#aRL*GI0r]L+U6TL0Ugidh+Br6e)2.6LCi3tYbm>[+rbrTClm+n8PZdi+99?AUZac]q,a6Ct<4CV\VTW!d=.lQ-`EgKq<I
%aHs'>"OnW"O%E/shEBIl6^$3CXt[C"UpE!Q3NiIX5-"3L/EB)bg/hjj:h9O"F,O*4WaC!q$u6Nr%nSKtFB;56m`p@=j;HUUcZUYq
%'plU_j[A.@0j5M+(!&^2;`Wb2.PE`C5Mb+\4eP]]UU="0J=?aU.oh>G,QI9H]TCW9cl_Q?Y:N"I/[[5'+O%Ys?nmpXQ#V7feM"mB
%.=LMI=JqKe2o"V#T/Y)mF>3)qIFD9%?4'N#MM22GZ8$8D<9[hm:N]\%F-#ic[39&-'P:+[pqQk#$2eJ(J#jF-bQIm1a'"&ueZ:-t
%;QL5582(REYp0V#h>LkClV)VNHEtbYQ2>ASDpCc^)pf\QOPt(I[NsbLCtE)dWOFuCI/rm-:Ye8;bP>*[i4V,IZ.H`)'";*ccZf9R
%f"XH@nfZ4%#p&f7cPfA42bBT4IOT?^@%>JnEPq7@qcC!Z3ELiC";cA5$:f3s`Mu(\U620rF:?<D'GLrEOU+c\&&C!\JRk]4HjE'J
%iW`&l+'+0YaD6=clRYl*M&IJ'_?NF)e-$"#A@^U+)E]9kBa4R]BlH7j!`"/p@&T(l%V=&RKC5@6pSeH6?tFVcAdZ\h5QN.Y+?lbJ
%P6W\_%Vl@>0:5=O1p[2+=5f>]6UJl@?A`%:otV;N2%c9i^BItr=GB9e8LC[^@brqQ**i<P1.DoZli"IZk8Li"IR`VF52X,,3"HDf
%rD;X_./O]PG1ht*>Z3fXGpX*TF2'p^lAB_6Ht8,o]Od^ejca^"H9kEZ+01ER]&)an&3h#X[>U+V50dHkaDoWScRf.k*]EP+PV4fa
%?!.>/kD.uFq4NnV3e%#=kb(C@OF)$o.s3/&ST?(K9U1=N3Ai;H.G3hhf/$",Galc);2-73Sm),X%90G7R0P)C'@!+n-:5m7a02K*
%MusrMZ45_#ILJJ$s1mji3u3Bsrumr7T1JM'Sf1SugG0UtP^OT0/@\3+ef1kG#7E<b^^-@m1`Y.D!Bqn(cg+@@,(0-?UjX;GIps?n
%+<H:=!"L<gR\1L\C=,[aoC)D?n*U:HL4<,[;MNNsT7Z=NZmOdV5k`<Hbn2kd.,/;K<bKh)5pTN(L;oTG-IPc4:f+[6O=K*kIVe(%
%Y!fl\6scG$hpb#aZXUZUR90D@Pa9!L'![N224k#%=TY??c\p:mLQ]Ee$=MO0:Jq+31]_`D4SaI*W%eRakOn+QjZrtb5>-tI'PtJF
%G-iV>A&emd+QS''IB*pPiW-gbA_L*XRs(\>Y73qrT<aPM@ohe\clW<KX;k5lXi,@>=W<(oaRiA"efQPsXd"kMs%S:Pk,5"R`TZDN
%]jfFk]D"B]ql/G@E#8ria6gQckn3tnU+Lh4\WFpt*q5A1p2*Z,eG^nj6M]&d&jA.u>F6o*]9#Sqh6\3g\tbaDH7N@kVDPs!:$`KX
%!OIf>CCO$-j`GX@`CkDf2)6SI-Oi:P1Uc1HSa?9n9W_G'<Chs"?T=\Y<78jp,!U]JXA>;h:>c=:#+RQV.SiVO3iF/M*8-<nO1c+q
%+gY2Sn,`q<<HB%e,V;DaZe.g[a\.cZ:"42,UCi2J2*"4[Iu"47G:DHOipIrVbuf;g\pRi38n_lV_<W_WL_i67V?l6T5b66a'gN?S
%;3/c#5f%S8-9!1`an_SXr.S[[!C5"gRGY*f%8,?+^#&ha3fAio>C7n71&)M<K)pkn,mfh"0Lq=*Zo<c=8LGK6O_hCh"p$2a(W,(.
%_Orc<87DkKLN28<E0[2aq"g+h+?6sT_"\KSK67LsN]a?S&-<`$!=7u_5u$R1b19]$ML%6Z/7M*k(e=\=6mFJW#7u!&b*uC1#YIh3
%=9qs3`?WK]FBSU&Tm<iVK;B")alb[cBi"p@$J<X,MW!.O+TY3^']=UnGrsE"J/7;nds;A+a"lH]+ecjXN?N"/#o@Y!m$/4'Y)jK0
%:*I6X-nJAR&Y'>fGauM:C5'a5'quiU+;8V8Ir.G1cNTg9[=[%_=s>9^a3dF%(B22CdC/-[-eLZ;p5Mi?Op,\%g/UpqKtUR:2%L."
%5q!GYTBVcOm26.J9i=kZc216/b]DM@]ZP2e*_@.*Y,n%SYmf[-CYT2il9R^b\Tl0?3UDEgT#43D(4!IZNt`8%#gkAj.B`9YfTXQc
%??IQ."EkFNQ8^'#P/8(4M1pV5*&(R:49".R?a=R"p5uScYk+^mkc$RhfW@]\D&0K+"g>VrI+I!tA\k^=Cbc-sYP]j54t/J9$bQ'H
%_Vpl=Z-s9"ND[4lG+8a%m?>Pa8%7#8c@gfLk%t<<dF_enbB7<$%Q"Ca:ZX$bl*:DEo&eCZAm&Glen^j'kUH@gB&u=D54$t&%W2d?
%P]Lm#%L_Sr^*WOsBTZa"Crfg`d,EnBk(Yq4O;>Nd!?36G&[hpodq(mU*%D+MSo(->N2B3GOS,K'Lb%+oNOM-2p`9L6\1jt&1nUR]
%p_+k9-9EKD)=G<I5qkfL\DaAbkYUd/=ba7Bd-rJlK1$&o0=no_%37i53X(`9@[#S#"aYf\NXfSJ=)QIqnd3\O[LH65T_TO:2kB!$
%1#nf6J,kcsZ(HllV*MZsBI)&)"uZoN"MFd&\&$t0J-+:\0#`B)&uo4],X=97rr*I&UV$_Ua%JBQS[1=R))B\DO@TcVScsXM\;ghM
%q=UcQC8]ut]:Wb35s$&(3AW!C)5Hbl=.cktGQ@[`(`;.ud,oseRq_?$C+C?u"LbJf0F/!3P$rR*M[LRhPC;[os'\RUS:5#0D[q[e
%G3<4Nponh]X*.#G*r'k@=7YZ3O=LP=MZP"?R3TtT!41dP+f[pp@7-]'*0=4$?1*eA;SUgIdt\ho`>o^GXV_T!r0B,fo?a:-^Y'jB
%VLW6\@_MY:]4u[Y.AY3f`\1s=Ouf\N/%al?qpVO`rMDQiZe.lD1i]h#cJ&<&di1\:AF,$Sb18dBBC^=0<\6"fClbGVX),)B`!oO^
%guG92)fTmnO;I9CVX4dL]tFK.OJEhh#9i\2oY.A^!uq-?.8c;"7lbQ]9C6V;=tQL4$J!302I&E\^q02Yok(]#iuqThSDIl^]VWm9
%mf@mAerS\sT/&P1^6a/\<PCN"RDcQn%"IVkI#+,am$G[a$kanW)Yls#p7TN3It)an$X:m+YpnWg2D66l((m?cRqmBS_#:]J.djZ8
%#r.gsU)ECQU`?I=I9>TFXlo7-p^mKRdYi[Y5'$RXCns8V>rGlK`p0kJI1PutOdkk\&MWOPb0C:(]<D/J0RET%Z,*EDYmQfm81gQ;
%WRLd<Xei7IBum=5Nj"?ASY<jpD.\E1FEOG&QN=u<3pYng*X\oBHA)mSr>rdU72T%3K)o*e<cV,U(/.G$nONbgO"O?saOiaC-T6#R
%&2\0s[PTuVE/Ke#rhWp&FbOEh#=&D7&pb3WE2h,+jqXTs+#,ah=12e:eMO0!Y;*h2qDTRV006$V73+5'3iM&[K65'f:.5SC(s&-]
%[D;c.5l):=(a*/f606Fa<6ej3(99gJ%o"B;0Z?h__^$/]B$3h5cu"SaZV=Vto6_[64R=cCLDI_pj(G%pn^n?7Dhj9W#l0';ONNYC
%?Qg8"nq['!A%pg`mk96#/'Ed^o(iU^.8T,`%!$o8h/C$[2mpbkOZ&-r:gPG2H_pp7iS$U_m?)UqeJGmI.maOq;0g+DgEMDJ/n;>5
%eb3>5CF`G7mY405YfE%qkK]cVj@t?Batqblc@_(?Phqu+Rlj?SH'`eMSicir)q07!e\G@_]t0(&C`ROWhqE`nVb9[RUSC5UVLY;'
%*qMiBWOp4r1*]fS+[a?piJc8oVrdhgEYU@(YA2gA-[Xi[ak/sT-Kpd,&e'3TXeQgO/]-<rI?X7A">s9XrK@K2\<0);<<f@91H\`t
%)%;PtFZ2"G&<JQ6+irtpU1el61JS5nK-d@O==/Q`*`BlaG(MMHp&5sCI>[ZEFbFlr[cODpkH?AVhV8*J_SDCK%!SaEcU\S`^*3Zr
%_?pnH3K=ta5EVe?P.%BIdg3gZht!EX&p`Yc%H$(g]HXnKTr\g+&C(]L#81:'OSMpSEMg-jc/?-C5('_O1V1@]O*iq-cRTLo]Mu*!
%&hn%[6omR6Np9ttE=tC*%[A(uoC)/G!(Mi]J;^`>!3)OQO$!Li,Q5VU7mP^!HXn_\'c,->"sf_krH("H<QfX^V.<LrT7FZA7)O^a
%o(6lK&liGVh;HDH5J+a&;0&terc"_hiJEfjl#BKa$8_&Zo82^&oNNAsqh3M@"?n[(A0(.+rM/(dqIbI8d50sc#fDHYoG2>;J_q@.
%1E+(H)YU(AaF`,L`ls6Q3:,:4geeReE+G]WnrQSWc4$6jN)k>G=29]H+-/_?lT<U?N/$RIhZGl86EuQ;_&`l=n7$;q30=Zk:sU:0
%TF&jd/AfQOk!t32#X#@#D+QNC`Ms/.r^O-E/`_&u(jAkT4+)/n$k5KL5"<^K^F>QLEK#m%3j;,T")J4uOJQZh$j(1&N85X:)4!A"
%&*!I-5sGLJ-[c=mp\79+n=Yr<3dAlKq_9lS!C;/rk:QIZe)(u=N_kVAhCAtciQOrl80Fu,'439fi+8FL[N$pblgJp7@:Jj1?ZETY
%Z`pW?K$=EX$W#\arbderA..j(XU6LUGOT)@%6"o?q_*pV6n6Wa)qE:+M`neWY`:"Xh!P!`ifUI]=XJH3DrC0-\&I4WE7):V,>l@_
%=]Wq*Y(FMN\_^9t5&Fo*S@)bH?98XqBnBbRM(A@FXl7"uQif1!ohhN+:l#3,"nOjG!$nuj'DB!$Sa%K;_,Yq*HjrBFE76rj^Fj<n
%VES*G7p09MV,4'-dsO1>5fD2,8Vb6j&6+Wh^^0%AF;@#85_47F?=[@ZW(M2DVN3NP,KFqEc4$>[#`Eo7M4c\aYjFJZ*DomI?k(f;
%+9PN,'5Up8=tg(m2("[K-?9(Z=e.?G814)aR@n,+cGG4p'$,AS"@CJ"#0*%2ir&bjF$Qrr5@T.A"&)q5e$/:od;$X]_s.ITA_E9"
%'&)=%b`1Z/;%diq_GAY-5sJ2'?$b:\[/n+NTPdbH#1<7XHUY5c/@Qg@io/R)cAk"fiO6leOHF+3ofKRV/+iuF_?^FS5[e3"Zj5p3
%.W-8o8='48WbZ8;UuS3&RHicK>D$aJa9L.)Msa=Agh8bc%KU>&?OuK0&q2p?6\"Ooh`5"HCt,P/Pi:d'6=Mdon?P(%gU.c(G9N>[
%F'2Zi]qdk1$S\?TVt/DPL^6-9?-/5GOR,j8_()@LqNu+`Qp%M=HBDb;SCFM8^?d1Cg$/0W&?)<1-!^$d<#(:jqX+Q_#8aF[Brj2G
%SOXD'$^-<`QHH_c[rrd,BikA.j#YEg2cWsMN`1PR/&1uW=LQ+r+[D7!^"b4Y9#:@2E-I+5Sl%*>DUfOt#3KmqA2?Noc+K)J5t2ao
%3a4"6()^g7q!C!YJY,+*?+qr%4U.g=C_o`KShu/P!N#,@62@N=@P[je>Z0?][57$Xmc*+)R6%\u5u!i5UemaH]S%e;[A?2K;eM2C
%;2omF]2jlP&=Q^.)^T)RY)FNu:_f]P%oOVhlIV\8)ajT;9AJ[ZKoCsqOMPXAA!IG^+L&`?dU=PrHURoU_A.S@@c9V*jNP4b1.O\@
%agbHT=(h<li]"FpI2K`,Urca2LS.cnQ)XN\7T5f5!!9OU89&`G6i=3MA_Dpo_(Y&VrGtNc!`'o8M=a%b'Fs'A".]kX'a"*fE;!DY
%E'uQD^n61?Kn.X)8/'JeSd7-^iBps/&/!/-a_SJ=N@=n8PS?E>kdpkRN5E<S&beY*h_YGG_-1k<+U?DF85bR)V<%4S;0gMlc]]\K
%-K%_ZliuII3s?iK(SDhqa"[j^iSbB;F!9'uajA,Dc^Yj[C0cEi`W#=<gd5[10="0u7Z<d<?7%D=S[*fjMo`Btc^8b&$E8%GpVW'"
%4&"!IgXV?/BPJ%`p.u_M"M.X]B^;b>KZZ")2kkSp!RV,U?^r9hf3&K3Hm]8g9d&\gSkk"Akj=+fKE+K(>5k*M&$_!#eG@p,7pE+p
%U`Y3-)GWmKf7A(_p9<It(YpN"MG`T3DSfW`Te?-j2H(r95!uK+T'kOo#;j-hS%WLf4Eb_I_p!R(qq_0hkjP0s?PjMAOIeDH^g:?)
%!ab>##L/@6/dEKQhokpe!VA[%qfUp%#k6#U0S,Ol)Xh'C]LDV-pf8iBkFOLdDFnO5#.kWm(n-\@5!OMH2MhN"">U\kW*r@-W=!j\
%[SdL'Of.AJ(PH#5YY6"kBND-AVB]PR?nHrTXeVef$/ss0Y+MrVD_gB9\kHodk/:Wn=,N(Y!p!H/^qO(3kOD\Jl.X5Z9:$.@GVX+f
%h)mqIJ2j!"3deQ92I;BNZj9g/WC8."@IP;k]j2(o3iR#1M2B?](b&!@5giQfe,Ye/.'*JVG8)&#lk/dp`@l01G!#N&F__a3P]UT$
%#;N1\d]fm,3c]'Noq,tbGHQa-f+ObaJAd:d!!LAW_4`r9KYiI8KL^8K]_'&$d]rjQ0+dA7!E/t]qo&d[KGai0$c=`^/;J'iCC>/3
%h^m'>C6G7Z#jL\Pj#LmM8"tjdcE^EUJFplNKZqs!6R,l=ip-&7ra]IhH2r<pQHJcLgaI:QC7S;Oa9=SH8E68AioPYHGrEbm$T![I
%G`tL]<8E1t`:dUKE60I#54Yej$\kaVq2r'Q`9@gi9poJ,&Udn-JEO%.VX1e551sG)o8opoqrcK#]^.07R@P3'G.b4E:T^HFY:P9s
%An->%9!0.Pc!NNmSj>i$(c!c]hpO)`f-K[(-b0iGBt\.n*!Y<t&5bF)bkktm6mV*?(&pd8BGR0-2hmO\^GhQeK;BipPAr,"LH?MW
%(t8Z3aP-i!UllPK-(<)ZZ>*)$LTKT*+mnFl@<=L>/(Ac3_:_tP:aL\ZS<Ypl6^IU\:Q[>C6%[5nY-b`"dE&X>Jq_5%%-.Y!C]8_m
%3&@TdFlW(U@qCfgDsSVlf:'2iM/e4E>`)g),mNM<0,@\#RHn6E95c<DfI077`"tJ,RdBT25ll*O-BC^<>#]HEfas@#USQ,B;M4+`
%?s?D/lHI#T'^e3f>Eu>%IH?:-Rb:5k[Ln^r5"9&b3=1!Id2%?`OqJ0D6q/p;6=V!g(kU\ek<mb>.4p1qP;PM3_BK9$T"C7RZ)<(P
%&1?`T,0.EO`]R#%i'P\HTub=iVXMOIBT%p!,'iFPn&K$'[EeLW6d=.GI:U<>6s=]F+-pdB<XB.!D0Pc?C2&/gb5(_&J&hHT0:pU/
%/1Z*3G5]>%k)sCP*.pu2>0M$qgpq=De6/)=f#5iEk;0Y6\*=tbSCdaH`$h`t+3TdOWkWV80D9ur#E[(+Kjof&Z]TRU*JL:A\6d#R
%Gf;^ZE,$f1VVhKeQMTINS80jmjj-U/6gJpAWN(MDW&ka5kX$u1e0Z\KFHtHg1J6u%?kK\3V[I5/@GqoM!GM5dc2NuEEk0lbKn*=Z
%FG^CiqfJ>][S4CmJ:W,2HuB:X:k(Ig6knA(V\@C@l[$):KIM(mSW!^XA`Pai^p)MRoBSj[7("&S"rVRq72_0="P?B?gc9]>$s^Q`
%$upgMA1j6h:u_X!XYIjf!.#+[<uF[t``LK:9.b=pl?ede<9\DT()Jp1@MqPF8Pj:L0l$uC^u8;j,9ngo[JQb[*JM7h^O#3tp53IB
%7^$BIhq3sB%mk79qM*6B#>o<_99#"BQi/DI]jkOXQ47Z^Y@;J@%'UmbUN]2djK.8;*N)9?:]:X^M+8WY*Us5'`bJ',"E%GfgPJ:q
%/Q9:GkQ+#jmf%;3ch+ljLVJY"i:Mum<2*gLOc_\432!*t\>Ff(Xnm3J:Y1Efleo'?4[,EEYT\bo-9YoK#E&BIV%6]t`eVH[RZb#/
%.q_q([-P/-Gi?QJa"Zi<(m+_]E/VU7'dEj3*JsB86kP4=Jaj4-+<^S)K+VK<]3eSC/=Z56qE(\X*0[^V1[Y8tYg1SQ#VaPi;(?B-
%J=_1#8G-/j8.6$d.g*'$YOA\1d2I6WoA_Nrj-i*AD?bMoh2XB1)%nXkR"^YI[bAISn4J,;cLdA5K0k-sq@6C(Ya&#R%V,mW]eORU
%iccsZ0oUl2kVkbu(X-)b?7?$>btLA0"<;lDk8.Eo1&T!4B9Z2RYX@eO"[M38Q0A?6Z!RtS$I>?0=U/E5h&)$n"TIg!URAY8n2`b^
%)an=[brH"1!=_jP8Uf;5R3^%?Rfl7+U-U,=Gf1*E6W%S#8@=/U<s+O+m+X7Jc5LRL^oU<RJg":Lb+i,?6\/D)gZN[F>HghU$3IS?
%khIJ72E>Rl">[a=-Xm9Bi;]g']S:lECtn0b8ct_,g\)='&OtVXdGe*uqSCs`8'b8!)<-Z=6B5'Z+)F6nc+u0i(U2.gp`i&dYtgtt
%LBZZ<,dY;6c-[uV/\:a*^^?QYVYYAFm1A@O72KC[KYVD5Cqq,H\b/@&5]j6b`hA?h?<,qk>`$$0R^u2ccN[4IR!&/$;!C?R+_]Ac
%s-E@kSrnZr>4r#6[A+4_WSnPqR`a$'NR2jWn)3ZcmkSKCF$.0m<S$3NK8&/%^9Jq3H'2$]&97(JVPj66is>3N*CPH-]tkE%N]6_d
%@Qbk1Y>cn(CV)?'3Qi$Y"MoIY?g$Oi<6JI;h@bY73EKki+;FhV'BGE$=A$_g/R_YO2.+OrS#?'5'M!Ug[6GHBf(*B1N?pgoQ:"I=
%"X?UZOe_^YDD1tK4#,!nk5/@XVn;E<7\61dj2[$BRVq</_s<drrKMM7c(2Njn(#J.SUW8Y.'dm;J)hfFLm92K<r+)`p:Ql'L'PM=
%Y98=jQK>`L!-]=;$f#brjK8:8PfVS?QL`$Ac6h+hF!F7X]NMK9OcShU4u<CS:6GQ6eHgH_`^A-Ie?O@M.\hh-N\<eSKcHY5!B&RV
%I8'T9HcWuW9pWA1JeVh:>C1sX@/E]u?mcM!<`%;_'7nDRkiiDEeisr&"M"*7$7G`Fhog,3pTMlMbc+NAk$7E6Rit4)D@$s&4SR):
%cVcIqfO'ks9A7!'_0@ZJK1Q.&lF4nT,Va`6@DW[\$X7p+^R=U-?[_?lbLk(.8qJk5k>`^':%J861Vm\BrmjLd%rbEEC9&GgdM4T<
%65XEVKs?51i.>g')Mj>"#I"[E:og.'':fbhJQ-GPPmCc)/.&&^+93I=C##H+p0urgK9I+7F[=R#:'%;?BD9VY<aKR=OYpJK16`/Z
%pILmlO_@EX:V'+_R++f3Zfhl2=LGE/'Zsp&*N$gm$dfMr^]3pO$eF[&Aud_.TV-T%p1&YDWrk7XI-E5bTG/L4>6RaM>\48]86$:>
%lO=%ONP^62:#K^Cf,2sK'9g"&+?bMl_*e#1DECC4ZW,%/]#mXDSDucTH=?VGKIdfS2p)?>_0eu.h?pl8+[aA?A[UcL/QH,#pHj-S
%j"-$-U+IM*Z=8g60*BKF$:Dl"@\&r6Vgdp9X:lL2MdIo3B6W5=%]!eeJC%aI6AH$?(#F?uadB#H4IFq[X./5$'Qa"+rir;q^gdVK
%b34,8Z`[-nGKO4cj4Bara'Yg?@#bW^V:S\YnmYR%gG5ugJps'bZ4O5]oke3qKM0F&nI7#-1>(-=T)n?h)rL6SYqIb;kI:OQ@Arpa
%_i`[A-,J4qn!(M+BG28t'.8\hGHBos6WY>`4l/hrYutl2A]uL6oj6g'+QIic"qVr)+`YE4Hr/'"aXtJ>dRl"`h;JF[^"DBHhd["_
%oI:*R5.3H+jujc3!.OV35,>%uRBot6C(ga)7&a;K^kJE[kQ@D%BBH#tZJKoL[T,adVsH]3o[\H7"3aOE$'N/'+'S:^^*E;%BZe3'
%06K"dRi1n$Yj'$SLJ"IIXrj];L9J?n+<3YT=6(9R^Y,_]EZrnQoTJ-I5Fg^&fFRUFpNt56kp582*a@qk\D3Vni0\u_A+*`R3VU3t
%j"6I-5.d(CeH[;V5!O/u@p+9kkTP\WIVDb\5PEg'*,E&e\-TId<DAO-P'^IufM\H;L>2O!+Md.cN=/[[F,:;r^RIXJs$5[(48[oR
%+YXj,J/R&tdDl4:3)9#Q&2p@N9guDL^j-Pj;F0N?h!ZS3foM'i:4HXZdoA4,8cr!&/^nHT3^nJI=$h(N0^2t8![2A(g&,itHP7Eg
%^\R?YJrb,.s!=9s#j1]@q(RkRN<s=k=[?o7iq%.2n+D/phS]]m9`=VlK/nVbkoMAE<`W=9p_$;S.f$71:bRnuRpaQF3&^0uJ)%k!
%7M44fg-I_j"'/e'4WdWUpUJg>Xt:b@`t6Z528M_25:\ma(o2?XKHDolJDhTn^_]-uYD9'K\\lI9_(j%]$gO0Te6)J#HtN,JOjo]!
%nZ..%$^,X"_c+Br*X"fFN9Ka1GQiCL"J$,?)G64njZlmmX,hB4L`=gcmmYG\R3_F79Duo]mS.foj1F3<4?huB,1j]]:G-\*ru(7d
%q#);dqjeuNg>Ua$;@TkTMs`_e[roZ"1Eha:2P5I7#PF#d^$sZLhl_DOY&-AuJGs;R0e:t:$OecGLqI(2%-e'lC'3oSbQ,p/RMU%+
%A"0(',:#hUJ/E)O9%b<\e`3l6?p%39*8`XenJ^CHJQ67`b2_(I>X"lRg!Pu$+i#MI`S=%HU(H7&o,i07=la-r5n=8?DZ;nSZ%SqF
%Xd"G<h4toH09Ze:aNT4E'6n-1-3uq'#fGdQ!V=D4Z=k$,)WG9ilZ^cJPDT;k66cges!1?+I"6JPflJ;<iRB$1T:TYNW/$AQe=KYU
%q$<ET)<sV',:()A"N^Q_EgGtY,+`-1oMhC19^WRIeZfKT2c;+DnO0r`*5F*;dV4L*>sFdbI-c2qHG$OG3sa)e//PPnX,7UjF1*\H
%a<%SS%9,!Bln\$d'AoEK*Q'TCKOol$O!Y*C;Y"F2.]cX#NI-lC$\c?ll]B\ONG51%7+G\7PmJ^27@,AL1-=$R4CoU3XcbA9<b-CE
%`(<'+1.ic_Xn]WhfpL!]E-UI)%*M<";bkf\-<ZtoQj-Op3s]IsNG1m1Ni=2*Ct^8soE7tqF/hXqVFP=5RK_nb%t*3H_1#%?,[uY-
%pI:i4$VmoY_CYeE-L'dfRmn#>`qIn42"!*WbddlDR*X7dC"6^J;_Bn[)(Li5]dpY:2?mK-+5-o7n>c)LFkYL[e$VF-d#02B9=.sb
%OFj8c0lV7N:E_tqg?2If+#)V8M?pEr.k_1aOlNK&@g%d),OPUAH74T6RSM>`@+J,l?'AM0PK%7tBrp"'!-au6$1%Yo5,X$pIuB>i
%a%g;h*>\R74MX$Ca(5rs'=:7gP:$pCT)1JaO<H?8N%(3!M=I-0gCB^F/^[Z><NrVni3GaA"&O\>[t%XPq0]?CR;/TQ0/uN8(_?;I
%:ogL%p$(R"Y<H0$>Cm7n+Z8HR5t`2'_&37bCc.GEhpS@<ec6Th:"UHN!Wf_8HAR]46<':O[O<:I6d%G.NggOtAA#%_3\f0c`Gs*^
%#nd#<fL\!=H%AGr7"U@G)!\_eN6,2q+MO?o1o)j+!Wc==44N7l&BD_EFV?nV8uMVG)-e=(Bb?PrqG+#m\ia/6GiGnRa/.B5(E6&4
%9dV$]%]`?4&6\sQ[l^QCg_U9q*J2nXP#6(>'(65@*?gA/<?243&0tk:DfL2e8#R7p^J$0mL=%4pb5u9SRCuA'%3[^k9R.`]?<:V2
%`Yb';!S(2kouOtDB$ipMRo+UgF@h*>'4;,[Z@IJPUX!"N)>!N4<(%t0C=lViTSI,/oW*hs(Y%2$M`;\u!?#P"5epn>+a[[LWl<o3
%K17hk<>(-U)LcqEbErmibsOb;"/%[1Dih&<3[g(:JUm\"i))uaZWTOOd\OHXMO>qeR#r&uKAma0;QJ*kcrl;.ESCZoP`0_K+ECrk
%;qF;;I/N>P1G3C%][\.aP5lu$1n$.Q)n9MRCi"ai>L0YPBYsL_jtm4X`k_9`hPu8qn8'8t=fo6QgW;Osq<A.n2EbI89p_9c=;Vn'
%@uMPF%d7XoLno`Qb$Ge>Hu4"ilm@<\(7\6EKV5j#cT.ZbHSLn>?k8g9]<Q%fgJHfH53_#KBJ.W?Xj%2U2$1E&b(o.6))jW8+Y^F@
%\]l(E9f)"-JqG'e#cA3-C^qNrNC*"'7Ys64]]C\,bP9i6RA]elONL%V;A^o#9<GYdAE&9Y_%%WOKrf["K:iHYN84ms>j/@6[ao52
%W8!I,d=R6f/79;p3']](]>PuF$gJul$&apu9ij_Q*mUApoppt^&Ar&bD,gLG@lbAT'J=&jck"*lCdt*m,`gkk%93VJ3N&?:fMMkD
%q7>C\ZAiDVHp@)/!UcVE=`/%@Z&GboV!V>5#=2/&XYfm?j.)T::^*7L6<f5jiEH.hq!7=fH$sfJO\A&n2a.=u2Z&#HE#DO_"7llG
%BdD"*c3qn2R!2/]=a(8&+!Q"A3AA&1Vh"8[T>dK:^]?f\8tFO$%o6Sd$2!L,-L"ET0[RC)8ShMt23H$/dHM,/D8F>6S!58C^Ds#T
%,q.6D;8>:Ifqa>DKKqt%$RWM$i20YHl"l=/'2B"lU^R8S"O6FXr3=?Zo`1m7ak(CK&tD_`8Pa=%,]9dsH-'7sk434@?296Kn%O5?
%%/T!28RfqNH3O)elDI`$[/h,Bg9QMT9gE;6],fd+&0Z?4A-[K//YQCpl:dRZ1dfnB<"9J8-,SPT$?sVmM7mNG-b[6]Q<6H0+1"3M
%L(Np"3+dLZrCrmS5D6jB[\"#qJ4h<0$/UXM;s`2q1s+]tlEKM!K.SHun+pAXQX:)(_EJri]uRA"3<_G"/GO"8jsK.kjWdI<E5rT+
%ig-i/!2-WZZ:;6C*)>]QL62Q=c*[V\"9"+N=N)]E"#a3.4B:Xol@)caX3'EnZPDPHlK_OY@TY;eWdDU=.7VAA*O^5YSYF8Y!B@&-
%aZb4u3S[e7diM$s5bJS0i4qZU%(0XN'3WMXLY;*)@rQ+#4PVh'o/VQJEMOQe_/,4/m4irf=!:d[D=[LU6&!//3[oECd]-_BbAeb(
%g\MB@U_O"&NWK;%gH'V\P.7iUP!gGG\`.I^O^m3bc<J<#67,qt`]IWI2"Pm$@fQW_U2)=InQF&F@mh*[&pW*ZX+PLUVZZI!$EY1f
%,&FLaN5l@Hd,Pl9@h;<q9h0@!+D#]'9CuE0J^7SN>u3N[IQCKF]^C//?4\sf5'F;$+SVs\5PT.(VB@*64Is.1bAu5[]Kjh*ipUL3
%nno@A*:/,MIo=T>[P^gGXV.jHS8N%8I)3pW3\h_CqK%TfY$5Jmh/#-1H'4<ZQ!us%N/25i'U6CD=dRVDFLEDu!+SEDHfX-K9Eg*'
%)V$te*;O>]2nV)ELC]\LO:k9fD?H=/6$9goDNQqJJL:ru7V<j<QHDgS4%:`8[Nba/03keoZJ.&RmL=Q',/HJ;q8@j$k\9]Kh[/>D
%8pgj='K"b6[WpBX'6WH@bCGa];ok/?j.UD''e?&Oh,_TM'O?MN`ZSY0]5nT8D:#3BqNK,P)djKs)%&o(Q!5jY<\p!5j9>d[#_9Bd
%)i?FJN06K[5[4?n?-<*U#][tIUH%"Jn1BY,VZpTZf`b5o"YC:k%%8@Ji0/*o?^o=DN9!BoCn5"G@.UHsI&@;NS^\!X37V%_i<H3n
%1GuF+[fGKJOr#%$6FZZVNWZm[F2EHA&5Xfh^5*FK%/8r\aJM3\9;Z*WW"aUl;_en`-P/%MK@0i^0::KC,\bU,7eR(T0b>S2H(6(Y
%H'XAlc6Im)L%><g5Wo5OXuiMU,0='?n3O[D).@RB):McQ1bASboefcj[r`+nB7c'YDQGoSK@WU-;jEG0AY\CY$@r`3`@Z*MOL-%]
%3mp5$[l[?FkgWglC#8][FP/Y7GkH8uE"I;ooN@_BcVb4:H,`.1"*rfq7Dcqcd()n!0M?F+9[<4R1ac`%6Wq]b%fcY/%q\>nEl6t#
%XbEMd.]J%Y")2CN@JQC6V:A7<OE'\1;`NbR)96]^MPJif[m"k!K-l&\1IeIj1KWb8'%p/"au]4focJPZQC$6<_6&<2rElfl&8]Eg
%jsEPBd_6pgD#mp=B#]`agq]%2D<HQ,.#LWug*4G[@6f?_nKTe!8?*i<OA>YT,e3'gB5tKsVe7YorJ*u#+leq>dX-ZXi^>)%5n>t9
%UADH2a;*ZLntcF*#-MrQq@q>,;"Gk)3KqcW6rkS-duIq=5&294<oWt)bu:(R*=(js'I^\3_^5A#$AYaf5dQWH`O--hE@1F+&7<4.
%:T4l4ne00fZdrij9+<lLK?7Yp25$5-Y'S?ednJ&[Z<Z%M<<P)-`@Wi!!=$Ka8r'JSes0DN."DJ&=DrX,QD1@!Vlmltg6_LT6dnQ=
%m5!fd$?K:7eI.]cg#>MU-n;AC]`C9S<=_mML5IZND(&.WPR86$O0Y.["J(nT>jm.Te9on?UU4b]WgR?h`#+<M>2&eDI*Ql&_Vc%@
%RR`E&6aLaRor)pZc/<E47ppNA$VGE%Cos*X'#?urM=_<-.C]LDT4COM-.:B_8;i;&&\7Pl`'$`p)`'I^@jes1aX:ZCP_L@J6:W]k
%SU7S_U+#0CLmW).,'qs1H2(X65)3l'6TubEEEQH/G(nmW-G_I8#1E7IQLl=b[ubEV4IXP?EE_HM?/D&7Za(1`h2Lu]c,.,)fB=tg
%Y`M?`f(f#a'Eo`*]sEZ,(aRs#3Ftd)aj@q($rA8g]LWj>0X-m,4o@%Y3a-da@>7o#FV$:kT=;D?*CXdC3>8Jf1ltk/UC<_/,/)^I
%EBD1>^/B1M['n;\bOH:)]pobGo&]7a7+ui]9P&a^p%Mp+,b,8AIYT"8jL.\bcKH;ZH'TA])"2bLe#6#$I)pV^LQW@aPh#eSr&H<<
%9[Z@A70.\06#gLKbcr?Za^.[eadpf/l,X)4kN<$ATH'a)-q!2I7`14H(@'5W59,C+XtNeP]7;WBGF9<fQ!/k4!c0)AZRBMP>X9Ft
%jqjt^aWTB#mhfs3jk$QoQ(H_]\5=pToV1oq_LN0C7Vt%hCf)uu_Y<U7Sg5ROp\*6GD(cb^+sM\&k_<M8Ul3Fr#b.NoVKrS?;FEG0
%=C18+'so*!U'.aG'+PZ?TsHX*AiV.8Gh\@<"q>TNJRHFhMSj\)Ba)ml^bNO9D'(ZtljAaQQq;YZ1AR_8D<VY6eYPGbl^C7+o5=,K
%BI"r_f^*<e>(/-cYuYVY#3[Iu?.1pGZQsno+XIWK,*O2)K9N8q2\U$]gG!ZtN!@!@qc7dn!12+lGaR+bKF8b'ShkA4nucnQX4fIj
%_1\MZ1XQiN5p2Zp=NQ/A3Ts93eYtj^eD7T.(2L[)N9k1'E0!-OoP<-QKd"jIkt70oU_H&_Ha^_L4eK%a+?V#)L--Z4f]'dQP&NW[
%WD)XcXOYCi$dkn\mGnBPrWm%hl*Tc3DWQr:[aRSD68OApdMe>"jc1;>e,f>%-f=o"MJ,"@o1).,H+>k-hbd))X3@!(]-M1$VKcfP
%i#ons]PKJ^o>N$gX%No+9\5>h9/)ankMk)KKhIK.InTAoPu'_[TVn2'Ba1UCj1-g>@YhR9qlD>B&5]91-IR!N<0L2bWRp0h[%p.6
%H'*]iBicOWKj"e8*:/#WEAR-XID6I_n+*Yc'T_`GJ:Vb)/0RP$@gE3kPu,Y&`%Z!r70`VXJ--X<<.fq'rL@<mJE4k';XCDbWMi5#
%_+PZ>nt_S\XWc4U97-b:^drUSJ/-fgHF&,:bFJ"VF*^sM9O/0J4fY"nVGN'5E[<<WE)jA-T1Z.^=l4#>SB^-3-_]G'ATG&eC%C1>
%?^k`eEU=^&KYs&!_bL:ALH0eeT,"cR@O%h.79P^GHi'XkjBL28`WTZJ[G:d`#G$Wm-`O#h+aT9(I^Rp#0TMbNJ)MJU>`0WCN^dGK
%\$..Xi9Y#TGAXrC<Q3q&QG:>%@$qLrP@Sc9fB=G-g<N?,R^,1*<L)fR'sY(N5+&MsIRQ-VOlZB8<Kk"Tc<On6H%nh$dGmT:SJ=cn
%KGG+n$cau6<jS27OE67B%92^jHCqHBg<V@9F:bDNV_s1K6\N7Sl/rCT^nN-;7Ao:o3bt7-RO;lOV)R-s:.BkHmkh5>ncC4,)bL#^
%*/0,Z>jG"Fh`.Ts:4aa[$0dR0?#1#>S@0gOVjcHIP(D2H.n=ETXchDF#a?LnL4U.+4/smsRPdqe1T^5,0c4>3JMY]!SMcjGUUb^M
%5(<?PUiiSV.2XS(IcZ,?LtR10hIU>--WJ5+QS'>M%NGI0^)8i[%O8))llXE/EG]56"\J63\]=%XG*]7+qb"/m)Gf)rpT(GRhie98
%RiRcB]bmPUdet]L:3KoJ(u)?Bg?(]@)?PYW,jdJY'78>9V:[QU\shSkia;',Si!+bmIWs-KS_q0rC$mY7%e/u_hI4I+<ngShrDB&
%ME-,qRD*o^9jULSj)$ap@7/5Va;An)9UR>t8Y&PUY]Qqs:EmPE,+]Lm*8+c)2*pt5!6:nZ_^0XJ/s@ZHlkp.\UU!Gr>r]Dnm6jbh
%FXM-O*7LBt\cjnlj.0_Pk&ASEHc9#1(#cTMTS7WA;`]i)YG\7,So'cm[LW9khNmRFq6H?+Z7URj6(sdN5k+psO&jjp&H:P&MLlDK
%*c,&rkTRW:735d+H[Esm2&SA.\.%o+,`KRA,YB=+CYXKCbsS[)j^X-K=OcE^F'+>A?p"G'&R1S/J1ic5C?qi7^7:k.I\_<3Wb4aj
%d==l!mdh[uB`"-8c3H/;r5k[Nhh'9(Plq[C8an?lE8:CRNB.61kt)Uc8LM]ig#OS"(79-63fj4)k,$[W(C#)\Y,@OqQtGdPYQ*8A
%b3&\as7uN[s1GL,C@7X_M&u%WZ>^Is+E4AP(Tt\&%=eeJLWnH@Xbu2N%U`MPTPii5WQ65a;r]XZp57^hBWK-=:r?."Qr3UB%8(5Q
%pAhisah%D`Edf/oJu_.d!Po/c#u_"9%o`t!-`&\Gs($^1`&CVOn)Zf6k04?<TgGm(^C+d2Qa+eK5r3:0]G:FZ>QuIbYVM3Qb`rn2
%dsBGS2+5`S?oeijQV]AeA;J\(-s>pNeR(ZBVUtQpA1!l97_o\"kbd/frS1`s@akFr_U0B6S+*I&:oZ'O(hqB&C7t'pIQNZAY(U;s
%U:ZLWJ`JBRka#CuSp->oMlCYe\f%lJi[$=>OLQ'tLs3@0(QAq4:B!BcgYd+fN7HeBfKu4^Nd9"Fi2[/A1/J$n6&GFWiLR0;-h_$W
%R?pOq*ClV&(j=_tr>GeF*7#A_1m63o'?+<NQqJR5!75YM\.#_McW6]8KK5QNXi$HDR)WW4_U8Rf.ecMY.fr-rr%^l8QpU")d?F!0
%g=n7PG@^qRU4M#T"[6]GQWd6(Cru7Sr#q@7153e$;)4=Q$'fI%QJ#k/+SfA.EF*rtB_oo-nKGH]7lB/L\b^s!85J+50OX_PqiY-f
%pA=5I91G`:,oKLa?gaG[\4QlWG9&+H..#YM)VCIj:/VqP4AKL<JmO:Gg>/TR#_]E>kL,RR[2C"&[O[pT^o\\COSu1)gG%5[Yg3@C
%\S@9W;d2P/mc_60%),$;Zb@Su<crH*@eXNcBiPHpO_\CTp`s`$8\1kcl5ME<UO2m$d8&"ZOF:^'\H,"Ws+7%'1H<)7P()=3JYn..
%B4uupe.C<Q+IP;-Ut_Ob/DK'6/a+iP%Z*uFRrNEYUtA?ogq*h(+\XZT%VR\YfH//)L1U"pXNC.;*+t><@V<dgrI2T6[!F)85+4\d
%.WK4'7X*aonGDJ<0*>RMH9gBDXE?I_]k':+SG*Bi,"C+DhURMWpTmj&44OGKIpCIs=pVXj6ft;c]b\Y4XcE^6.8nM[`TL%lEOmf]
%*dub.2)V2sn+168SVlmnF^#F7ccT#%Zgq1G?86p0oOYA"*[3;:A.:G60+jn>m)1Y;GYjJAo*=ttFU)O;DW'`ss$5#Q8;J`Pp#;))
%DIeiWi^NE8UE8CH5sjuB+_%?%[?n^&XXUQSM]m.!no<VVPV14KL`R07-3d@36+RaOj(jM4Kd?@cYV-[u.#6EU2Wo8#5s$'`a[\kO
%!XhedX#1LE64sUq,0>g?e'M*(Pd*4l3VLkQ:]SUP7O7Gi4\rFs7S8Xf!`:[_]A)J;+mqb<FgqcTR?f]QHd9uHd>[*4ZO%mhg11fH
%VnLsMYq_%57\4d,Eq$4TC#WlGRP)Dif>$-,]r&.4p+[$#]T=i=6JLqb]X:-u.GQ56rZ]A'VOcO#8DFP@#=H5r]X&8h#UTjoYEBP$
%#ebne<a0aE8cEB>2PKN,^o`]WBgZ(3o[lm,I0ILf6MT[r8*;6GAG"!h!_T=A?%OaV1nu6D-n1"9/IBIaMY=QEn&RM@Hn`pB5k8s,
%bb>Kh(+%/=Oe][>inalUY/Z`\Wb0@S3-=/ZVXmI;AdTDO''<*^.Zi[JTTrddODp^G^[rF.&\2>">#_RPcn7WP(%)nag\Cg/.?4tJ
%>e!06=)pgWV!CH[$:u)8l,HYXNkrT-+5Lil1]"g0`[T%%rRt/<UqW;uONHDV3E'1Fd):C[)!6KWVi<h/($jNFY2&,/=<jLrrL9/#
%T?m^fk)%jHThh[_AeHQNY]0pYB`]AD5:Be!-/\Q,!!Lkl["2SoM<f9T_%Idi_FeE/&tU=og-roX"P9`@S;`\ESjng:\dPaR+fSMt
%#K7EMRVCJYHhN:4dN6KG:pSoAd(rfnac&`:J^9h+!?<'++Gl%I%sJ1&m!0pqF5@kM67#LJ/pJY+KILO]lCCp$MD03ph%M`<6M:ge
%4kHRRaL2.B8?>7]k*Aq?[f3_l_VZ-W/*+5Eh[pIJFAKcLU9<cVUVsfQ0Uq._k0jei+CL1uA*:^%ICI=ARV$7$2NL8bo<3lD,UXR[
%ST>CJ)([TNWZ)j)49!$D0jnTX^T@DsoJ;gI,(6LpaX9">FDS3_:pN2NkFh@8P2g-hkKPOIQa+176a=sFTob2?l9Qf<9lNhYSL;_C
%29cq@8^5d3iE0)PBSI\`)0uD))D^5(6eZf&><K87*=hJAD85s1H(mlKh=LroWOM2s-mUlrnn?FO?Rfe;eg>)-UHgFq1_(FlJX^HC
%@USY^c`9&pLV<ur,`EiGSKU(mo@feJ!Jj(=&tgkDDV2RDj(8fY,U3-fDC<=8'Z88*Jqj,R,TFStkK<M5Hd3<rOl]a%/;e/X#BJjh
%K["HqO\=XgiAgjm&fZt`oQ-?)fUKsrIG3Da"#+ha:bf?-9c#iBZDHOYTVno.L)@sdm?B.0dWh[hSm1s"D1IjUUVHG)c>K&#ZP!CY
%0NipAj(Cja\!p,&-87\?eoGQIX?B@LKPAkK=ZUOD2rlP/ZK]IFlE&'S"O)b8+=9@uQ(s:TJd90:b-=$jI4jBhR+G;<G/JtCCYPFG
%7>2cq!Fsb_F3g?3*BY<]%`t_gZN,*W?8+Lmic]*%KEOE$80:?Q`;S;)"N'%r?'J@bH(G1QRhJitOHiNGAs+hFENdF(G.q6&76mf,
%6o-%$4!_^]pL<EWi3em-q=]Y92"tb6%7L<!=0m0j+B!i&=1939p-/#Npj@\u8G:9C@R3>d9(uFIj:4-,0M%n*"u[sKQ@WBIaiaE9
%c(QqH]=L.aLb)(VV;rXX"fHRuR()RK%MVshYM1Q5M$Rs9Y_F;81JP`"OXG0W('?eN(]\ei.!(#."No+Vm8[`DQQ%>`eq/:Wo3qJL
%I%n4\j'"tZ2.7jA.=9;(e(?u"fi)<@NP&PF)XlQ!MD1[9!m9qFildKl84eJ]#FdkTU$BNj`HK+Z/%I<5J:<qsRqVr>Zr#DYp/eQH
%6M.>b83/m]Ng#!cKJ0loHf.N2+8g4VSHunc9^W`]$qlSCDBlKV4jO*XrjZ0mr_tS]OD\dRAo_VJ`/S2Y!*=+kgAZcQF6U.B+7uMV
%cnJ#=gdVre"I1%c):=r!;mCP/gFq#AF[*=:)lYhs)j7nZqqdAK^`Gj?eEF7$M/t[3`p#-U*):um"]3t#gE&&dql1nr7A8J/8`:\p
%D5':MW1K334klf-43<k*(7rq%0k?YTYnUJYU38u]a\=Y&QWB^1IBh.c-ok98BYkp0g2t9u[RLCp&bXCGp7e<I&d65ULc6p&jDh2%
%T:Ece=%![Z6$qt[Vgp7%94W^%<bE#t0hfcB%M#@b#Z2]Cg!FD')mIciHooD%7't!-6j=j5e*oLf:j.9t(KM;uAG5&Y/Ii/3?8d[=
%.PErI?ba<R.`_.t3acTb9P6<#*(WB(8MVCPo=AZF"LS^\<\qX4'YgC/AR:#A4#1HU_?T[Ufr:L(VXrnM6!e7eI;sHFk#k]FZI-ZZ
%g8`nqe)j'4CO2W14hNabqRP,m)bS.<*@sN_^1e$On$9NeE^@9SfYs'V@MWtN\"7Vb17R#(RHK7aorVMT6K:01QJlT/LeMcM,%$9F
%'gqd6,&R(bF(>_*j()s'bT&m5^!fM)Ah+,rbHPA)[VCrR1e0/Xm+Uk9+bGK'EqmeO+TH?):i\1J:TE3f*mFmT3K?iR.k>G]>7-!d
%Fb(33j6D6gGW&)^/DC7@9d-LV7F46@c4^MRUV-\S*0RU3RO!.A"I,KRC\HK\F0>+KbogP&m<pJ"M%4u_H+<abIX;Fa_Y3S0&bgP.
%Rstua^AH[2#3X=sO1,3_F5K&d+J?ESXj>VC;,0k&e*DU+E(Q>4g*#Y1e-TVERgWWp./Dteblr8Nla<6E%nSe7g)bF5i=?W0s2_f\
%=''gO7lVcBa60a>,C2D"9h1Ji)+!$Xhp&^64;/;Jf[3Q$q(#mtPr4pG:2>*q#uQ"@LY1Ce&=*'Ql"M^WXYl@8X:-^--g#amV^m5B
%UK$-',_MJn,]7TTD?AraQR[HGKSR(9i^`4qQ+5fY:<RUYM\SHa178ri'u/#hO'18EG6!<Xn1775r(suWGp8HeR"+HIZJJ(i(cSn(
%hRD__pb4jD:MYr9TD_e5B;VTBW87cDbd?A2]oQ"$o<$rk_(.-nWSe!uan?`Tn,oHW1oj<A"sfS:@4M%\E)cS!(O!PZ;R9PQ$\"S/
%"'l^R_/I3qH]!^gIc,?LrTd>M"%-bH!I66k@>`+4hkYiG#(>RODo$@5jHIh;$\"am4urA$"[<Cs>3V:5Van73C&f"H8Fu'H[OV&<
%P2@btIeAe30KF=gQlXPiq!nKl*3dYWDa9W%7>1:;Z=#GDFhDZE!8*HSrIJH%&3"S[9T*_1i@(W1oZKT7a(`6Kr`BM_>K%+$j1-F<
%?095/3P@t#6HH1e'?@AplU7id/Ne.73)`UF3!jZ&jkLOHZMIff[mbFE`dStHSZ(()?Y3,=Nn-<2r_tnVgpJiaa\srXb&Y^TG8-t,
%$ct0sW2(>?KM(-0'3T6?Xn7*66=`emG4B!$:p$lDA['jAN4:m,,9p?R4sG8/.B$i3=Ocq=+rkZVbZXKJ;R7Ws!`q0_*!9(Gck;Gq
%fl3]k%5j&"'9,Y<\?$s#Qo_@-<sVPnmU.#@NESULKT\$SetFhNS?-O`R/s9"Q/plE03u>ia4J_o%7ut"*>uKH+'@T-"330mK[9A-
%l52tDqohb6m$#TH_gPhE;KhpaS<QcUQWBoiCLpOWJr;?D,i&d0jTkQ;CME4PRqbjrDCQY4C\%Z10jSZBp?8JOc,?QN4[_4B`9W-r
%Tc.31j\<f9<0t`M,]IZ9XCE%EdG%ZH:1"$`f;VWBRC&NUg![GIQku%!H2:\G1-pI]T#^+EaN`CA!(k\@e6fr"Ia1?)$J&W%o=ZsU
%9`jro:Tf)6'hu<1Jj@d%F`Y*K:'3u)o/ScEcShhZV\"N'e0,MLLIY0,-$au<Db73Ue#W4PNR;bL!VS)=GYL*h,gaJYMOZ[,b!0d&
%At"*&K030[?I6FC_gMpRAq0RhA8dg,1WWZeNd#Q>U51Yo+Gh7+ViA>6UM@)bRHHb(8T<^0;"itW5N=[^BNa0cX_>KQ%*;t8pJ-aI
%LV,.MhuSC$b&Y>K12@4i/uOSUQ22QKLLtY\8mL7hT&YG%kak]f8J4&KW6tQYake[QL5-e:iZDcO.pU"'5WEtF4`68e^r#.H"^S'<
%V08Wsa8:B8s2m?1*lu_=^W?-il^`tH#2>pf(po-ZN%"u0,`N&;T80NpM[06a,KW/DirNR%Q)]+N+lUL1Oll4W@2ONo2eP,q:E7Q5
%%Hai)dLAc,O2_l+[Y[P1JU\g):(#HF?h8doC)qMd@gR5I;`-@$,#^Jh.D+&kP+k>Rr9.17lJk-$5?(q67Ui;/nHb=apPjsQikl+l
%+!<;[CG<B^o9T7J_<S:JH"O'F+KN91&]`+i]iIg9i;SHBc&%P3Q#sEIcA/2SPB;J71a*k*7@rQ`(d)W#V<cIH-O;S,;j&H&KCig0
%VYB"-"S?Vh=p4F?lTqMs>U+*`:WFeXEJ_'J)^5DBfl'<A)\RGkOEAP104Ag3..F*I=G(.FY&1h&]VpUY@8hKJO2ZQ#?Hq^W8kr"N
%EQGR)B)6J.LRnX.Z@J&C*O[t=,T2jX0h&ZOS]*gU'm#Rc5Zb5(k]469_FJ4p1G($q?&G\D8ZmbXLrGj]/gTCGp&7iGLQC'k/a(]\
%#D*9>9hGoE7o*%7mM&sX*R`V=16V*]g885[Ss=K`F:V#:mTeUF9\Z@/WkX!rLG]#b86@/K;L9T!\l\OXc9/hiQL?g>/E'?&`7uRl
%To&t#&'jtEOcPn5mqZeW-@S2Jr]KblEuO11"(<6__Z'nF7h3C(lj;qZ)Y1,5!tEXXK-gT.,`U4W;"2L_^YeA&*-e+UK^R[N5B2#,
%:/7$[+pp>Z6&<O=*Fo^>5=(%mOUOJ"od)9:d\l[k'2eRmo'jY*5-F_[jPTFK#HQ\Gjm'>KTn8D127dfXCV!l!W"+V'FA4*AKPRh^
%2193cSF76!fN&W#\_o?Ns**j732)XK6OJ!sMJ(D/D%dGq,$VT@_!]lT1%+CE!ZitcSEqsXSLpliHY(r;c16I+jD*"NhXabSeHn?D
%9e>V=qTW51RJ")_GCYSG?(,<]OGb>r\k/7D0j-kXV@V<lWYBJGZXbpb?65@-*VXdp?Nd2bS4ft^9.)1k>u>:r@uYY2Etc'1N2;db
%d&;Rc+[`3\W#8g&c1m-*'A>%5XA[P0]"qgQij*8S<o#6\]EC9-mSe&kH67>9=&itQ<X"33LWV9XpkE=BGHkCXNe\oSf#kH>)_1P5
%C[B7K_!\RG'gZQBRpmV"c;V9F9u;QF+Kfn6mIgZ0#WjmL)K@iYj^rgm,Y$7Z._#5I^,pTa`uRuYecTd)k2?\Y3(_EChm`ia)mVL!
%s!sKh:L(UNh(%D>`'T$.E?l%49tYOXV[0TR1HTra:bBPJYdKOO%Eq14ZEd[7i"QiICnR(#?qD+Lr!rt*"9Do7?!'g4(e/R^GR=`W
%e_o2@X/RGh(c+C1)-kkam\eLe4/tCN`m``&]ANCU6b3U_n/3OZ@V(Vh'#\MYD#6qIau@+,D8&^mVpustF?i;][*gFArJ`fj,3ouu
%q'KkuJW/__;N=KM7g#18`@(N$8<JIpNI48B;prOW5)cZ0*#kR@%JP^+NK_"B`TXE]ZG2_`R;)Y,C#.N%Z97-:l5=FVKU(ptim?:8
%qCJ$UAia#aQ.&ce)JG?:@,LG4MrLQ-RG8GB?(<;!5a*p-S?M>RriU3C5ImFnb2f/*7ab?HD14_QUg\UnS0aCbXhILQBS$_sn@+*'
%T7tP-!\iE<@mK-()L64D+q"qoae^_u8C9h'!i&')o>@M=+9t5.kcq$]L7*5/?9^sR**04t=rPi:6*cjsk37?NdlF`^4jY@homb&M
%0mq77GQ3()7=A5l'm0>0>;h<^Jl^6.6,j\[$qI;_A(%':Fn8=?<_BZkqTh;!Z,UOl.l/dlb9=Z2jGB`.)*%&nE`/*]W[q!M%#$NR
%m>`f]-JHo&Pmq]R&hS/^<'&7E'!_ECM37M%9cYtjAJ84h#mu"J15flX[AN$ID89@4Fa6rP=NJiW/I7fo6u;=BUa0+[9bjHci#Ye1
%kHHZVP*jDdOKFc\P;4o$9VV\mePV=J"\?4Gc"'>>^fqOf(,i!VLh:bk2p#3J5jP]bhc7uQ)@5-V#@Ti_KqZ<&QfgUD'u":O2r<b+
%WaEptOP+tQ(dCmWpkadnkm*b3[Z0_,0F_NXroD8Wq`\[J+%W5H_+L;+Hujm46V=V>=1btV0cIj--FeAqJ0Gq]S;=T3SJdPrkV4W,
%24FEpO,0Or*(#cZ_m++Yp5ko&nM(PA8*@+mT$7nRUiO&h4-M;D.JtB<0@8Au@0a&taKTXe.Lc$0S%<MhicA4f1]6(q.[s^[2e@4>
%]=b]H;,,b1Fc82r*$!1DpS07,&'m$>2a@Zb;f]**K+e'Q6+<<r?]!tPTD3`uZMq&rX<kGQ'&GK_HGYQ&C?IdZ\k=m?C?_$sUrscA
%Z5uomK<O=$1s:"BLm__k`LKie):X\H=>)GJ-!q4,?;E<dqG<[KmP_];XK;>)d\?(tfPI3P5*"Gu3UN`AI9nD?N`f/4:2t26G.2m6
%0iXI-[G/D,M,"XQ]J2U.EmIaZ10Lb.M<)k6iS1NDD,&2'[ogVZ8!^=Pk.9A*.n56DUM+!=Nu>)$@d)cAJe1!4HO7B&+"1)bgsR(]
%+(d^5W$tDF43V<#ZpbmVd(CPsR`mfDI6,+moJ;J/ketkA8sm-f1j"4bo:`J9S4?n>dD'sA%Nk-qPLmrjDh9N8-8h%bIZ,@MMO^c(
%&9]Lfc>o=#N\f?`\,uoH^9q,c`NBq*,O-dM;X_]Bco"q9.=05>k?[b^i1OKakga/0heUR6\Y^OfbU>*QdX?7PMrs@J,\t)Or8J\7
%_WJtYrPJ'u;Wo0DUQ$F2H!7]'!4nKX$GU$[bh$D0%g3]uQtRh,>G'<i,Gp?DH)0Ns(0h8U,,mM,]_8GQ_"s+#iH?5UH.kD1i93S5
%!X=KEH]E./n!b4$MA9C\I_ai>q.l,2i]ORFaGUNk6Xu>>?EPLn:E*nsT*]!ubdYFj59Uoc?A%tRMmXt-6,2DY_-es:%S8uHOj6h"
%cXNHrrRt8ti(Dg&h^0YoFe&UQqQ=0bi#k=k'N;omAMtAF?pf..pV]ZJ0?TZ25iIAM'M.G`Ydi\b3)-m%I7@HsK[Kik#AlWg7!u0N
%ch7g/eHlRDb&N!1\D3D'cX$GFJpbF]+%$QD/YQB)DkLQ`,YEumD?T5O1?b^h?Pk[n9gk6"\]I?GRnI4=Nfh.Y]+%FSVu^PA6>E/^
%2d^$QY5R.3oV0='j_BB.D_NTs[Wo"&;N7GA/j5UBcPj:ImT`em4aV7rg<<*qB,b'sZr^dd$W4k7"UB5i)rfT5_(+aG>;I/d>&ar\
%BrrsSDP%kVO5U)\9F6VM,`jVPbaEaZ`@O.tmE,">p;#d;fgnjM#^b\JQF[/)58LG)e!7L,HZV65gTB(cH,Bt$4H"mpqa@hq;WZ1U
%;hD8%P-Y-[.-n%Tb'lu1<a*#jdd2;OI9oL^fT*Lmm+a_KTTOi>C7LD3eU%`\G2&0%Wi/F2?^BB5%Afq\lh`T7WpMWgA_EO+*PTcS
%VE7oI5`a<1,AP/\2-(>Gjpf."d2qU8-Mng1EmKi4IdL#2^i">K+E%IrHY%U!Gk\D-fh<b$L)KXj:O2J8#_;TTDQgYJ[@lX6Xu9.?
%C.mDEXJs%#dh)2lj4s7Ik,%\pP#jnJT9UkJU@XgU)Ni*_ZA'CM`MkS7p+dWaohL@L1HT]rF2f/.c,jisYT?*,-Q=J$K^I`)n>R]"
%c.)l*9oLc)\jOR&P8q^0gB>O-Qo0%J*tA/?EdI.b7Ah<[:*H6+dsC45Vjb>Q/b-rDacnZPk,gp?(o?*cX"M7t(jka./$;9#)tc#/
%^0BgV=YlUtZ7V2es*J=/Sj*kK!6GpJ3a%RN,j4OH#pgro0e$[:.j-'&gK?]WgWTgO=_1YYVW"N@/4Y@1%Vf@='n^r^qRRt=Cen:M
%8JU)nOJ;nZ)qSnbE&[!JRK(D&IU"8d,m4;^Jpl(fSq^XZ=4h5bj1!7cE@:?V9??H72=jbj@bnKENuZg>OSq_%h/N(Y6A*@a&JAqT
%:tY0mech5[&:0>(WOji4WO85QX+lsg)WEu"reb/Sn,onNq('a0oGNJT"c.AjUN87D5&^^l/Eut?#&@rbl4j@NlKc2!ZBijP:1E+T
%#*t\`ZCr2m6I8m'-UZa^?HT--,qJXoo#Xq4[5'R=M)n8$!Yj+DYY47^e=3Q?fA>5MSa\ilbt'/g;,],BT"]Q_8kBAqadle0AijY8
%hnk)-[[c\q>D=S)b>9-KPLiQ=OtLl&l;_T!Rcg[#)h8'Z<=Dr3arX8$GbOP]\He(%\ho,\PG4g5#ahSMQa9GPq-g_91u5C[ERei_
%:eI_N(NM!qr-!39hPM/]U4;L=3D<&Ef'^hR4>''<4>4_bT3ZlgO\M(r%l*ru4dosE%iD=.74b;+HC=1`C._oo0lI/V)O-'B39iUe
%**:4JHF@%KNZK@T,;T!\i<-%l$2%m;>6991NE(aPm5A"Es6=QrT\Cg*$XK=&=E\^FVji#)p3SOGKu!6PKOL:?gH'MJfW&'fbRQEU
%[\*n/1HeKLKr_[t<hk_>:PpX4r@71ip:Zl_Q;#22O0d5H&F'q<aSZnnWS^UEG22u_XPD?XF&#c32(+ZH`8-KJl=DH72Zrsi$(d@Z
%,qb$1="g$R_Cf_;V`s\O,H4r&fXI31!L&[G`<?EdJs-Tqe/5I=o.QO-6Nb;$doKU&6'k#)[UYSTZdFb@AIljtb>TW@QSj?eH1uH;
%e$5nrUlR)%Zj[jjRtsRp]6!&/$6P7eSP(Y]M,(7"me4j7KNDCfE+3YpLnn[MbHQ9N#h)#l^r%/LY]kK8fePqBRd-;<CX$L7a%\Oc
%eXc'WH(:E74car_nL%&mqdIhoPdI`FC31&!p.`;\h*tQ+]!$Wi8]d:$GBH!6hJ\Vf::#CrosYCqrJfGZQ%ZjB\/227-6(]e]*@(I
%4*#&.5HEmNP$6KM#_;Siriu+^*$gb0F/7clZP"-'MA$*<5&trClcY69*C`<.eVBGS?J/oiqJ#1Mj+bdb#H6[,r08fe)O;cu,p*[r
%,V#&C!^L=E=q7eQTZi&5&,6Kg7%55>VG;RM*%-2PMpRV7ii9qf!Mfp0Kh+X_4B/[T-Or1?OIS7gXtre1g,MCq/3"%I6:/LieL2Fm
%15//U*^19/)5bc0"T!.>&r;0ss'lfF<W;]H#uYP)\-mcrZpE/>D6@h[/<[K+&&BF-+_,&HE#UF?2r>>tPn$D%qth`#P<:KhV#eL:
%9/92eGS6,eE0qfk!DLPb?Pt7tXJ#ZW:eVSB-m:L:LeYTn7,[_^0<7oea4NSOrWjDGoe59K_m?1"L++:?S2[J>#1A-g0F\@\ke+mI
%3!B+f?peG2fWEd8>WnBd/KeNmCa]p]qo"U!R><7NG9Rs2'LKU@ZMGQg<127OJpbdPH4,R-/aZSPF"guP<@Gmb]]Rrq$kY=p*9P7/
%\).=/%\.p$@(m#0H)BPRZZ2+TgNDu0#lfP\]i^<ON.jY6HO.%'/]85\AFZggF>FP:H44U5VPr.1[CWioe7!nujDLA47J>@fmMLsY
%-VlJH#qN?XC'KrCeUA)p/QpKG8kDO]Fn6eYm=erC(V,`l;Li+t9N-<fQ6BelPYB;B5<ue*CCXXMYpkO"c3]4o2e+`#OU2V91cFW^
%*dVMUmt:hH"@Ec.*2]/7*>Qf6P)[%e3sq4TiUcfV_=g,L>B=dZ'+p<p^Bi/e[^aT]ZhLm@pMq(lS:K0>@J%_'I'R\bF#V/emj5Rb
%LA"WO[DU5Fg`PV,he$9iGn[`<$FT"]V`;p>*]f?r8FhY-3X_F3T'Bo%/5/*e!TGZ&!h5C6JB[0!BaZ&($-Gj=F%X6H+boV4R-c&+
%MEL1e_J2m:opK%fcB^(8lP`7UZ;$1GmIQpXKV9[)N=TOe2Tai0p,>R<^NA=EUC+SN5UpZ-7Ss3@PgdCLZW3'c)K@@q2&s_2?4GeX
%/aQ8jCO3eKmNfZXSg\p;WUYA#&Ffp\`uNLpP"_:fgJ*!G9t)8.B(+>q%?ZMmFWJ<&&_WHmN<l6'*ZcKD%]a9oX\3Js247%8Ju`E<
%Ue2@/ZWE(B"N1R>q,_7MQ00`R<=i>TD\_Np05W:uZaQHuHdioLr]%J49=*D+qNddrP.@Zo!J9*=hVHgPpKuIf_qdl%(F28[F2s0.
%*XVdkXlC\PCia3npHJZdRjfmkA,:3sQog!->r)*MR#'iB@>^+/GuK/Z+g1qmR@-FXau2eN><,TSbqE\0d3I!e+i,W%1r]_NWA!;i
%WUA,n<-5T<N!L]PYW_4/n2u=1=?b7me!#m3YtAApPgC%?")FRKd)aM3nu_=M(-tJ<&S3@bRS=+#K(QbCigd;(S;?nM/)`u[B=$Ed
%6XT2W1ET!$Il*?)G9guH[]Z5_r(&pHe_uLNAWsnM*>MIqJ.HiaX?rq,6Akk%/19dqji6D,4O+L!E+Vb[[K5VKDC`WG!>'k*_E6++
%L6<(<\8"c)3-j4efn,ru(5UM"cY%jr\fMPFPB)AuNZNhm&\!tVB2&h"r;C""hNbR4*?\LVr%"Iq9AD!D\;TTqdlBfM2X'ht`*3cn
%8#&N0F]36(ZQ9"q<l(E`?$O".fNAj=l9[(YHHA!_9=^8()-n[d-mpC?=>nD&]N^\U=ZW-S^ar%il&()'X/7@7K7DSYB%<noLTbJb
%`WNOTs*5"0TY'&5.'#<k@2Z@USgF"h`9Qut["DbUoWkqA5=pC`;Lb#!dI360r%N%R8#G(qs.kNm;;_2JaTfC*Ne!)Zbno[-D:e!C
%#9\Sflnab4>AW@j$/NNX>l);b"G10<eW3^`jR!7a+I%I;g%.I6I-H*>*(V#gf%AZEEIOQ?fV=g7gm-pBT$AZr#C@=>*6'>0(nCn4
%Y6rg]#J.h^'i81_&5]#qFN`PD9ENaGA!L:tCjd-Nl0'dWAP(J-3Is'roo+hi7GCI#V0gMWSsJ.FQTGs8&-1MB.Q&MSi5__&E<e@h
%7WcHG3U4=EhteBlnf&QSQ)l&KD6o<cLLbOClc@4&]@9""L@bEn+n%C;oARQ\Dk3)oWRCC7TcDVTXZAaGK-5#Frf05TP,V#0%@I*_
%-^)r/:p-eh,+lP(O33k!>E;U@]/%aChPBuU936a;=rBn,Ne=-iV2!nb]=q\?@?Qbmp$eooCe-KXP_14Hj8c8uHj]`)d9T58YJ+0N
%gNu?UUii9n'f]`9Hb8+*8ZTi(p6GU\JFXh?>g8G5mun`slh:fe`#rcOg#18ngE1grp3U%Y7h^:&(Lg_R$'aeD!/q@QPVMQ;-/gu1
%XF2aIA*Af*?+LLbVg-t^\S`Do,Y*?/IfljbT0OIW+C&c4qN5Tcp\U/d$-Ae3iKBpX^>!.m"bQm@lrY)]JAghb\+c]]TN.NJ;jd87
%Kon`[?4Vh+QXe'-+t*q)EO[rkD%Wia[E9?epk46:mm*FF@YscCZNp^]M^9mWVL;3CC!DbToPNbJ_u5UUI,8R#_]bgL+PFc^0\ub=
%lWY[nF[lqH#+k7d^D"/+QoV/BS;3q+Alk9_Ye!)^K/n-=M(P<eR\o16N;rts5ImG7V4Lu(SFNb;kU:n!@?,N$4:847c7t@'0tCUV
%;Y+rNW@62'.ok*?XcE?H'u?]3Tdc^4+3o<5^UgSEkE=XZmLAqUbiUN*BYC6R13%gE#=oW`#8b[>'-Nnf>T4"ImrPLde>)nc2dagD
%9!+s=M'@jD1R(o-j<%$`HK:XR]kHL,)Wkgn7F/5j)Z=Z81Bn'g"$D>FG,*&ccFn,hL2#3ebfFc19!"eWd&B4M_U/Nfk#moH.*F&A
%>*6e!T7Ut&ifBq!qXRptT$8"o]?03N8fG<%6-Tc=CY`/P?R\_dM()WUr2Egi/QP2e\m;RM,d1W@Cahn#nL,1<_0#rDe\fcB[3Y.+
%]7W\&h8AA0"sFAr17!\GOQH>=RidShMGc<==k49XN7OdtbreY+#9fMu%GMWea[C?u7@W>VMlI"T-(a&_m@+m3rIP7E#*R9L/jg@I
%eOUt_QuQn]:<?D$CU]_!=E.FLd`iQWbU@B0bgZ\\NcH7C"HX"7[#F>]:"Qi`aoT8uJ./9a;RNUq2Dm*A1M\=u!u[E,*dN)=NK_D.
%b<s<JN*WZneN89"!pRpA\&S^=S*XkXF![F2nX'UCB:'S/S1@I9nMAQVe!IB'j-.YElY#Z<P,<2`,FgW4MEfa^F_p9H?LlAQ!:+%j
%!6[R2kelBu&;B$r/]l*CP^.%sQYqEr;t<..@&b9lN"mT?653<[q)d_MfkTF/'M'rgcR$(ff%N]\T*sa\*92HhAf5SOQW^0e88^>2
%Xq^h#q/8hAOgG\SNC[!]og%rFCpuF@m_f,9bJ"`\"k^,dosA2W:Ln]rHgS/?[5k]"F5B2.Q6f+:nXqeh`,C+P$n,nQ=_N?d\Pm)M
%5*.rJl)M[fb\HAFRXM3M='*`H[rcd/+JAT$mS>VdYgP.<"Q6A4Bouo>W"Q@P2&P@($A)kS@rs[A*qj<31f^[E4&),a-R;RkMEn\"
%>;QWse$'VVasmM]#5tj:dOs4dV*KWXQK:si;jmG7VW3qXSVM]\UgV*r*5cm=CFr:_03'Q*Xum`Agr,W06p>*'Gug64F5,F)1JS03
%p(&UZDp(Y1ahat\].9@,`X5kkj3:`g#ef4_6G5D*0l-[AQsGjsaM0_5nD"tAS%E"F;j&f;50\hqZonBLYVO9!g^jYL)kOMEjOZ"R
%QU"UV2@%pDORkeJg:V]L!P@"OC.<CdRDk&*[kY'O\7MnF);UPH8<ehl2?ejd^#F5"UAB'1h$iY_G27UsK=)h)Mgij%SHMU.c+>)6
%b7L?4,46>;g7,QDX:#_b4/C&t7"th9f*)o?2SXNX0/Y[$X9Le8g"7#)]]JR!Cn0h9.1T$>%IQ:__K<6N?Vem[[g1^u:\$AlI.u35
%+38C>pZRN914Itn9eK)G'q:H(1=r=>(MM:1Cb37h1jmjIms\,"3l\U6B95>t^[QL#"1JrFifMIpe_G9<ruFrga\keu;p8Iq4`*&4
%eQ?Od]c#W\lUg*W\YlR82@RfN_hYJ;XXS>;A^/kl@1d6W_%EkHrH'E_4*O(=osHl4G06fK/jeY[Uk9MJM&]/`@q?cS=Vog-(Z3>a
%Q)tNd1"*<uSAbh``_7\-/Q/R4\8cJm#\'tb<>YL4ST0QX'tcjA)sJ.h=cRZGK<\<dfdXiHRB/<40fTA1XsY)i6'S.Z+Z[a(@hcVb
%=O#c[jMf&4I0P14$"[U;.nQ^QMa\*)?S#TuPH>RE!+K)aCuCib>E:buU0On%L5P_IO!73i=XOP*oN8@O[#H?6f\O]d-&;>Ee]?Rb
%3*/@GOn']mK.$K#IV(5QL(-DR;'<\\*p19^0ch,kHGoH>\`D],(:k+CdIRJ&9B-TtkoSVt`OP!WAapH'f9KAp6Eo_*bL6bmXt<#@
%nRL`o-.O=E)171am2!O(6J#[iT![(HCQU%XU-)(hAe$jN-7rCRWluUZ1ge:+&CmSqXIkd;,\r>Mj\XNfY3h"T<*_p>Z.j-D^1QaP
%dJ*6)."tec8#`PVKY_Ed1lI%s/3SQT2`EJ8a^,)^(TGl/0BFL'4D/s/b,T]?c94P*GTkD$a:'>@.eQ3X'tt\;d4FPr4AVF-@&jWd
%YO(PkJ6C3f?:@n?h`ip)Bu)nfSCu\OraAHVp7uWNJ*^WGC,dac\_Ulo332d[Nk!7q>7KkcM[fhC7n^$VmU-3UcF!:Sqjs)ONXD?5
%i^oO\:RbaCWABOJ^dhpdccW\O$##WaU5XJ+^GO-ppPPWVn[,*1me^Doki<l7X[M?V&F,?XD,4H<)jp[5FE[\H/hsRh0tkH8A-P;_
%@<*1R`lWgIhb0\[66-il*KB=b?taC)9?>qaL-:8Q1J2h)\!`8</BM-gXL!d3O_,[3g'oa>*pc;!f27QE-6\s.ndHCdQ7Ro@VV@E[
%Xrs+!+XKRQ^Sa&qr[J:H?QS#Fb>rpMHAlM+H`,/"-m]>gDQ;<(L/bb@i!*j_cU,(/Y_0Dl1E@"+MBP/^RXnX'Lui2eQ"(h<"]Yn#
%_<=NY9='_%YR!rr\An11TZBUZPP5KCSt.f=rsQ/C4Rmc#JSWg*<%`FCZ^KUo9\=EP-^N3R3)4%O(G8aS*]'ncFcDu$=2!N<cs2Qt
%L8euS\EYU9^"T7!)//U1,#`IB,g3<fR_k?=/F=f@^NAm!8-1JWR:_UpM(>7b[P'(a'B*Ht3uJi6o*begKslB1dYs55=!N#(I0!V6
%Q7*PJQk't8N0=[$4!Mk4]3(&JcCLUVnsKNuZHtK=3]'a10U?!1\k)7t/AJiBh&t.k<$Q`tRNK^>Rn_#H)E\h-h]IR0,8aMG%:dsH
%(9T;XR1b@7#@(OGiK>TYf(ViN`/&>p":r'`Lb]JJl#:V$"&U0rGK91@$RG:XOFajEme11m%,,TpZ]<p\&COG^n[(\4.]kUh@)87g
%3.Dm*L]mOn'I?dKGu(,ilVqa3[@("#!0pX)Bc@G0fAVYe/o0uX2*dsss/lOFT-]+O"D4N+i`Sqap&kOlTTl^DK,?2Eb*s@u7$E0>
%>_b]Kj0RutN.RFP7jNtXNZc4YkfZBJ60)DYPP3j36pZq^Jf`73*k-e1$-_&?.OaaeX$a?-+jn,/Lh)Y"-$2N[:n\PU"p!Un]c_^V
%ar&H6:feqTTW(Y:aKQhPq#6,B8'f2;>b&&]&ZsU1#\P>)KJa#:f,Gk;b7Z:&FJ8tJA\d2S=Xo$/6/4@28g:8]R[T/P-B1ih5=AO`
%A:/j3(;`nP&lGsQ'#g=:mNRJ"-A5M&-r$X/HPXhu_bmq?#j'tUidPCF/7*rC/4,S4l%PG#+0nkk$&MpPp2&QV[72W;S<'h;G(&Rq
%;81ibEg^>N`t2dQOYp0Lpp6utYRN(fMK:h5^+8='p5S!C]ZTb!iJ\34puJsK8U%k`N1@YH!jT''Tk0UO>Z))TlsQ&LLYcL<j3O0;
%,L"LLD+t,\GIg2e(WJ#U@od_&LjmX`-7\qARNfS4As@B4H4M(b)d135Gi96.qSKg$DD8AFQUn//'Co096Fk^;X^NYEIS&7h\)Ir3
%.h!sF%f0$go#!"`OnUkFh5$@b'#*8)0I3`g\Vre8ITani<k)Z7i$B:ETga[WJQB?HBpHNN"/mJJje@Pp68CgY&Hs*SCd!%RiF7?!
%-mE+HE!(\<!um.h3br)?=?i8#+t8C&LD:'Y$\[_Ki;s3U"[O+C,gjIL_e1b@d\=]6,GP[/$?S(\r2h23G_\]\,_Z$KUQn]P6t*#s
%3f=)j70WoO!4=?08t@V>=u(`/P0c8Hk>jq1?k[ZTe?b][Q=Nb,$/XMscp()_Y\%gs/O\Mp=j^_#4jX1s2\`\7[85,'_S)`eEmXk)
%%ZUYf("7""2&-8q.Zuu\jr"#%jK=;D*m!,roU_2T&:?QIj0W`oH1d-KjA`?T^gW")C5.p]9oUH&Y[e;^J\E^4Ed3bDq>HG,`2GRr
%9U&)J#..QM8nG%j'?NOkn\iEZ8QB\b['H,:jQ_aAj5I;i7X:#F2DDHMi[YRl;'TW"E'L/A$;NG+J.[LQM%Ji%+aDKBFdMgQ%lVU1
%9;+m6WO*b<Ag(K>s"[6*#8ZsL<Yh4;KHfdUj_H,`HiDSn\9E.j&*U4LM3,D"mQY6Mq@pCk2R8-]J);u):A-L?L@'2t:g`6L11D5=
%NWB8T^S41Ykh1V@[=+,1QN<=B"0)kJ1c7g6-AhN5'tZW)hrj3<!3=lmF'2dURV"?K3RD53XkoZ]:tCqd](`Z)KLB0-C_c$;i8!D-
%Lt_dX5\t>'!_8N*5<3N7E,&eHcYYC;crti-%K0,2@6)e',a.qF2'I*<6'O<07)@P#-q']b_3!Y4hWj!+1Z";]=_7+QCtd@rVO5t"
%<VuP`9f&*?0M`2f<t6:G9kXgl]sc2s[mS=LSnbEHs+oXNVM@7'D?RCT[`rG>BsKt?[R47jaOP"Zb"QFJ>."EUS.Mr#G>'FcXSn)2
%n7Y7=TK4f81?(9Q<>!J7nof$*Z&]SR3AbKT(`2c]iaq="mS0Et/B0T,%Y8q\&d]Z6YmqIoGaf".\10O9\H0@N&,S1W67[dJ.mV(N
%0MnuiKfk@];!'+_d>51?Vlkj5H;U-SQe(TQkU>(R+-%Vl4;(%fMJ;0Uc#P6QCnM?^.rp"J'&J+O`nEr@*ODC&V@qF*,Zasbih^Lg
%WtsS<B\hdPW@67NY0:tF[O(JI$[*\1rT/=U1%/quR]fG>RD6q+FTilbXI6t!$dlQ+=b\kSA\U&M:C/Zf%:V_sHC4?VD.H5+_b%r_
%<q[,`Q#.i[@F:VW[s0rAC;J<3C<=_+CrA4?@;$ajr>#F,$uA)fJjh&$"lB+Fm'")na]],?gKg6k=?a:il9k5Tfjig\nF5&3Nn*Hj
%!0`@D?=n^.P'IAYEScCg&&fF.#$'XSK*3!M<.EUrZM<WI/okaIrEU]MN+?=sQd%r26Sqa5&E&^)"XACBq_VdN9P"HmNtaD+>k1=8
%I;EehT4+[s!0On=HIo?]@]_dieM+4;Wgt"UAr3-0MB)(Wd@2n?ORQ(Dm]KjmEP\j-!Q'1_4_OY/6I^Y\)D!g5&jH<GjXsPj]WBJQ
%<gsb">Qa-o^i>%TJGN<a<TtjG,q!!9I2?hb,t!9cM'5m9`JK3(E0TR=F-,q7AmPgZK@@qri\J'U6Jo_-Hh>X([RB3ZI;-\2nYu%2
%+ZC43UEF8^9lhI\7i\W'=*J/'PNlK^!?bPVWetb_SP%lAB?jo6kH=<tnn<ZOY$dur&tX7R%a*4r?cbpHEOUQfcLG<frU.D+9I^MG
%2h!jM\j@VkSR^s`1PH=@Nn_1Mr2qsU]RM\HpQ2WAAe9#3a3V*mRi(8gmmF3JRep0#nCR5q\UVDm=DtBF%`6^KDm-Nm.LgPX/2q8M
%QD@pDeWE4-f>XXmDm7&h"!J)$Y`ArLR5fcS;hZCgfDoKnqJ-a-3h!XU(G1Fpb''gg%Ud5n?Y3=\c1naub$b"i#bg>!#WF2QXC2@e
%h)'5.4t6g__``mm)D4./7/W0[L`m*="98n5bTE9Vo-!99@W*>V2)S/Q.D*UOU0aP$!^@2J%I"X@T6fRtWb2(@E8MM?'7[Hsjur%R
%S^nku9YRXbU_ikL_Ti"2`9/><aL4u/`Hll=r.t7Eq6F:qK.MO_)mN&KA@3j7*!bf1oAs@Ih$9.^),KfGm0#X1o:#Qo_"s5T[_b)O
%p9DYO!Y\h=AlbDDYCI52dY_aTF[0kF<Q5%K*I\Q#KBo?Ec1p]d38ZEM/CAX]\;[PY]ZBuUNArIKWrXpg)SoL&0@aYP<Z2-icQr0`
%4Z,<I4kj*XGNj2P(:tuT?J*mrY"'<q3oBaI;>)Qn)4%?aGW`<k/.S?oM?X6/^O?b/>F?CRCM-APget\*!'FC025UphXh^Hnr5@?0
%kC?^&GS-Z&"jB<GWd?BS_Lm>cChDA10mo[`?[rk.PM+Fq=rt!hM*%]Q>,&UGWBo_!Uh"9ICapue"R9Y:;9rjerN;S09A.$i2snbO
%$DX[_T^oorZ%e4/H/,'Ad(VdQ\RB61mH'CiXn_XGO'&kM3-F:rEMBU'p(If%22cY?$q7D">pDLS\Z3:icZ.pL9.'omI;%c`EV#O4
%XMa@RqJ6b5q#qH]da_UP=_8n$')D4fVm#-Y)1ds>iZH*B#Ro#@$$=e!JHU_0V!H$R\qc,TBi8m7E13/1?Yk!*8A'A!PT]c.9AHa8
%#4r[o&[88+4U]S;P72KeCe(R=Q-N:jh6H?^7sMM53XOYZ&CYuL4BqViXX!D"^1h(=q6DpjT2B/H<:oprVKY+sEqE#\<rs4BB;qBP
%-aEZVg!)U"V8Ne4)#m,gR)!B:csMHBl>hWa9]6Gs6V^EJU/-b!,bEO6:*c\#CAuV>[?%q^MiJnJ/_Xk2O^F9s2o>r%cLQAt:kO\R
%(#,4+&8U[LVli)doGN=A?dc>kpL*&DLu/gT/6\)h!q.e7G^i2:iB,]X<oe)R?h`62^MZulDLM4pT=9tfYISg]n)4I8S!M9gQ!'Bf
%30uK]:!+![C$XR&m>C^Ua#\`Vh2oZ-.]eB^]8CuuMu8hTjLNT0<l;29Xk5_jIuBIs;@f+0^V+08am%Jr@S'%&qT7*XgFo1i>uS*d
%duT5%*[Q8((3-[/4i>rZd`3,Gnpr*(5"TVn>X+Bu'4&VEL6Hc$O.YI](WIKaP+MgRdpnEbf<AI1kVPYE&)0Jsc@Q22*ICEJO,=oZ
%SjdUMO)D6-U-["e42C[fP)8P:54(`*g=Jh$4s&OS-l)<?1gdI`P)'qGo86`3'!dg5[GuN=>5CHS=EC1Wjl&Q$&W8A>lp&O,C^SbG
%76`*.B]Sf>]"R0k`in$\CE&AXE`)d_oa_[_XH>-$Cb\N()+b24l*<u!k!:2<.8:-U+5\!!a@O0T_%VQ."AE28A.ApYr7)k5Gk5<r
%WMWuNB[;r/RM*5L>falWZ$'H,^Bb$s@=@c3ZM&3RC*19*e?skg@%Vb+G.+AOk4.3@g-?!lnk!Gk;kOK85aXd7WGNqjja-<J;[RS4
%SmoCH.\E.Mls7)?X5TOLK]GDQAKC#fIZGkXa!cD5P(r`D'+6"K.^WGuINGWdGiR:Qc*KOVRtC*7`Ij,Ti%VNpjI1P.fauWODjV7(
%<9EQL^/`Y8$^tY0^(9V4%N$9EpmC0+a=Pm(=242MO^EmB!qfr10c5b$hg!'gdOcSHW[Z9'F3dm7q@<s^_qeK9fsV.0M&.!o)9#$o
%h?d6$052NVmDq#^*:*CY><hL2KrWjs+.D`/p\\Z0/b_046b5b&B"upmqX7.:?09Meos1R5:fQeo6dpb*#J&EYOq0E=UE+%]F%*(6
%R*5!/VS[2(chR5h,/KT]\.E/iG24SpK[$@JgjZWhD("3uck<<A.U'CtM1H<JkW%3S;d`Rirr#TK6-YaaFfPBN[:Ho#?.Y\8GR&39
%d;=)(0#j5a5rD;[8,/Z0&6n63'l=<7^8$K]P.`7LhZ';"m<obm2r!n>Adq"&n18]<A[N&C(`G=]1%KAc"m5$*97CD<QaS3-&ti"p
%@8/W2G15afc+(3cSI)__AbbEW\o[pb1dF3J0i6P=DDlHONob3XG04+E<htJQSG'fscDY$2Yu>V^S*N2&.5>E#HMg(qg2.'aG[m2V
%(F<ctV/P"(b:@=?iLN'2U2l-$i39I(9YAgoD0,TD8\B;lk@Zm5!CZL'MufuJg\.YAKZ7_ii>3PqVX>Btj>!gL`hpGTpucdj%X[ha
%a,X5?WeD(pe`TTCR$-k`\!7:8?:4?U%q!g%-1J?@I?==e:WXD*6hiPGbWo<PlQUgT&6a$I:5IHf!+jpi&7T00+j8n=$>hI2[q8%<
%Zk>Yi#U/cE!/a?N6UY)!J1)7)"aU+LeoF$8F9[D]pdL%fV+DA@D1n!P,`(%@@YO\+kYaf4_-g%on6/BTT-;c':`V1T6;SHdo8Bl^
%a&ilZ--+kMI!ddC@Y@!)ap13(\.W8!6:+\/@6g*?6ki4iKF2i0&.$/[JL-%ID;kVSjO]<MJoQE>D%?o$F$ZYJB.N:d'#b#7+YAS%
%:bMt`USNI*Y3^7\,6&rmojhY;0+h`375C"UiK+3mP"mc,<4ueg(4g/9@\:Dle`+*#Jt1PL^4_7"_lUlZ[Fo1L!JJLjUFT#U*e!K5
%T\s1501Mr\\cVU,5f,;pFu<))je=soqf";3NMl7'j/skU6oENiJ_30ifTlE!OdRTR^,A7Q=dE4k@cj_U#L5[V9Vf/I1*t0XeSLp?
%2SE:&J01%WNFl5)RC\At:D$Z"AX`oXTl!c$6a44TK$PT>1*G*/*9t\_,K_-R9iLZfO<U]P1)"+8dQZuRC(AWR<;j&,cDZ[-U8IuG
%/=MZ&&.(,j:f]$Gfuc@bDRt@SI82+afcEO=8)4pn,1ek--G1[YMEP-1S#mINAY@"'>`p&\3ijP6@]Y\$]qL)S,Jf.aTr_kKpY_2o
%=KR`OB5Sn)L6hk$&hm2QN?UaA>gf%3kdS4CH;U$Y$C`jrmiC+a$CP"bZ*.k,DdFVV52pP'%rasiRR*CP'=-9r\tnqAKuGDF,u,ph
%NU`#;\:Mm;F?7tE_^k>6K7nXcB>LEq0i\m]rD$bK#oi^R>$/LO4cVVTC\7mk+=/!ke$D!oYUsSX2Y_5'@(*c(Zt[Q'a<M[C5HH."
%=CXC/s"X;$aeNGI8>:)Tqj/SS+qI*@aa[t)XQ7m!lLD11R!Gm<7U5F#brf"nKW((]cqr?Of,Z02Vm[\t-@/+JkD()"n$h5aKEG!3
%b[BeP,%*qpK_RFgi2*3l#1fSea,-NWh68tr,o0J]M`b\q)Y6Tck@8cJ-?t)`NK)R"Wb5#FoL0q5*C<S#,XG`kK*c]mhlcH#?Q\C`
%#*h9kki7>mR!1T1VntN8L`SkTDpE6^baIq5M>eXLhN3Fenih;*#7=Np!rOJc(Nj\Ij5*!`^jYhkMSX$C0!N9'dTaB#ZNkrqKK':@
%[W'AmeNhnf-<=uQkY&CL(*q'Qflk\)"`,;R<]=o\G-G1Z^I.4k"0NELW8tC,+1-`>D`;1c2%U]$%G_8+U"f>pWVdI55`ZsK"q=0F
%4RcgoT;1RGUaD7Uo<!4Y%IfC\O0QlVp;*$]Z7LT+fd;RhH-'O%3\P6@5mW"_-/['ti"de#!<%)_`U-d6&=I/Q*[:o.>V.a^Toc3l
%U)XU^'"F[!_T"322[LF\8A'kXpcs*fT5SbBI;k1Hauqj%c9]2%AY4X!0Aa]XTngKZF<BNlG5iPC%QsCn,br<[MrrbSHB&+gXS-V3
%e8OOhi<,WXA!d)Z_eY!(%YeI]\dW^WZOa@8et@m.T.&i)[LntWGG4nI/i;&3'lS+anrW_HV)NMhpHVmNX5)bgoU#puh>@'h#9TUN
%/dA7N6+XIP4]Y=16+T0:(2d^/s3)\XbpO1j[Bmd3p3;"MC<_<_R:R;6A@(K:E4`@Q*<0VSk:%;e<Uq-rh0@*8Ber2QfOqQs`;2K>
%a_aL"d@KHf>;'(ihSMjU@XU@ejBV3+0c\rO\"VP&cV`Qqn.=m91oe&,h`BG%Y2W6a/*OQpZds``Ko+Srd?i^J_<6phQbJ)saBbR?
%8gmUp59K*V1oo6S,DgPAFjUs0_SdfCg\5SJja)PX1ik/u+EIE#n*2&[9Cs@)Dn0umM(@L+G^Yggk(=,7MuN8JTn@CWEc-N=Md?M!
%GN1.()argCUQAAa/Y(9T)/-IIjZ$&?=?VKXO]u>C<Wgn3DV1^-lbM5^G$G1$FPGc7Zjg5k]:Pon,]R"4r-OEAKh#cfl'T#+b4T[6
%hh1#Xb5ISG4Zg?Prd)*F3X11kn,n*Gj\of0Sc/N4D>)OnCn2GdC[]l<DmKPh06&Q@Gk%$a%:Y*UWJ>X8q)Zl4ml]!?a?_H`9?-7Q
%')E'nO#,,%?AC==+\]`<q3<T+ZnDZdg(igb"a&q*`D%]kDEWP]YoODrUddb\g3^[;&cF=W+`D/%"'66mkD?muPQY):!!qd&:F*C%
%g]kW491`.a%(mfD5cc+JM#5J*cWridTSW!mhW,+_;),n!>aG>op,Yi#,L$LZV25>U'3.>nBFhO[7%d@#!nBn:Q"2,p(c7!%ZB8ci
%jeW+tE6A5,AK_A(,<uT7!(hpW7^RE^[YST\+jk`C^F54XS=_NCk2FT0AcL%043OZ+8?[DQSQr^LREYa4[X`f<k.?_FdC`fdakfQ"
%/jWP4WV3Yf!XoKZYhrF-+4C,)<,d@ZcW+S,A7e*J6W5H@^C2jSclgGiK4_<5ZJOnME:B"Ne&B5R7.R(c'BJ*s,olc-aWXZ=^CT,t
%!4op?:Xce<GqG&m#u/`WQK]R)lqe3*W!)9;U\>?H1?2IYjCM`$@=:'YUcS*c98%CL;umTG!*"])CC1[#4ABYod[DmSk@"K!!4.sX
%/'J"tinUt=?N@LkPail0E1@<Gnc4i35.Vm=J4MAcf030k6_Ns7&'T2>L#3sX4HDh1!2.Zu)e^6BICBJ@6o9??\6<uOYX(39oBH<i
%cd_dHj:SAh@3jE_\iV-^91X+;l]RX<:J9L*=)>u,`X?B;^LAl4niEl@K6c,q*RD'iK<\AUa/+6iWjo&Dg+*Zi=qKr<<e/N;1-@u^
%Te?YGKD:TtE\q;d;T6kJ:hSX*X[NL]C8!C]l,&^K'qalfdg2J+5eo:j==A\:cQL&4"lN<5FpYGb!'oV*a>Jq3W4,4=;66p;E`.p,
%ASj5%eq#MtPt7JL(Q"jT"G\^PW$VcE5;!U,X9*;uFu$@U>[Br[(<PGFlfe-`IkV"lO1UNh%G_SrDkGK9GruH4S>.&%%L>k9%C37!
%.,RRFgI%u*^4%i)A$gmtX'U(YKchV@WGPqHR_B">`1FHQSTE)X5rashmRU[^2::;V_iAR3&GJu\C&,dc*3:?kI:q``RAp6rK$-!L
%f?&:O<F,leP4Upe=M87o4=:.j'Qg9QMtB!+NBq7B3f&R>RLqc#]iKO`Ru&d#8XJTR<_+iY;KG'AV.8d()eKVJ;T6n7eL>o*A,DR%
%f=*it)esOmm1D5g/YN56`)a544X]UWR#L.5Jib_^:KPstPKFNO507nR!+NF=3o[@T8Zp])U"gNLDjU!]k*[Ma"[7M5j6je^Y`Z'S
%/0asEQ+r385N;5D%Hr7GM9X-)a]DlCb3!6007/*[krX:fi:?`HmI/rQUN&mp5VVqB>P#@r@ZQi!LHn'Y(;!-]^SN.6kZJ%pn+X\^
%2^SMZ$YfM"ldOn^`uB3\c#O\1k3Fm2TKC4*MW(TcN`4bHI"0kH-EHd]+."kaKmVfR.V!0c^4H%!I11'``]%D]i_3s#9_$qGQVl#I
%;SU60rqPp)/5h([-.MM605M'e\PfS?\aT#\\idVWYS4k@If-%coX;QhCjW_g)+u_;L:t&ep[)U+T25?[6Io@tVc;OAhp_X'ICr81
%($>&Y0"&Ys2_'[X1$+L9jA)'M(MW"/MN>gH_i=#e?p8EQ3Y**t?kh&D!X=PQg3j5N[@=p)mJNf=gaC?hdr#buL7<?fF"[!j6=,l<
%HE&p:WQ`a8Fg,G6,>IGI@5Urg/Nk&[)e962Z2<!6g_D):c1#*_&N'sSA_A@PGOZkWn-2&tG>D"uGNR6]\;4>%9q$`5&3+r#Ojb$c
%4<Ip>'m[4u/U31U*im[uX\k&%MWF0brHR,B.ETTU0:'I$L6Y+-=Cpt+BI[0)kMtfn?*@Q?oY$4bI`s"OgZuSgTU"0a?MF9jkuUH8
%e]3(F/%A_A-/H18X"lJ*B=p)PoGlfLn^j(HL6M/3lJ<>#&!dus/i)T7>FOG6j'J9TaFF!]oX%$LMj[UX+)A6&IW0o.;[6<2RM)^-
%%tFEOo_<3[AC\9c4u=^K'e,6^PU_$SP5Pl&o^XgP(.97:J*6s9*>$)mm-<GU,`H%l<GpUtWNM^Klfds)f*p(A)%r=jZ?;e=eEmqM
%P)#FN0mPtM@ks/<n/,l:o,Ign^R$pY9>KS%qgJRBb$mB,jpT6!9@ZqqSabKn_?67Qn+V(^eH.\I;:UDAC)6IQ8qCA3P#+k(X'\D[
%;[YCPLWS0&(?[-pL'<E^Od3;+LlH4U.`;.,*H'L@=o%du4s%IQ?q&G(r4D`/(KVt:)6k6OKaPC4leK>%aEjtuV&8=hThDbI&E&\S
%FO!Oj-*Y%jTtj#$^cb`0c,&T'Y1]Ci?.%9hMEOKPao/VAQ\J0sP36Ei,J=dH*goOT)>#9c\k@-VpS/g(8=]L:\Q_A/fi+t;4QZ%i
%rFu;18;(Qb\tT98L]@<W<HHDYP,G0"d(sJON1uC=kYsq?qps5o6u.WZAhg5(C%8(]?jEdHX.0nSU:/gqqr=hCmr(Y[Wr9!8"L)_<
%Tp;R#@"fK="RhDTY<&&+lE^Y'EU1^J0AF,@(s%`O9c%oE0lpaIX/AL<"8G"E==]?l;HtcnZS+D*:;h-'43trA/<lML%GI,@JOq+3
%3NWsD),t><"OG-7'pQa8c88SO_;,`f4_YQ@+f_2T6hpcATiROq_qk?[F4DOP.+@$>^S@HF<+O0!pXt=M0a:!5dd7h<A;_a/+Dj:j
%E.[0^-lugfA)?e]>E8R;fbJ+!"iJq^WNP<<4(]Tk_Ep^gF,8(>#W7WlESNXiUWAKJ:\7!!E8BU3,])\N&)Ok"\k.6^ao[t]Cq15#
%#n4Dt6>27U`'Uq+YRMnjfk&X_`F=KPF6;/,[C7$+b`f.*H4B>r,oo8-N9=[o.B]0WcqIb=I]knVo(jKY>@Za(74'_aS!M,$6nRi0
%g0,=jSX!9`?")(1*WnJAcDP'V%oV#XVf%V@"``1\QtEW%@'oT\$hpJKhRl?K,h>b'Ad1G]d7?F>DTf#$,$QL6>EEkc:t+g__i.[E
%Rr%<fR2="j'i1p%EcFQ8puG.&2jEi;I(KL*0Yl]qGG0el9m#jmP.SK`Eu`sf,)*8XQ&S2J=$1V]BlT#Ig=6W]FS*ZrRe`369*oph
%i9u*N/TdU.,gWC&m?;7X`tt0-5"V*rI6p0qYW?DdDcb8!+*W]K7W6o(BchOfIS08rbd:l!fj2TAZ"tI[6h9'EmHCjP#<H^nbIoJ:
%)uAp=IAXUSs#OcL^/h>'\h*p:XPObOLKJK?XU$*^U0O9D3#CoH_'OAlA@m=\4H2.;@l$.$.S.39M1$4q5o/qS)69PYS01$<dftEC
%BXDNpe]WdHG806#7'bf>_QtthIINA*A*Yp0<_2*bq0]rq;k\e8elY2H@Sg1sHGL,4]g9l*Gb9Bl7HDI"FrbeA>sYd;4h'+R:^..B
%:Wej9d#E2Nmjf@na`qu<JP-'Y['EogQEJ7E\92RM]tM7g*H*%k^SZ>_-Aq-X=IXg'8u<4)(MP9VF;)?]#_YspcmcGFNo%Rd\b^N5
%S86*4CH<ZMY&t#slG!L8XaL6\Za&@gIi%ASDjp;ME,7?1HZRB+DaHAR^GYdPm]s'oYI7YCH^@`q48'E5=t;B46$n\f[C;^G;lj2g
%\bQG\<Ch2G@@Q`2$cVuu]th&KhSHboG+lB:^7ij_pe8U9ik"SC(V4\l#,hrar\(\5csmr`kbbMPfM/b<FQ$XJ'59gMe>@)(FP9$A
%jGW&10mCu]lh9t+QI`n;oaeh9btiihcfO&6pW*;YrVY8SIf99E%K,k%5QB]/J,Ap%s8)1kIf8YPrp]*Cs7_ju5QC87J,7@7J,/2U
%hZ*99&&8,7kJ-rZf3c8jq*4oOImEMMI,LopIePMqo\8:$5947%,l~>
%AI9_PrivateDataEnd
